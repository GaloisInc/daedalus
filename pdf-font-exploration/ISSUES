-*- mode: org; -*-
* TODO next tasks

1. debug 2020-03-eval/0311_*.pdf, see below
2. add more cmap tests
   - integrate these as a 3rd tool into the new&improved pdf-driver/test!
3. fixing CMap.ddl
   - do UTF right: parse as hexadecimal UTF16-BE and convert to UTF8 bytes!
     - DONE?
   - see other FIXMEs in CMap.ddl (some may be unimportant)
4. cidranges and bfranges - mutually exclusive
5. no check is made that notdef conflicts with others!
6. cidfonts don't use UTF16-BE nor <> notation! *HUH?*

* TODO [#A] issues with `pdf-hs-driver -t 2020-03-eval/0311_*.pdf

The below is actually based on an easier to read PDF:
  qpdf -qdf --stream-data=uncompress 0311_*.pdf ~/tmp/0311_read.pdf

1. the first line of the first paragraph (after "THE WINE:") is not found: this
   seems weird.

2. A font encoding issues,  after "Color:"
   extract text diff between desired and actual:
   
   :    Color:
   :  - bright ruby with reflections of garnet 
   :  + EULJKWUXE\ZLWKUHHFWLRQVRI JDU QHW

   NOTE:
   - This is a type0 CID composite font!
   - The CMAP is parsed just fine.
   - tracing the daedalus, we aren't doing the CMap:
      : ExtractString_Composite(...) {
      :  -- AHA: not implemented yet!!
      but when I add this 
      : case font.toUnicode of
      :   just cmap -> ...
      :   nothing -> ...
      we always get nothing, but look in "11 0 obj" below

#+begin_src
6 0 obj ...
    /Font <<
      /C2_0 11 0 R
      /T1_0 12 0 R
      /TT0 13 0 R
      /TT1 14 0 R
    >>
...

11 0 obj
<<
  /BaseFont /DGZPGN+Garamond
  /DescendantFonts 17 0 R
  /Encoding /Identity-H
  /Subtype /Type0
  /ToUnicode 18 0 R
  /Type /Font
>>
endobj

/TT1 1 Tf
12 0 0 12 288 269.2 Tm
[(Color)-10 (:)]TJ
ET
EMC
/Span <</Lang (en-US)/MCID 27 >>BDC
BT
/C2_0 1 Tf
12 0 0 12 319.1191 269.2 Tm
[<000300450055004c004a004b005700030055>-33 <00580045>13.2
<005c0003005a004c0057004b00030055004800c1004800460057004c005200510056000300520049>-127.9
<0003004a>-19.8 <00440055>-20.7 <005100480057>]TJ
#+end_src   

- this (for "bright ruby...") is like 16bit unicode, but offset
  : <0003 0045 0055 004c 004a 004b 0057 0003 0055>

* NOTE current status on 2021-11-23

src/daedalus $ cd tests/cmaps
tests/cmaps $ pdf-dom --help
...
Flags:
    --xrefs              List the cross-reference table.
    --pp                 Pretty print trailier or the reference --obj --gen
    --list               Pretty print all objects in the PDF.
    --obj=NUM            Focus on this object.
    --gen=NUM            Set the generation of the focused object.
    --pwd=STRING         Set the encryption password for the document.
    --parse-value        File contains a value instead of a PDF document.
    --parse-type=PARSER  File contains an object of type PARSER instead of a PDF document.
    --help               Show this help.

tests/cmaps $ pdf-dom --parse-type=ToUnicodeCMap_simpleFont govdocs-000009-a.sf-cmap
ToUnicodeCMap0 (CMapProper (fromList [(CMapKey_cMapName "CMapName",CMapVal_cMapNameVal "F1+0"),(CMapKey_cMapType "CMapType",CMapVal_cMapTypeVal (Number 2 0)),(CMapKey_cidSysInfo "CIDSystemInfo",CMapVal_cidSysInfoVal (fromList [(CIDSysInfoKey_ordering "Ordering",CIDSysInfoVal_orderingVal "T1UV"),(CIDSysInfoKey_registry "Registry",CIDSysInfoVal_registryVal "F1+0"),(CIDSysInfoKey_supplement "Supplement",CIDSysInfoVal_supplementVal (Number 0 0))]))]) [CodeRange 45 72] (fromList []) (fromList []) (fromList [(CodeRange 45 1,UnicodeSeq_singleUnicode [45]),(CodeRange 48 4,UnicodeSeq_singleUnicode [48]),(CodeRange 58 0,UnicodeSeq_singleUnicode [58]),(CodeRange 67 2,UnicodeSeq_singleUnicode [67]),(CodeRange 71 1,UnicodeSeq_singleUnicode [71]),(CodeRange 80 0,UnicodeSeq_singleUnicode [80]),(CodeRange 83 1,UnicodeSeq_singleUnicode [83]),(CodeRange 97 8,UnicodeSeq_singleUnicode [97]),(CodeRange 108 4,UnicodeSeq_singleUnicode [108]),(CodeRange 114 3,UnicodeSeq_singleUnicode [114])]) (fromList [(45,[45]),(46,[46]),(48,[48]),(49,[49]),(50,[50]),(51,[51]),(52,[52]),(58,[58]),(67,[67]),(68,[68]),(69,[69]),(71,[71]),(72,[72]),(80,[80]),(83,[83]),(84,[84]),(97,[97]),(98,[98]),(99,[99]),(100,[100]),(101,[101]),(102,[102]),(103,[103]),(104,[104]),(105,[105]),(108,[108]),(109,[109]),(110,[110]),(111,[111]),(112,[112]),(114,[114]),(115,[115]),(116,[116]),(117,[117])])) "currentdict"

tests/cmaps $ pdf-dom --parse-type=ToUnicodeCMap_cidFont spec-p358-example.cid-cmap
{ $error:
  { input: "spec-p358-example.cid-cmap"
  , offset: 384
  , message: "byte 'e' does not match (((byte 0x00), or (byte 0x09)), or (byte 0x0c)), or (byte ' ')"
  , grammar: [ "166:42--166:50" ]
  , context:
      [ "Stdlib._IgnoreResult"
      , "Stdlib._AnyWS"
      , "PdfValue._Token"
      , "PdfValue._KW"
      , "CMap.GenCMapScope"
      , "CMap.SizedOp"
      , "bfchar"
      , "CMap.CodeRangeOp"
      , "injr"
      , "Sum.Sum"
      , "Stdlib.Lists2"
      , "CMap.CMapProper_Raw"
      , "CMap.CMapProper"
      , "CMap.GenCMapScope"
      , "CMap.GenCMapScope"
      , "CMap.CMapScope"
      , "CMap.GenCMapScope"
      , "CMap.CMapScope"
      , "CMap.ToUnicodeCMap0"
      , "CMap.ToUnicodeCMap"
      ]
  }
}
     
* TODO find a good hello-world.pdf
** input.pdf with the qpdf generated input-read.pdf ?

output

  daedalus/pdf-font-exploration $ pdf-hs-driver --text input.pdf
  INFO - input.pdf at 0 - Catalog (page tree) result:
  INFO - input.pdf at 0 - "The quic k bro wn fo x jumps o v er the lazy dog's bac k.\FS \ESC \GS \RS \USy es\NAKno\SYNma y b e.\DLEdouble quoted\DC11"
  ACCEPT
  SAFE

  daedalus/pdf-font-exploration $ pdf-hs-driver --text input-read.pdf
  ERROR - input-read.pdf at 2591 - Parsing Catalog/Page tree
  ERROR - input-read.pdf at 2591 -   byte offset: 2591
  ERROR - input-read.pdf at 2591 -   error: expected "<<"
  ERROR - input-read.pdf at 2591 -   call stack:
  ERROR - input-read.pdf at 2591 -     PdfValue._Token
  ERROR - input-read.pdf at 2591 -     PdfValue._KW
  ERROR - input-read.pdf at 2591 -     PdfValue.Between
  ERROR - input-read.pdf at 2591 -     PdfValue.Dict
  ERROR - input-read.pdf at 2591 -     dict
  ERROR - input-read.pdf at 2591 -     PdfValue.Value
  ERROR - input-read.pdf at 2591 -     PdfDecl.ObjectStreamEntry
  ERROR - input-read.pdf at 2591 -     PdfDecl.ObjectStreamNth
  ERROR - input-read.pdf at 2591 -     Stdlib.WithStream
  ERROR - input-read.pdf at 2591 -     PdfDecl.ResolveRef
  ERROR - input-read.pdf at 2591 -     PdfDecl.ResolveValRef

problems
  - cmap and etc is in binary form in *both* files.
  - and the readable form is clearly not equivalent

** tests/td09-read.pdf
*** NOTE data

# cmap defn: ( daedalus/tests/cmaps/govdocs-000009-c.sf-cmap)

/CIDInit /ProcSet findresource begin 12 dict begin begincmap /CIDSystemInfo <<
/Registry (F6+0) /Ordering (T1UV) /Supplement 0 >> def
/CMapName /F6+0 def
/CMapType 2 def
1 begincodespacerange <01> <01> endcodespacerange
1 beginbfchar
<01> <2033>
endbfchar
endcmap CMapName currentdict /CMap defineresource pop end end

# the unicode being displayed
U+2033 = "double prime"

# text drawing commands in pdf:

[(Speak)-332.7(English)-332.7(less)-332.7(than)]TJ
/F6 1 Tf
11.169 0 TD
<01>Tj
/F3 1 Tf
0.411 0 TD
[(very)-332.7(well)]TJ
/F6 1 Tf
3.9437 0 TD
<01>Tj

*** NOTE output

daedalus/pdf-font-exploration $ pdf-hs-driver --text tests/td09-read.pdf
INFO - tests/td09-read.pdf at 0 - Catalog (page tree) result:
INFO - tests/td09-read.pdf at 0 - "T a ble D P-1. Profile of General Demographic
Characteristics: 2000Geographic ar ea: T enino city , W ashington[For
information o n confidentiality pr otection, nonsampling e rr or , and
definitions, s ee text]Subject Number PercentT otal
population..........................1,447 100.0SEX AND AGEMale

*** Analysis

if you look at the rendering we have this
  "English less than" 
which shows up like this in the "pdf-hs-driver --text" output
  "1 0 3 7 . 6Speak English less thanvery well........ 4 7 3 . 4"

The "/F6" font clearly has the "double prime" glyph, which we're not seeing.
(Because we haven't implemented the CMAP stuff!)

# implementing Universe C

* strengthen checks on content streams ops

# formatting text extaction #

* investigate unexpected spacing in Arabic lessons
* interpret macro-ops
* integrate new fonts
* optimize (?) by building unicodings once per font

# long-term issues #

* can sum types be declared as pure values?
* allowing multiple imports of the same module with caps/non-caps

