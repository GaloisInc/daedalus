module PNG
 
--- Imports:
 
--- Type defs:
type PNG.Chunk = { type: [uint 8]
                 ; contents: [uint 8]
                 ; crcField: uint 32
                 ; crcCheck: uint 32
                 }
 
--- Rules:
 
PNG.$letter : ByteClass =
  ('A' .. 'Z') | ('a' .. 'z')
 
PNG.Header : Grammar {} =
  @MatchBytes [137,
               80,
               78,
               71,
               13,
               10,
               26,
               10]
 
PNG.BE : Grammar (uint 32) =
  do (_30 : uint 24) <- do (_28 : uint 16) <- do (_26 : uint 8) <- GetByte
                                                 (_27 : uint 8) <- GetByte
                                                 pure (_26 # _27)
                           (_29 : uint 8) <- GetByte
                           pure (_28 # _29)
     (_31 : uint 8) <- GetByte
     pure (_30 # _31)
 
PNG.Length : Grammar int =
  do (_32 : uint 32) <- PNG.BE
     _32 AS int
 
PNG.CRC : Grammar (uint 32) =
  PNG.BE
 
PNG.Type : Grammar [uint 8] =
  Many[4] Match PNG.$letter
 
rec value
  PNG.step (c : uint 32) (k : uint 8) : uint 32 =
    if (k < 8) then PNG.step ((if (c == ((c >> 1) << 1)) then 3988292384 else 0) .^. (c >> 1)) (k + 1) else c
 
PNG.crcTable (n : uint 8) : uint 32 =
  PNG.step (n as uint 32) 0
 
PNG.updatecrc (crc : uint 32) (bytes : [uint 8]) : uint 32 =
  for ((out : uint 32) = crc; (b : uint 8) in bytes)
    ((PNG.crcTable ((crc .^. (b as uint 32)) .&. 255 as uint 8)) .^. (crc >> 8))
 
PNG.crc (input : [uint 8]) : uint 32 =
  (PNG.updatecrc 4294967295 input) .^. 4294967295
 
PNG.Chunk : Grammar PNG.Chunk =
  do (len : int) <- PNG.Length
     (type : [uint 8]) <- PNG.Type
     (contents : [uint 8]) <- Many[len] GetByte
     (crcField : uint 32) <- PNG.CRC
     (crcCheck : uint 32) <- pure (PNG.crc (concat [type,
                                                    contents]))
     pure {type = type,
           contents = contents,
           crcField = crcField,
           crcCheck = crcCheck}
 
PNG._Header : Grammar {} =
  @MatchBytes [137,
               80,
               78,
               71,
               13,
               10,
               26,
               10]
 
PNG.Main : Grammar [PNG.Chunk] =
  do PNG._Header
     ($$ : [PNG.Chunk]) <- Many[] PNG.Chunk
     END
     pure $$
 
PNG._BE : Grammar {} =
  do do do @GetByte
           @GetByte
        @GetByte
     @GetByte
 
PNG._Length : Grammar {} =
  do (_32 : uint 32) <- PNG.BE
     @(_32 AS int)
 
PNG._CRC : Grammar {} =
  PNG._BE
 
PNG._Type : Grammar {} =
  @Many[4] @Match PNG.$letter
 
PNG._Chunk : Grammar {} =
  do (len : int) <- PNG.Length
     PNG._Type
     @Many[len] @GetByte
     PNG._CRC
 
PNG._Main : Grammar {} =
  do PNG._Header
     @Many[] PNG._Chunk
     END
