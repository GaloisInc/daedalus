module DaedalusMain where
 
 
type Main =
  struct
    x : [Word 8]
    y : [Word 8]
 
-------------
 
-- ./Det002.ddl:5:1--7:17
proc Simple1() : [Word 8] =
  -- ./Det002.ddl:6:6--7:17
  -- DETERMINIZE 1 Fully
  do _x0 <- match1 { ... }
     case _x0 of
       97 ->
         -- ./Det002.ddl:6:8--6:40
         -- ./Det002.ddl:6:12--6:21
         do match_ "b"
            let x = "ab"
            -- ./Det002.ddl:6:24--6:40
            -- ./Det002.ddl:6:24--6:40
            pure (concat [x, x])
       98 ->
         -- ./Det002.ddl:7:6--7:17
         do match_ "cde"
            pure "bcde"
       _ ->
         fail_sys @[Word 8]
 
-- ./Det002.ddl:9:1--12:63
proc Simple2() : [Word 8] =
  -- ./Det002.ddl:10:6--12:63
  -- DETERMINIZE 1 Fully
  do _x0 <- match1 { ... }
     case _x0 of
       97 ->
         -- ./Det002.ddl:10:6--11:15
         -- ./Det002.ddl:10:6--10:16
         do match_ "bc"
            pure "abc"
       98 ->
         -- ./Det002.ddl:10:6--11:15
         -- ./Det002.ddl:11:6--11:15
         do match_ "c"
            pure "bc"
       99 ->
         -- ./Det002.ddl:12:9--12:60
         -- ./Det002.ddl:12:13--12:22
         do let x = 99 @(Word 8)
            -- ./Det002.ddl:12:27--12:60
            y <- -- ./Det002.ddl:12:31--12:39
                 match "b"
            -- ./Det002.ddl:12:42--12:60
            -- ./Det002.ddl:12:42--12:60
            pure (concat [[x], y])
       _ ->
         fail_sys @[Word 8]
 
-- ./Det002.ddl:3:1--3:40
proc Main() : Main =
  -- ./Det002.ddl:3:14--3:40
  do x <- -- ./Det002.ddl:3:18--3:24
          Simple1()
     -- ./Det002.ddl:3:28--3:40
     y <- -- ./Det002.ddl:3:32--3:38
          Simple2()
     -- ./Det002.ddl:3:12--3:40
     pure Main {x = x, y = y}
