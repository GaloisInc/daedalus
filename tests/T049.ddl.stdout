module T049
 
--- Imports:
 
--- Type defs:
type T049.V = Choose { num: uint 8
                     ; null: {}
                     }
 
type T049.TDDef = Choose { stream: T049.V
                         ; value: T049.V
                         }
 
type T049.TD = { obj: T049.TDDef
               }
 
--- Rules:
 
T049.V : Grammar T049.V =
  Choose biased
    { {- num -} do (_9 : uint 8) <- Match UInt8
                   pure {num: _9}
    | {- null -} do (_10 : {}) <- pure {}
                    pure {null: _10}
    }
 
T049.ResolveDeclRef (x : int) : Grammar T049.TD
 
T049.ResolveRef (x : int) : Grammar T049.V =
  do (p : T049.TD) <- T049.ResolveDeclRef x
     ($$ : T049.V) <- case p.obj is
                        { {| value = _12 |} -> pure _12
                        }
     pure $$
 
T049.TDDef : Grammar T049.TDDef =
  Choose biased
    { {- stream -} do (_13 : T049.V) <- T049.ResolveRef 0
                      pure {stream: _13}
    | {- value -} do (_14 : T049.V) <- T049.V
                     pure {value: _14}
    }
 
T049.TD : Grammar T049.TD =
  do (obj : T049.TDDef) <- T049.TDDef
     pure {obj = obj}
 
T049.V_15 : Grammar {} =
  Choose biased
    { {- num -} @Match UInt8
    | {- null -} pure {}
    }
 
T049.TD_16 : Grammar {} =
  do T049.TDDef
     pure {}
 
T049.ResolveDeclRef_17 (x : int) : Grammar {} =
  do T049.ResolveDeclRef x
     pure {}
 
T049.ResolveRef_19 (x : int) : Grammar {} =
  do (p : T049.TD) <- T049.ResolveDeclRef x
     case p.obj is
       { {| value = _12 |} -> pure {}
       }
 
T049.TDDef_22 : Grammar {} =
  Choose biased
    { {- stream -} T049.ResolveRef_19 0
    | {- value -} T049.V_15
    }
