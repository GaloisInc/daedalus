module new-midi
 
--- Imports:
 
--- Type defs:
{- bitdata
________________
-}
type new-midi.MidiFormat_single_track = { }
 
{- bitdata
________________
-}
type new-midi.MidiFormat_multi_track = { }
 
{- bitdata
________________
-}
type new-midi.MidiFormat_multi_song = { }
 
{- bitdata
000000000000000_
0000000000000010
-}
type new-midi.MidiFormat = Choose { single_track: new-midi.MidiFormat_single_track
                                  ; multi_track: new-midi.MidiFormat_multi_track
                                  ; multi_song: new-midi.MidiFormat_multi_song
                                  }
 
{- bitdata
________________
-}
type new-midi.MidiTimeUnit_quarter_len = { value: uint 15
                                         }
 
{- bitdata
________________
-}
type new-midi.MidiTimeUnit_smtpe = { value: sint 15
                                   }
 
{- bitdata
________________
-}
type new-midi.MidiTimeUnit = Choose { quarter_len: new-midi.MidiTimeUnit_quarter_len
                                    ; smtpe: new-midi.MidiTimeUnit_smtpe
                                    }
 
type new-midi.Header = { format: new-midi.MidiFormat
                       ; track_num: uint 64
                       ; time_unit: new-midi.MidiTimeUnit
                       }
 
type new-midi.Delta ?a0 = { after: uint 64
                          ; event: ?a0
                          }
 
type new-midi.NoteEvent = { key: uint 7
                          ; velocity: uint 7
                          }
 
type new-midi.ControllerChange = { controller: uint 7
                                 ; value: uint 7
                                 }
 
type new-midi.VoiceMessage = Choose { pitch_bend: uint 14
                                    ; channel_pressure: uint 7
                                    ; program_change: uint 7
                                    ; controller_change: new-midi.ControllerChange
                                    ; aftertouch: new-midi.NoteEvent
                                    ; note_on: new-midi.NoteEvent
                                    ; note_off: new-midi.NoteEvent
                                    }
 
type new-midi.VoiceMessages = { channel: uint 4
                              ; message: new-midi.VoiceMessage
                              ; extra: [new-midi.Delta new-midi.VoiceMessage]
                              }
 
type new-midi.ModeMessage = Choose { reset_controllers: {}
                                   ; poly_on: {}
                                   ; omni_on: {}
                                   ; omni_off: {}
                                   ; mono_on: uint 8
                                   ; local_control_on: {}
                                   ; local_control_off: {}
                                   ; all_sound_off: {}
                                   ; all_notes_off: {}
                                   }
 
type new-midi.ModeMessages = { channel: uint 4
                             ; message: new-midi.ModeMessage
                             ; extra: [new-midi.Delta new-midi.ModeMessage]
                             }
 
type new-midi.SysEx = Choose { add_f0: [uint 8]
                             ; as_is: [uint 8]
                             }
 
type new-midi.MetaSeqSpecific = { manufacturer: uint 16
                                ; data: [uint 8]
                                }
 
type new-midi.MetaUnknown = { tag: uint 8
                            ; data: [uint 8]
                            }
 
{- bitdata
________
-}
type new-midi.Accidentals_flats = { flats: uint 7
                                  }
 
{- bitdata
________
-}
type new-midi.Accidentals_sharps = { sharps: uint 7
                                   }
 
{- bitdata
________
-}
type new-midi.Accidentals = Choose { flats: new-midi.Accidentals_flats
                                   ; sharps: new-midi.Accidentals_sharps
                                   }
 
{- bitdata
________
-}
type new-midi.Mode_minor = { }
 
{- bitdata
________
-}
type new-midi.Mode_major = { }
 
{- bitdata
0000000_
-}
type new-midi.Mode = Choose { minor: new-midi.Mode_minor
                            ; major: new-midi.Mode_major
                            }
 
type new-midi.KeySig = { key: new-midi.Accidentals
                       ; mode: new-midi.Mode
                       }
 
type new-midi.SMTPEOffset = { hh: uint 8
                            ; mm: uint 8
                            ; ss: uint 8
                            ; fr: uint 8
                            ; ff: uint 8
                            }
 
type new-midi.TimeSig = { nn: uint 8
                        ; dd: uint 8
                        ; cc: uint 8
                        ; bb: uint 8
                        }
 
type new-midi.Meta = Choose { unknown: new-midi.MetaUnknown
                            ; seq_specifiec: new-midi.MetaSeqSpecific
                            ; key_sig: new-midi.KeySig
                            ; time_sig: new-midi.TimeSig
                            ; smtpe_offset: new-midi.SMTPEOffset
                            ; tempo: uint 24
                            ; end_track: {}
                            ; channel: uint 8
                            ; cue: [uint 8]
                            ; marker: [uint 8]
                            ; lyrics: [uint 8]
                            ; instrument: [uint 8]
                            ; name: [uint 8]
                            ; copyright: [uint 8]
                            ; text: [uint 8]
                            ; sequence: uint 16
                            }
 
type new-midi.Event = Choose { meta: new-midi.Meta
                             ; modeMessage: new-midi.ModeMessages
                             ; sysEx: new-midi.SysEx
                             ; voiceMessage: new-midi.VoiceMessages
                             }
 
type new-midi.Main = { header: new-midi.Header
                     ; tracks: [[new-midi.Delta new-midi.Event]]
                     }
 
{- bitdata
____
-}
type new-midi.VoiceMessageTag_note_off = { }
 
{- bitdata
____
-}
type new-midi.VoiceMessageTag_note_on = { }
 
{- bitdata
____
-}
type new-midi.VoiceMessageTag_aftertouch = { }
 
{- bitdata
____
-}
type new-midi.VoiceMessageTag_controller_change = { }
 
{- bitdata
____
-}
type new-midi.VoiceMessageTag_program_change = { }
 
{- bitdata
____
-}
type new-midi.VoiceMessageTag_channel_pressure = { }
 
{- bitdata
____
-}
type new-midi.VoiceMessageTag_pitch_bend = { }
 
{- bitdata
10__
110_
1110
-}
type new-midi.VoiceMessageTag = Choose { note_off: new-midi.VoiceMessageTag_note_off
                                       ; note_on: new-midi.VoiceMessageTag_note_on
                                       ; aftertouch: new-midi.VoiceMessageTag_aftertouch
                                       ; controller_change: new-midi.VoiceMessageTag_controller_change
                                       ; program_change: new-midi.VoiceMessageTag_program_change
                                       ; channel_pressure: new-midi.VoiceMessageTag_channel_pressure
                                       ; pitch_bend: new-midi.VoiceMessageTag_pitch_bend
                                       }
 
{- bitdata
10______
110_____
1110____
-}
type new-midi.VoiceMessagesHeader_VoiceMessagesHeader = { tag: new-midi.VoiceMessageTag
                                                        ; channel: uint 4
                                                        }
 
{- bitdata
10______
110_____
1110____
-}
type new-midi.VoiceMessagesHeader = Choose { VoiceMessagesHeader: new-midi.VoiceMessagesHeader_VoiceMessagesHeader
                                           }
 
{- bitdata
________
-}
type new-midi.ModeMessagesHeader_ModeMessagesHeader = { channel: uint 4
                                                      }
 
{- bitdata
1011____
-}
type new-midi.ModeMessagesHeader = Choose { ModeMessagesHeader: new-midi.ModeMessagesHeader_ModeMessagesHeader
                                          }
 
{- bitdata
________
-}
type new-midi.VarQChunk_More = { value: uint 7
                               }
 
{- bitdata
________
-}
type new-midi.VarQChunk_Last = { value: uint 7
                               }
 
{- bitdata
________
-}
type new-midi.VarQChunk = Choose { More: new-midi.VarQChunk_More
                                 ; Last: new-midi.VarQChunk_Last
                                 }
 
--- Rules:
 
new-midi.BE16 : Grammar (uint 16) =
  do (_112 : uint 8) <- GetByte
     (_113 : uint 8) <- GetByte
     pure (_112 # _113)
 
new-midi.BE32 : Grammar (uint 32) =
  do (_114 : uint 16) <- new-midi.BE16
     (_115 : uint 16) <- new-midi.BE16
     pure (_114 # _115)
 
new-midi.Block ?a0 (n : uint 64) (P : Grammar ?a0) : Grammar ?a0 =
  do (cur : Stream) <- CurrentStream
     do (_116 : Stream) <- StreamLen n cur
        SetStream _116
     ($$ : ?a0) <- P
     do (_117 : Stream) <- StreamOff n cur
        SetStream _117
     pure $$
 
new-midi.Only ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do ($$ : ?a0) <- P
     END
     pure $$
 
new-midi.ExactBlock ?a0 (n : uint 64) (P : Grammar ?a0) : Grammar ?a0 =
  new-midi.Block ?a0 n (new-midi.Only ?a0 P)
 
new-midi._Block ?a0 (n : uint 64) (_P : Grammar {}) : Grammar {} =
  do (cur : Stream) <- CurrentStream
     do (_116 : Stream) <- StreamLen n cur
        SetStream _116
     _P
     (_117 : Stream) <- StreamOff n cur
     SetStream _117
 
new-midi._Only ?a0 (_P : Grammar {}) : Grammar {} =
  do _P
     END
 
new-midi._ExactBlock ?a0 (n : uint 64) (_P : Grammar {}) : Grammar {} =
  new-midi._Block ?a0 n (new-midi._Only ?a0 _P)
 
new-midi.Chunk ?a0 (name : [uint 8]) (Body : Grammar ?a0) : Grammar ?a0 =
  do new-midi._ExactBlock [uint 8] 4 (@MatchBytes name)
     ($$ : ?a0) <- do (_120 : uint 64) <- do (_119 : uint 32) <- new-midi.BE32
                                             pure (_119 as uint 64)
                      new-midi.ExactBlock ?a0 _120 Body
     pure $$
 
new-midi.Header : Grammar new-midi.Header =
  new-midi.Chunk new-midi.Header "MThd" do (format : new-midi.MidiFormat) <- do (_121 : uint 16) <- new-midi.BE16
                                                                                _121 AS new-midi.MidiFormat
                                           (track_num : uint 64) <- do (_122 : uint 16) <- new-midi.BE16
                                                                       pure (_122 as uint 64)
                                           (time_unit : new-midi.MidiTimeUnit) <- do (_123 : uint 16) <- new-midi.BE16
                                                                                     pure (_123 as new-midi.MidiTimeUnit)
                                           pure {format = format,
                                                 track_num = track_num,
                                                 time_unit = time_unit}
 
rec value
  new-midi.VarQBuilder (result : int) : Grammar int =
    do (_125 : new-midi.VarQChunk) <- do (_124 : uint 8) <- GetByte
                                         pure (_124 as new-midi.VarQChunk)
       case _125 is
         { {| More = x |} -> new-midi.VarQBuilder (result <# (x.value))
         ; {| Last = x |} -> pure (result <# (x.value))
         }
 
new-midi.VarQ : Grammar (uint 64) =
  do (_126 : int) <- new-midi.VarQBuilder 0
     _126 AS uint 64
 
new-midi.Delta ?a0 (E : Grammar ?a0) : Grammar (new-midi.Delta ?a0) =
  do (after : uint 64) <- new-midi.VarQ
     (event : ?a0) <- E
     pure {after = after,
           event = event}
 
new-midi.UInt7 : Grammar (uint 7) =
  do (_127 : uint 8) <- GetByte
     _127 AS uint 7
 
new-midi.NoteEvent : Grammar new-midi.NoteEvent =
  do (key : uint 7) <- new-midi.UInt7
     (velocity : uint 7) <- new-midi.UInt7
     pure {key = key,
           velocity = velocity}
 
new-midi._Guard (p : bool) : Grammar {} =
  Guard p
 
new-midi.ControllerChange : Grammar new-midi.ControllerChange =
  do (controller : uint 7) <- new-midi.UInt7
     new-midi._Guard (controller <= 119)
     (value : uint 7) <- new-midi.UInt7
     pure {controller = controller,
           value = value}
 
new-midi.VoiceMessage (tag : new-midi.VoiceMessageTag) : Grammar new-midi.VoiceMessage =
  case tag is
    { {| note_off = _ |} -> do (_128 : new-midi.NoteEvent) <- new-midi.NoteEvent
                               pure {note_off: _128}
    ; {| note_on = _ |} -> do (_129 : new-midi.NoteEvent) <- new-midi.NoteEvent
                              pure {note_on: _129}
    ; {| aftertouch = _ |} -> do (_130 : new-midi.NoteEvent) <- new-midi.NoteEvent
                                 pure {aftertouch: _130}
    ; {| controller_change = _ |} -> do (_131 : new-midi.ControllerChange) <- new-midi.ControllerChange
                                        pure {controller_change: _131}
    ; {| program_change = _ |} -> do (_132 : uint 7) <- new-midi.UInt7
                                     pure {program_change: _132}
    ; {| channel_pressure = _ |} -> do (_133 : uint 7) <- new-midi.UInt7
                                       pure {channel_pressure: _133}
    ; {| pitch_bend = _ |} -> do (_135 : uint 14) <- do (lsb : uint 7) <- new-midi.UInt7
                                                        (msb : uint 7) <- new-midi.UInt7
                                                        ($$ : uint 14) <- pure (msb # lsb)
                                                        pure $$
                                 pure {pitch_bend: _135}
    }
 
new-midi.VoiceMessages : Grammar new-midi.VoiceMessages =
  do (_137 : new-midi.VoiceMessagesHeader) <- do (_136 : uint 8) <- GetByte
                                                 _136 AS new-midi.VoiceMessagesHeader
     case _137 is
       { {| VoiceMessagesHeader = header |} -> do (channel : uint 4) <- pure (header.channel)
                                                  (message : new-midi.VoiceMessage) <- new-midi.VoiceMessage (header.tag)
                                                  (extra : [new-midi.Delta new-midi.VoiceMessage]) <- Many[] new-midi.Delta new-midi.VoiceMessage (new-midi.VoiceMessage (header.tag))
                                                  pure {channel = channel,
                                                        message = message,
                                                        extra = extra}
       }
 
new-midi.ModeMessage : Grammar new-midi.ModeMessage =
  Choose biased
    { {- all_sound_off -} do (_138 : {}) <- @MatchBytes [120,
                                                         0]
                             pure {all_sound_off: _138}
    | {- reset_controllers -} do (_139 : {}) <- @MatchBytes [121,
                                                             0]
                                 pure {reset_controllers: _139}
    | {- local_control_off -} do (_140 : {}) <- @MatchBytes [122,
                                                             0]
                                 pure {local_control_off: _140}
    | {- local_control_on -} do (_141 : {}) <- @MatchBytes [122,
                                                            127]
                                pure {local_control_on: _141}
    | {- all_notes_off -} do (_142 : {}) <- @MatchBytes [123,
                                                         0]
                             pure {all_notes_off: _142}
    | {- omni_off -} do (_143 : {}) <- @MatchBytes [124,
                                                    0]
                        pure {omni_off: _143}
    | {- omni_on -} do (_144 : {}) <- @MatchBytes [125,
                                                   0]
                       pure {omni_on: _144}
    | {- mono_on -} do (_145 : uint 8) <- do @Match {'~'}
                                             ($$ : uint 8) <- GetByte
                                             new-midi._Guard ($$ <= 16)
                                             pure $$
                       pure {mono_on: _145}
    | {- poly_on -} do (_146 : {}) <- @MatchBytes [127,
                                                   0]
                       pure {poly_on: _146}
    }
 
new-midi.ModeMessages : Grammar new-midi.ModeMessages =
  do (_148 : new-midi.ModeMessagesHeader) <- do (_147 : uint 8) <- GetByte
                                                _147 AS new-midi.ModeMessagesHeader
     case _148 is
       { {| ModeMessagesHeader = header |} -> do (channel : uint 4) <- pure (header.channel)
                                                 (message : new-midi.ModeMessage) <- new-midi.ModeMessage
                                                 (extra : [new-midi.Delta new-midi.ModeMessage]) <- Many[] new-midi.Delta new-midi.ModeMessage new-midi.ModeMessage
                                                 pure {channel = channel,
                                                       message = message,
                                                       extra = extra}
       }
 
new-midi.SysEx : Grammar new-midi.SysEx =
  Choose biased
    { {- add_f0 -} do (_151 : [uint 8]) <- do @Match {'\240'}
                                              ($$ : [uint 8]) <- do (_150 : uint 64) <- new-midi.VarQ
                                                                    new-midi.Block [uint 8] _150 (Many[] GetByte)
                                              pure $$
                      pure {add_f0: _151}
    | {- as_is -} do (_154 : [uint 8]) <- do @Match {'\247'}
                                             ($$ : [uint 8]) <- do (_153 : uint 64) <- new-midi.VarQ
                                                                   new-midi.Block [uint 8] _153 (Many[] GetByte)
                                             pure $$
                     pure {as_is: _154}
    }
 
new-midi.MetaSeqSpecific : Grammar new-midi.MetaSeqSpecific =
  do (manufacturer : uint 16) <- Choose biased
                                   { do @Match {'\NUL'}
                                        ($$ : uint 16) <- new-midi.BE16
                                        pure $$
                                   | do (_156 : uint 8) <- GetByte
                                        pure (_156 as uint 16)
                                   }
     (data : [uint 8]) <- Many[] GetByte
     pure {manufacturer = manufacturer,
           data = data}
 
new-midi.MetaUnknown (tag : uint 8) : Grammar new-midi.MetaUnknown =
  do (tag : uint 8) <- pure tag
     (data : [uint 8]) <- Many[] GetByte
     pure {tag = tag,
           data = data}
 
new-midi.KeySig : Grammar new-midi.KeySig =
  do (key : new-midi.Accidentals) <- do (_157 : uint 8) <- GetByte
                                        pure (_157 as new-midi.Accidentals)
     (mode : new-midi.Mode) <- do (_158 : uint 8) <- GetByte
                                  _158 AS new-midi.Mode
     pure {key = key,
           mode = mode}
 
new-midi.SMTPEOffset : Grammar new-midi.SMTPEOffset =
  do (hh : uint 8) <- GetByte
     (mm : uint 8) <- GetByte
     (ss : uint 8) <- GetByte
     (fr : uint 8) <- GetByte
     (ff : uint 8) <- GetByte
     pure {hh = hh,
           mm = mm,
           ss = ss,
           fr = fr,
           ff = ff}
 
new-midi.TimeSig : Grammar new-midi.TimeSig =
  do (nn : uint 8) <- GetByte
     (dd : uint 8) <- GetByte
     (cc : uint 8) <- GetByte
     (bb : uint 8) <- GetByte
     pure {nn = nn,
           dd = dd,
           cc = cc,
           bb = bb}
 
new-midi.BE24 : Grammar (uint 24) =
  do (_159 : uint 16) <- new-midi.BE16
     (_160 : uint 8) <- GetByte
     pure (_159 # _160)
 
new-midi.Meta : Grammar new-midi.Meta =
  do @Match {'\255'}
     (tag : uint 8) <- GetByte
     new-midi._Guard (tag <= 127)
     ($$ : new-midi.Meta) <- do (_162 : uint 64) <- new-midi.VarQ
                                new-midi.ExactBlock new-midi.Meta _162 (case tag is
                                                                          { 0 -> do (_163 : uint 16) <- new-midi.BE16
                                                                                    pure {sequence: _163}
                                                                          ; 1 -> do (_164 : [uint 8]) <- Many[] GetByte
                                                                                    pure {text: _164}
                                                                          ; 2 -> do (_165 : [uint 8]) <- Many[] GetByte
                                                                                    pure {copyright: _165}
                                                                          ; 3 -> do (_166 : [uint 8]) <- Many[] GetByte
                                                                                    pure {name: _166}
                                                                          ; 4 -> do (_167 : [uint 8]) <- Many[] GetByte
                                                                                    pure {instrument: _167}
                                                                          ; 5 -> do (_168 : [uint 8]) <- Many[] GetByte
                                                                                    pure {lyrics: _168}
                                                                          ; 6 -> do (_169 : [uint 8]) <- Many[] GetByte
                                                                                    pure {marker: _169}
                                                                          ; 7 -> do (_170 : [uint 8]) <- Many[] GetByte
                                                                                    pure {cue: _170}
                                                                          ; 32 -> do (_171 : uint 8) <- GetByte
                                                                                     pure {channel: _171}
                                                                          ; 47 -> do (_172 : {}) <- END
                                                                                     pure {end_track: _172}
                                                                          ; 81 -> do (_173 : uint 24) <- new-midi.BE24
                                                                                     pure {tempo: _173}
                                                                          ; 84 -> do (_174 : new-midi.SMTPEOffset) <- new-midi.SMTPEOffset
                                                                                     pure {smtpe_offset: _174}
                                                                          ; 88 -> do (_175 : new-midi.TimeSig) <- new-midi.TimeSig
                                                                                     pure {time_sig: _175}
                                                                          ; 89 -> do (_176 : new-midi.KeySig) <- new-midi.KeySig
                                                                                     pure {key_sig: _176}
                                                                          ; 127 -> do (_177 : new-midi.MetaSeqSpecific) <- new-midi.MetaSeqSpecific
                                                                                      pure {seq_specifiec: _177}
                                                                          ; _ -> do (_178 : new-midi.MetaUnknown) <- new-midi.MetaUnknown tag
                                                                                    pure {unknown: _178}
                                                                          })
     pure $$
 
new-midi.Event : Grammar new-midi.Event =
  Choose biased
    { {- voiceMessage -} do (_179 : new-midi.VoiceMessages) <- new-midi.VoiceMessages
                            pure {voiceMessage: _179}
    | {- modeMessage -} do (_180 : new-midi.ModeMessages) <- new-midi.ModeMessages
                           pure {modeMessage: _180}
    | {- sysEx -} do (_181 : new-midi.SysEx) <- new-midi.SysEx
                     pure {sysEx: _181}
    | {- meta -} do (_182 : new-midi.Meta) <- new-midi.Meta
                    pure {meta: _182}
    }
 
new-midi.Track : Grammar [new-midi.Delta new-midi.Event] =
  new-midi.Chunk [new-midi.Delta new-midi.Event] "MTrk" (Many[] new-midi.Delta new-midi.Event new-midi.Event)
 
new-midi.Main : Grammar new-midi.Main =
  do (header : new-midi.Header) <- new-midi.Header
     (tracks : [[new-midi.Delta new-midi.Event]]) <- Many[header.track_num] new-midi.Track
     pure {header = header,
           tracks = tracks}
 
new-midi.Guard (p : bool) : Grammar {} =
  Guard p
 
new-midi._BE16 : Grammar {} =
  do @GetByte
     @GetByte
 
new-midi._BE32 : Grammar {} =
  do new-midi._BE16
     new-midi._BE16
 
new-midi._Chunk ?a0 (name : [uint 8]) (_Body : Grammar {}) : Grammar {} =
  do new-midi._ExactBlock [uint 8] 4 (@MatchBytes name)
     (_120 : uint 64) <- do (_119 : uint 32) <- new-midi.BE32
                            pure (_119 as uint 64)
     new-midi._ExactBlock ?a0 _120 _Body
 
new-midi._Header : Grammar {} =
  new-midi._Chunk new-midi.Header "MThd" do do (_121 : uint 16) <- new-midi.BE16
                                               @(_121 AS new-midi.MidiFormat)
                                            new-midi._BE16
                                            new-midi._BE16
 
new-midi._VarQBuilder (result : int) : Grammar {} =
  do (_125 : new-midi.VarQChunk) <- do (_124 : uint 8) <- GetByte
                                       pure (_124 as new-midi.VarQChunk)
     case _125 is
       { {| More = x |} -> do new-midi.VarQBuilder (result <# (x.value))
                              pure {}
       ; {| Last = x |} -> pure {}
       }
 
new-midi._VarQ : Grammar {} =
  do (_126 : int) <- new-midi.VarQBuilder 0
     @(_126 AS uint 64)
 
new-midi._Delta ?a0 (_E : Grammar {}) : Grammar {} =
  do new-midi._VarQ
     _E
 
new-midi._UInt7 : Grammar {} =
  do (_127 : uint 8) <- GetByte
     @(_127 AS uint 7)
 
new-midi._NoteEvent : Grammar {} =
  do new-midi._UInt7
     new-midi._UInt7
 
new-midi._ControllerChange : Grammar {} =
  do (controller : uint 7) <- new-midi.UInt7
     new-midi._Guard (controller <= 119)
     new-midi._UInt7
 
new-midi._VoiceMessage (tag : new-midi.VoiceMessageTag) : Grammar {} =
  case tag is
    { {| note_off = _ |} -> new-midi._NoteEvent
    ; {| note_on = _ |} -> new-midi._NoteEvent
    ; {| aftertouch = _ |} -> new-midi._NoteEvent
    ; {| controller_change = _ |} -> new-midi._ControllerChange
    ; {| program_change = _ |} -> new-midi._UInt7
    ; {| channel_pressure = _ |} -> new-midi._UInt7
    ; {| pitch_bend = _ |} -> do new-midi._UInt7
                                 new-midi._UInt7
    }
 
new-midi._VoiceMessages : Grammar {} =
  do (_137 : new-midi.VoiceMessagesHeader) <- do (_136 : uint 8) <- GetByte
                                                 _136 AS new-midi.VoiceMessagesHeader
     case _137 is
       { {| VoiceMessagesHeader = header |} -> do new-midi._VoiceMessage (header.tag)
                                                  @Many[] new-midi._Delta new-midi.VoiceMessage (new-midi._VoiceMessage (header.tag))
       }
 
new-midi._ModeMessage : Grammar {} =
  Choose biased
    { {- all_sound_off -} @MatchBytes [120,
                                       0]
    | {- reset_controllers -} @MatchBytes [121,
                                           0]
    | {- local_control_off -} @MatchBytes [122,
                                           0]
    | {- local_control_on -} @MatchBytes [122,
                                          127]
    | {- all_notes_off -} @MatchBytes [123,
                                       0]
    | {- omni_off -} @MatchBytes [124,
                                  0]
    | {- omni_on -} @MatchBytes [125,
                                 0]
    | {- mono_on -} do @Match {'~'}
                       ($$ : uint 8) <- GetByte
                       new-midi._Guard ($$ <= 16)
    | {- poly_on -} @MatchBytes [127,
                                 0]
    }
 
new-midi._ModeMessages : Grammar {} =
  do (_148 : new-midi.ModeMessagesHeader) <- do (_147 : uint 8) <- GetByte
                                                _147 AS new-midi.ModeMessagesHeader
     case _148 is
       { {| ModeMessagesHeader = header |} -> do new-midi._ModeMessage
                                                 @Many[] new-midi._Delta new-midi.ModeMessage new-midi._ModeMessage
       }
 
new-midi._SysEx : Grammar {} =
  Choose biased
    { {- add_f0 -} do @Match {'\240'}
                      (_150 : uint 64) <- new-midi.VarQ
                      new-midi._Block [uint 8] _150 (@Many[] @GetByte)
    | {- as_is -} do @Match {'\247'}
                     (_153 : uint 64) <- new-midi.VarQ
                     new-midi._Block [uint 8] _153 (@Many[] @GetByte)
    }
 
new-midi._MetaSeqSpecific : Grammar {} =
  do Choose biased
       { do @Match {'\NUL'}
            new-midi._BE16
       | @GetByte
       }
     @Many[] @GetByte
 
new-midi._MetaUnknown : Grammar {} =
  @Many[] @GetByte
 
new-midi._KeySig : Grammar {} =
  do @GetByte
     (_158 : uint 8) <- GetByte
     @(_158 AS new-midi.Mode)
 
new-midi._SMTPEOffset : Grammar {} =
  do @GetByte
     @GetByte
     @GetByte
     @GetByte
     @GetByte
 
new-midi._TimeSig : Grammar {} =
  do @GetByte
     @GetByte
     @GetByte
     @GetByte
 
new-midi._BE24 : Grammar {} =
  do new-midi._BE16
     @GetByte
 
new-midi._Meta : Grammar {} =
  do @Match {'\255'}
     (tag : uint 8) <- GetByte
     new-midi._Guard (tag <= 127)
     (_162 : uint 64) <- new-midi.VarQ
     new-midi._ExactBlock new-midi.Meta _162 (case tag is
                                                { 0 -> new-midi._BE16
                                                ; 1 -> @Many[] @GetByte
                                                ; 2 -> @Many[] @GetByte
                                                ; 3 -> @Many[] @GetByte
                                                ; 4 -> @Many[] @GetByte
                                                ; 5 -> @Many[] @GetByte
                                                ; 6 -> @Many[] @GetByte
                                                ; 7 -> @Many[] @GetByte
                                                ; 32 -> @GetByte
                                                ; 47 -> END
                                                ; 81 -> new-midi._BE24
                                                ; 84 -> new-midi._SMTPEOffset
                                                ; 88 -> new-midi._TimeSig
                                                ; 89 -> new-midi._KeySig
                                                ; 127 -> new-midi._MetaSeqSpecific
                                                ; _ -> new-midi._MetaUnknown
                                                })
 
new-midi._Event : Grammar {} =
  Choose biased
    { {- voiceMessage -} new-midi._VoiceMessages
    | {- modeMessage -} new-midi._ModeMessages
    | {- sysEx -} new-midi._SysEx
    | {- meta -} new-midi._Meta
    }
 
new-midi._Track : Grammar {} =
  new-midi._Chunk [new-midi.Delta new-midi.Event] "MTrk" (@Many[] new-midi._Delta new-midi.Event new-midi._Event)
 
new-midi._Main : Grammar {} =
  do (header : new-midi.Header) <- new-midi.Header
     @Many[header.track_num] new-midi._Track
