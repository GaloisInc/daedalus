module midi
 
--- Imports:
 
--- Type defs:
type midi.Header0 = Choose { multi_song: {}
                           ; multi_track: {}
                           ; single_track: {}
                           }
 
type midi.Header1 = Choose { quarter_len: uint 15
                           ; smtpe: sint 15
                           }
 
type midi.Meta0 = { hh: uint 8
                  ; mm: uint 8
                  ; ss: uint 8
                  ; fr: uint 8
                  ; ff: uint 8
                  }
 
type midi.Meta1 = { nn: uint 8
                  ; dd: uint 8
                  ; cc: uint 8
                  ; bb: uint 8
                  }
 
type midi.Meta2 = Choose { major: uint 8
                         ; minor: uint 8
                         }
 
type midi.Meta3 = { key: uint 8
                  ; mode: midi.Meta2
                  }
 
type midi.Meta4 = { manufacturer: uint 16
                  ; data: Stream
                  }
 
type midi.Meta5 = { type: uint 8
                  ; data: Stream
                  }
 
type midi.VoiceMessage0 = { key: uint 7
                          ; velocity: uint 7
                          }
 
type midi.VoiceMessage1 = { key: uint 7
                          ; velocity: uint 7
                          }
 
type midi.VoiceMessage2 = { key: uint 7
                          ; pressure: uint 7
                          }
 
type midi.VoiceMessage3 = { controller: uint 7
                          ; value: uint 7
                          }
 
type midi.Delta ?a2 = { after: int
                      ; event: ?a2
                      }
 
type midi.Meta = Choose { channel: uint 8
                        ; copyright: Stream
                        ; cue: Stream
                        ; end_track: {}
                        ; instrument: Stream
                        ; key_sig: midi.Meta3
                        ; lyrics: Stream
                        ; marker: Stream
                        ; name: Stream
                        ; seq_specifiec: midi.Meta4
                        ; sequence: uint 16
                        ; smtpe_offset: midi.Meta0
                        ; tempo: uint 24
                        ; text: Stream
                        ; time_sig: midi.Meta1
                        ; unknown: midi.Meta5
                        }
 
type midi.ModeMessage = Choose { all_notes_off: {}
                               ; all_sound_off: {}
                               ; local_control_off: {}
                               ; local_control_on: {}
                               ; mono_on: uint 8
                               ; omni_off: {}
                               ; omni_on: {}
                               ; poly_on: {}
                               ; reset_controllers: {}
                               }
 
type midi.ModeMessages = { channel: uint 4
                         ; messages: midi.ModeMessage
                         ; extra: [midi.Delta midi.ModeMessage]
                         }
 
type midi.SysEx = Choose { add_f0: Stream
                         ; as_is: Stream
                         }
 
type midi.VoiceMessage = Choose { aftertouch: midi.VoiceMessage2
                                ; channel_pressure: uint 7
                                ; controller_change: midi.VoiceMessage3
                                ; note_off: midi.VoiceMessage0
                                ; note_on: midi.VoiceMessage1
                                ; pitch_bend: uint 14
                                ; program_change: uint 7
                                }
 
type midi.VoiceMessages = { channel: uint 4
                          ; message: midi.VoiceMessage
                          ; extra: [midi.Delta midi.VoiceMessage]
                          }
 
type midi.Event = Choose { meta: midi.Meta
                         ; modeMessage: midi.ModeMessages
                         ; sysEx: midi.SysEx
                         ; voiceMessage: midi.VoiceMessages
                         }
 
type midi.Header = { format: midi.Header0
                   ; track_num: uint 16
                   ; time_unit: midi.Header1
                   }
 
type midi.Main = { header: midi.Header
                 ; tracks: [[midi.Delta midi.Event]]
                 }
 
--- Rules:
 
midi.BE16 : Grammar (uint 16) =
  do (_0 : uint 8) <- GetByte
     (_1 : uint 8) <- GetByte
     pure (_0 # _1)
 
midi.BE24 : Grammar (uint 24) =
  do (_2 : uint 16) <- midi.BE16
     (_3 : uint 8) <- GetByte
     pure (_2 # _3)
 
midi.BE32 : Grammar (uint 32) =
  do (_4 : uint 16) <- midi.BE16
     (_5 : uint 16) <- midi.BE16
     pure (_4 # _5)
 
midi.Block ?a4 (n : int) (P : Grammar ?a4) : Grammar ?a4 =
  do (cur : Stream) <- CurrentStream
     do (_6 : Stream) <- StreamLen n cur
        SetStream _6
     ($$ : ?a4) <- P
     do (_7 : Stream) <- StreamOff n cur
        SetStream _7
     pure $$
 
midi.Only ?a1 (P : Grammar ?a1) : Grammar ?a1 =
  do ($$ : ?a1) <- P
     END
     pure $$
 
midi._Block ?a4 (n : int) (_P : Grammar {}) : Grammar {} =
  do (cur : Stream) <- CurrentStream
     do (_6 : Stream) <- StreamLen n cur
        SetStream _6
     _P
     (_7 : Stream) <- StreamOff n cur
     SetStream _7
 
midi._Only ?a1 (_P : Grammar {}) : Grammar {} =
  do _P
     END
 
midi.Chunk ?a4 ?a8 (Ty : Grammar ?a4) (P : Grammar ?a8) : Grammar ?a8 =
  do midi._Block ?a4 4 (midi._Only ?a4 do Ty
                                          pure {})
     ($$ : ?a8) <- do (_9 : int) <- do (_8 : uint 32) <- midi.BE32
                                       _8 AS int
                      midi.Block ?a8 _9 (midi.Only ?a8 P)
     pure $$
 
midi.UInt7 : Grammar (uint 7) =
  do (_10 : uint 8) <- GetByte
     _10 AS uint 7
 
midi._Guard (p : bool) : Grammar {} =
  Guard p
 
midi.getBit ?a1 (Numeric ?a1) (Coerce trunc ?a1 (uint 1)) (n : int) (b : ?a1) : uint 1 =
  b >> n as uint 1
 
midi.VarQ : Grammar int =
  do (lead : [uint 7]) <- Many[] do (b : uint 8) <- GetByte
                                    midi._Guard ((midi.getBit (uint 8) 7 b) == 1)
                                    ($$ : uint 7) <- pure (b as uint 7)
                                    pure $$
     (last : uint 7) <- midi.UInt7
     ($$ : int) <- pure ((for ((v : int) = 0; (l : uint 7) in lead)
                            (v <# l)) <# last)
     pure $$
 
midi.Delta ?a2 (E : Grammar ?a2) : Grammar (midi.Delta ?a2) =
  do (after : int) <- midi.VarQ
     (event : ?a2) <- E
     pure {after = after,
           event = event}
 
midi.Meta : Grammar midi.Meta =
  do @Match {'\255'}
     (type : uint 8) <- GetByte
     midi._Guard (type <= 127)
     (len : int) <- midi.VarQ
     ($$ : midi.Meta) <- midi.Block midi.Meta len Choose biased
                                                    { {- sequence -} do (_11 : uint 16) <- do midi._Guard (type == 0)
                                                                                              ($$ : uint 16) <- midi.Only (uint 16) midi.BE16
                                                                                              pure $$
                                                                        pure {sequence: _11}
                                                    | {- text -} do (_12 : Stream) <- do midi._Guard (type == 1)
                                                                                         ($$ : Stream) <- CurrentStream
                                                                                         pure $$
                                                                    pure {text: _12}
                                                    | {- copyright -} do (_13 : Stream) <- do midi._Guard (type == 2)
                                                                                              ($$ : Stream) <- CurrentStream
                                                                                              pure $$
                                                                         pure {copyright: _13}
                                                    | {- name -} do (_14 : Stream) <- do midi._Guard (type == 3)
                                                                                         ($$ : Stream) <- CurrentStream
                                                                                         pure $$
                                                                    pure {name: _14}
                                                    | {- instrument -} do (_15 : Stream) <- do midi._Guard (type == 4)
                                                                                               ($$ : Stream) <- CurrentStream
                                                                                               pure $$
                                                                          pure {instrument: _15}
                                                    | {- lyrics -} do (_16 : Stream) <- do midi._Guard (type == 5)
                                                                                           ($$ : Stream) <- CurrentStream
                                                                                           pure $$
                                                                      pure {lyrics: _16}
                                                    | {- marker -} do (_17 : Stream) <- do midi._Guard (type == 6)
                                                                                           ($$ : Stream) <- CurrentStream
                                                                                           pure $$
                                                                      pure {marker: _17}
                                                    | {- cue -} do (_18 : Stream) <- do midi._Guard (type == 7)
                                                                                        ($$ : Stream) <- CurrentStream
                                                                                        pure $$
                                                                   pure {cue: _18}
                                                    | {- channel -} do (_19 : uint 8) <- do midi._Guard (type == 32)
                                                                                            ($$ : uint 8) <- midi.Only (uint 8) GetByte
                                                                                            pure $$
                                                                       pure {channel: _19}
                                                    | {- end_track -} do (_20 : {}) <- do midi._Guard (type == 47)
                                                                                          ($$ : {}) <- END
                                                                                          pure $$
                                                                         pure {end_track: _20}
                                                    | {- tempo -} do (_21 : uint 24) <- do midi._Guard (type == 81)
                                                                                           ($$ : uint 24) <- midi.Only (uint 24) midi.BE24
                                                                                           pure $$
                                                                     pure {tempo: _21}
                                                    | {- smtpe_offset -} do (_22 : midi.Meta0) <- do midi._Guard (type == 84)
                                                                                                     (hh : uint 8) <- GetByte
                                                                                                     (mm : uint 8) <- GetByte
                                                                                                     (ss : uint 8) <- GetByte
                                                                                                     (fr : uint 8) <- GetByte
                                                                                                     (ff : uint 8) <- GetByte
                                                                                                     END
                                                                                                     pure {hh = hh,
                                                                                                           mm = mm,
                                                                                                           ss = ss,
                                                                                                           fr = fr,
                                                                                                           ff = ff}
                                                                            pure {smtpe_offset: _22}
                                                    | {- time_sig -} do (_23 : midi.Meta1) <- do midi._Guard (type == 88)
                                                                                                 (nn : uint 8) <- GetByte
                                                                                                 (dd : uint 8) <- GetByte
                                                                                                 (cc : uint 8) <- GetByte
                                                                                                 (bb : uint 8) <- GetByte
                                                                                                 END
                                                                                                 pure {nn = nn,
                                                                                                       dd = dd,
                                                                                                       cc = cc,
                                                                                                       bb = bb}
                                                                        pure {time_sig: _23}
                                                    | {- key_sig -} do (_26 : midi.Meta3) <- do midi._Guard (type == 89)
                                                                                                (key : uint 8) <- GetByte
                                                                                                (mode : midi.Meta2) <- Choose fair
                                                                                                                         { {- major -} do (_24 : uint 8) <- Match {'\NUL'}
                                                                                                                                          pure {major: _24}
                                                                                                                         | {- minor -} do (_25 : uint 8) <- Match {'\SOH'}
                                                                                                                                          pure {minor: _25}
                                                                                                                         }
                                                                                                END
                                                                                                pure {key = key,
                                                                                                      mode = mode}
                                                                       pure {key_sig: _26}
                                                    | {- seq_specifiec -} do (_27 : midi.Meta4) <- do midi._Guard (type == 127)
                                                                                                      (manufacturer : uint 16) <- Choose biased
                                                                                                                                    { do @Match {'\NUL'}
                                                                                                                                         ($$ : uint 16) <- midi.BE16
                                                                                                                                         pure $$
                                                                                                                                    | do (b : uint 8) <- GetByte
                                                                                                                                         ($$ : uint 16) <- pure (b as uint 16)
                                                                                                                                         pure $$
                                                                                                                                    }
                                                                                                      (data : Stream) <- CurrentStream
                                                                                                      pure {manufacturer = manufacturer,
                                                                                                            data = data}
                                                                             pure {seq_specifiec: _27}
                                                    | {- unknown -} do (_28 : midi.Meta5) <- do (type : uint 8) <- pure type
                                                                                                (data : Stream) <- CurrentStream
                                                                                                pure {type = type,
                                                                                                      data = data}
                                                                       pure {unknown: _28}
                                                    }
     pure $$
 
midi.ModeMessage : Grammar midi.ModeMessage =
  Choose fair
    { {- all_sound_off -} do (_29 : {}) <- @MatchBytes [120,
                                                        0]
                             pure {all_sound_off: _29}
    | {- reset_controllers -} do (_30 : {}) <- @MatchBytes [121,
                                                            0]
                                 pure {reset_controllers: _30}
    | {- local_control_off -} do (_31 : {}) <- @MatchBytes [122,
                                                            0]
                                 pure {local_control_off: _31}
    | {- local_control_on -} do (_32 : {}) <- @MatchBytes [122,
                                                           127]
                                pure {local_control_on: _32}
    | {- all_notes_off -} do (_33 : {}) <- @MatchBytes [123,
                                                        0]
                             pure {all_notes_off: _33}
    | {- omni_off -} do (_34 : {}) <- @MatchBytes [124,
                                                   0]
                        pure {omni_off: _34}
    | {- omni_on -} do (_35 : {}) <- @MatchBytes [125,
                                                  0]
                       pure {omni_on: _35}
    | {- mono_on -} do (_36 : uint 8) <- do @Match {'~'}
                                            ($$ : uint 8) <- GetByte
                                            midi._Guard ($$ <= 16)
                                            pure $$
                       pure {mono_on: _36}
    | {- poly_on -} do (_37 : {}) <- @MatchBytes [127,
                                                  0]
                       pure {poly_on: _37}
    }
 
midi.ModeMessages : Grammar midi.ModeMessages =
  do (status : uint 8) <- GetByte
     (tag : uint 4) <- pure (status >> 4 as uint 4)
     midi._Guard (tag == 11)
     (channel : uint 4) <- pure (status as uint 4)
     (messages : midi.ModeMessage) <- midi.ModeMessage
     (extra : [midi.Delta midi.ModeMessage]) <- Many[] midi.Delta midi.ModeMessage midi.ModeMessage
     pure {channel = channel,
           messages = messages,
           extra = extra}
 
midi.SysEx : Grammar midi.SysEx =
  Choose fair
    { {- add_f0 -} do (_38 : Stream) <- do @Match {'\240'}
                                           (len : int) <- midi.VarQ
                                           ($$ : Stream) <- midi.Block Stream len CurrentStream
                                           pure $$
                      pure {add_f0: _38}
    | {- as_is -} do (_39 : Stream) <- do @Match {'\247'}
                                          (len : int) <- midi.VarQ
                                          ($$ : Stream) <- midi.Block Stream len CurrentStream
                                          pure $$
                     pure {as_is: _39}
    }
 
midi.VoiceMessage (tag : uint 4) : Grammar midi.VoiceMessage =
  Choose fair
    { {- note_off -} do (_40 : midi.VoiceMessage0) <- do midi._Guard (tag == 8)
                                                         (key : uint 7) <- midi.UInt7
                                                         (velocity : uint 7) <- midi.UInt7
                                                         pure {key = key,
                                                               velocity = velocity}
                        pure {note_off: _40}
    | {- note_on -} do (_41 : midi.VoiceMessage1) <- do midi._Guard (tag == 9)
                                                        (key : uint 7) <- midi.UInt7
                                                        (velocity : uint 7) <- midi.UInt7
                                                        pure {key = key,
                                                              velocity = velocity}
                       pure {note_on: _41}
    | {- aftertouch -} do (_42 : midi.VoiceMessage2) <- do midi._Guard (tag == 10)
                                                           (key : uint 7) <- midi.UInt7
                                                           (pressure : uint 7) <- midi.UInt7
                                                           pure {key = key,
                                                                 pressure = pressure}
                          pure {aftertouch: _42}
    | {- controller_change -} do (_43 : midi.VoiceMessage3) <- do midi._Guard (tag == 11)
                                                                  (controller : uint 7) <- midi.UInt7
                                                                  midi._Guard (controller <= 119)
                                                                  (value : uint 7) <- midi.UInt7
                                                                  pure {controller = controller,
                                                                        value = value}
                                 pure {controller_change: _43}
    | {- program_change -} do (_44 : uint 7) <- do midi._Guard (tag == 12)
                                                   ($$ : uint 7) <- midi.UInt7
                                                   pure $$
                              pure {program_change: _44}
    | {- channel_pressure -} do (_45 : uint 7) <- do midi._Guard (tag == 13)
                                                     ($$ : uint 7) <- midi.UInt7
                                                     pure $$
                                pure {channel_pressure: _45}
    | {- pitch_bend -} do (_46 : uint 14) <- do midi._Guard (tag == 14)
                                                (lsb : uint 7) <- midi.UInt7
                                                (msb : uint 7) <- midi.UInt7
                                                ($$ : uint 14) <- pure (msb # lsb)
                                                pure $$
                          pure {pitch_bend: _46}
    }
 
midi.VoiceMessages : Grammar midi.VoiceMessages =
  do (status : uint 8) <- GetByte
     (tag : uint 4) <- pure (status >> 4 as uint 4)
     (channel : uint 4) <- pure (status as uint 4)
     (message : midi.VoiceMessage) <- midi.VoiceMessage tag
     (extra : [midi.Delta midi.VoiceMessage]) <- Many[] midi.Delta midi.VoiceMessage (midi.VoiceMessage tag)
     pure {channel = channel,
           message = message,
           extra = extra}
 
midi.Event : Grammar midi.Event =
  Choose fair
    { {- voiceMessage -} do (_47 : midi.VoiceMessages) <- midi.VoiceMessages
                            pure {voiceMessage: _47}
    | {- modeMessage -} do (_48 : midi.ModeMessages) <- midi.ModeMessages
                           pure {modeMessage: _48}
    | {- sysEx -} do (_49 : midi.SysEx) <- midi.SysEx
                     pure {sysEx: _49}
    | {- meta -} do (_50 : midi.Meta) <- midi.Meta
                    pure {meta: _50}
    }
 
midi.Guard (p : bool) : Grammar {} =
  Guard p
 
midi.TAG16 (n : uint 16) : Grammar {} =
  do (_52 : bool) <- do (_51 : uint 16) <- midi.BE16
                        pure (_51 == n)
     midi.Guard _52
 
midi.Header : Grammar midi.Header =
  midi.Chunk [uint 8] midi.Header (MatchBytes "MThd") do (format : midi.Header0) <- Choose fair
                                                                                      { {- single_track -} do (_53 : {}) <- midi.TAG16 0
                                                                                                              pure {single_track: _53}
                                                                                      | {- multi_track -} do (_54 : {}) <- midi.TAG16 1
                                                                                                             pure {multi_track: _54}
                                                                                      | {- multi_song -} do (_55 : {}) <- midi.TAG16 2
                                                                                                            pure {multi_song: _55}
                                                                                      }
                                                         (track_num : uint 16) <- midi.BE16
                                                         (time_unit : midi.Header1) <- do (w : uint 16) <- midi.BE16
                                                                                          (tag : uint 1) <- pure (midi.getBit (uint 16) 15 w)
                                                                                          ($$ : midi.Header1) <- Choose fair
                                                                                                                   { {- quarter_len -} do (_56 : uint 15) <- do midi._Guard (tag == 0)
                                                                                                                                                                ($$ : uint 15) <- pure (w as uint 15)
                                                                                                                                                                pure $$
                                                                                                                                          pure {quarter_len: _56}
                                                                                                                   | {- smtpe -} do (_57 : sint 15) <- do midi._Guard (tag == 1)
                                                                                                                                                          ($$ : sint 15) <- pure (w as sint 15)
                                                                                                                                                          pure $$
                                                                                                                                    pure {smtpe: _57}
                                                                                                                   }
                                                                                          pure $$
                                                         pure {format = format,
                                                               track_num = track_num,
                                                               time_unit = time_unit}
 
midi.Track : Grammar [midi.Delta midi.Event] =
  midi.Chunk [uint 8] [midi.Delta midi.Event] (MatchBytes "MTrk") (Many[] midi.Delta midi.Event midi.Event)
 
midi.Main : Grammar midi.Main =
  do (header : midi.Header) <- midi.Header
     (n : int) <- header.track_num AS int
     (tracks : [[midi.Delta midi.Event]]) <- Many[n] midi.Track
     pure {header = header,
           tracks = tracks}
 
midi._BE16 : Grammar {} =
  do @GetByte
     @GetByte
 
midi._BE24 : Grammar {} =
  do midi._BE16
     @GetByte
 
midi._BE32 : Grammar {} =
  do midi._BE16
     midi._BE16
 
midi._Chunk ?a4 ?a8 (_P : Grammar {}) (_Ty : Grammar {}) : Grammar {} =
  do midi._Block ?a4 4 (midi._Only ?a4 _Ty)
     (_9 : int) <- do (_8 : uint 32) <- midi.BE32
                      _8 AS int
     midi._Block ?a8 _9 (midi._Only ?a8 _P)
 
midi._UInt7 : Grammar {} =
  do (_10 : uint 8) <- GetByte
     @(_10 AS uint 7)
 
midi._VarQ : Grammar {} =
  do @Many[] do (b : uint 8) <- GetByte
                midi._Guard ((midi.getBit (uint 8) 7 b) == 1)
     midi._UInt7
 
midi._Delta ?a2 (_E : Grammar {}) : Grammar {} =
  do midi._VarQ
     _E
 
midi._Meta : Grammar {} =
  do @Match {'\255'}
     (type : uint 8) <- GetByte
     midi._Guard (type <= 127)
     (len : int) <- midi.VarQ
     midi._Block midi.Meta len Choose biased
                                 { {- sequence -} do midi._Guard (type == 0)
                                                     midi._Only (uint 16) midi._BE16
                                 | {- text -} midi._Guard (type == 1)
                                 | {- copyright -} midi._Guard (type == 2)
                                 | {- name -} midi._Guard (type == 3)
                                 | {- instrument -} midi._Guard (type == 4)
                                 | {- lyrics -} midi._Guard (type == 5)
                                 | {- marker -} midi._Guard (type == 6)
                                 | {- cue -} midi._Guard (type == 7)
                                 | {- channel -} do midi._Guard (type == 32)
                                                    midi._Only (uint 8) @GetByte
                                 | {- end_track -} do midi._Guard (type == 47)
                                                      END
                                 | {- tempo -} do midi._Guard (type == 81)
                                                  midi._Only (uint 24) midi._BE24
                                 | {- smtpe_offset -} do midi._Guard (type == 84)
                                                         @GetByte
                                                         @GetByte
                                                         @GetByte
                                                         @GetByte
                                                         @GetByte
                                                         END
                                 | {- time_sig -} do midi._Guard (type == 88)
                                                     @GetByte
                                                     @GetByte
                                                     @GetByte
                                                     @GetByte
                                                     END
                                 | {- key_sig -} do midi._Guard (type == 89)
                                                    @GetByte
                                                    Choose fair
                                                      { {- major -} @Match {'\NUL'}
                                                      | {- minor -} @Match {'\SOH'}
                                                      }
                                                    END
                                 | {- seq_specifiec -} do midi._Guard (type == 127)
                                                          Choose biased
                                                            { do @Match {'\NUL'}
                                                                 midi._BE16
                                                            | @GetByte
                                                            }
                                 | {- unknown -} pure {}
                                 }
 
midi._ModeMessage : Grammar {} =
  Choose fair
    { {- all_sound_off -} @MatchBytes [120,
                                       0]
    | {- reset_controllers -} @MatchBytes [121,
                                           0]
    | {- local_control_off -} @MatchBytes [122,
                                           0]
    | {- local_control_on -} @MatchBytes [122,
                                          127]
    | {- all_notes_off -} @MatchBytes [123,
                                       0]
    | {- omni_off -} @MatchBytes [124,
                                  0]
    | {- omni_on -} @MatchBytes [125,
                                 0]
    | {- mono_on -} do @Match {'~'}
                       ($$ : uint 8) <- GetByte
                       midi._Guard ($$ <= 16)
    | {- poly_on -} @MatchBytes [127,
                                 0]
    }
 
midi._ModeMessages : Grammar {} =
  do (status : uint 8) <- GetByte
     (tag : uint 4) <- pure (status >> 4 as uint 4)
     midi._Guard (tag == 11)
     midi._ModeMessage
     @Many[] midi._Delta midi.ModeMessage midi._ModeMessage
 
midi._SysEx : Grammar {} =
  Choose fair
    { {- add_f0 -} do @Match {'\240'}
                      (len : int) <- midi.VarQ
                      midi._Block Stream len (pure {})
    | {- as_is -} do @Match {'\247'}
                     (len : int) <- midi.VarQ
                     midi._Block Stream len (pure {})
    }
 
midi._VoiceMessage (tag : uint 4) : Grammar {} =
  Choose fair
    { {- note_off -} do midi._Guard (tag == 8)
                        midi._UInt7
                        midi._UInt7
    | {- note_on -} do midi._Guard (tag == 9)
                       midi._UInt7
                       midi._UInt7
    | {- aftertouch -} do midi._Guard (tag == 10)
                          midi._UInt7
                          midi._UInt7
    | {- controller_change -} do midi._Guard (tag == 11)
                                 (controller : uint 7) <- midi.UInt7
                                 midi._Guard (controller <= 119)
                                 midi._UInt7
    | {- program_change -} do midi._Guard (tag == 12)
                              midi._UInt7
    | {- channel_pressure -} do midi._Guard (tag == 13)
                                midi._UInt7
    | {- pitch_bend -} do midi._Guard (tag == 14)
                          midi._UInt7
                          midi._UInt7
    }
 
midi._VoiceMessages : Grammar {} =
  do (status : uint 8) <- GetByte
     (tag : uint 4) <- pure (status >> 4 as uint 4)
     midi._VoiceMessage tag
     @Many[] midi._Delta midi.VoiceMessage (midi._VoiceMessage tag)
 
midi._Event : Grammar {} =
  Choose fair
    { {- voiceMessage -} midi._VoiceMessages
    | {- modeMessage -} midi._ModeMessages
    | {- sysEx -} midi._SysEx
    | {- meta -} midi._Meta
    }
 
midi._TAG16 (n : uint 16) : Grammar {} =
  do (_52 : bool) <- do (_51 : uint 16) <- midi.BE16
                        pure (_51 == n)
     midi._Guard _52
 
midi._Header : Grammar {} =
  midi._Chunk [uint 8] midi.Header do Choose fair
                                        { {- single_track -} midi._TAG16 0
                                        | {- multi_track -} midi._TAG16 1
                                        | {- multi_song -} midi._TAG16 2
                                        }
                                      midi._BE16
                                      (w : uint 16) <- midi.BE16
                                      (tag : uint 1) <- pure (midi.getBit (uint 16) 15 w)
                                      Choose fair
                                        { {- quarter_len -} midi._Guard (tag == 0)
                                        | {- smtpe -} midi._Guard (tag == 1)
                                        } (@MatchBytes "MThd")
 
midi._Track : Grammar {} =
  midi._Chunk [uint 8] [midi.Delta midi.Event] (@Many[] midi._Delta midi.Event midi._Event) (@MatchBytes "MTrk")
 
midi._Main : Grammar {} =
  do (header : midi.Header) <- midi.Header
     (n : int) <- header.track_num AS int
     @Many[n] midi._Track
