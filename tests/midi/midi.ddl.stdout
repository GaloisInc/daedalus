module midi
 
--- Imports:
 
--- Type defs:
{- bitdata
0000000000000000
-}
type midi.MidiFormat_single_track = [ 0 [16]
                                    ]
 
{- bitdata
0000000000000001
-}
type midi.MidiFormat_multi_track = [ 1 [16]
                                   ]
 
{- bitdata
0000000000000010
-}
type midi.MidiFormat_multi_song = [ 2 [16]
                                  ]
 
{- bitdata
000000000000000_
0000000000000010
-}
type midi.MidiFormat = Choose { single_track: midi.MidiFormat_single_track
                              ; multi_track: midi.MidiFormat_multi_track
                              ; multi_song: midi.MidiFormat_multi_song
                              }
 
{- bitdata
0_______________
-}
type midi.MidiTimeUnit_quarter_len = [ 0 [1]
                                     | value : uint 15
                                     ]
 
{- bitdata
1_______________
-}
type midi.MidiTimeUnit_smtpe = [ 1 [1]
                               | value : sint 15
                               ]
 
{- bitdata
________________
-}
type midi.MidiTimeUnit = Choose { quarter_len: midi.MidiTimeUnit_quarter_len
                                ; smtpe: midi.MidiTimeUnit_smtpe
                                }
 
type midi.Header = { format: midi.MidiFormat
                   ; track_num: uint 64
                   ; time_unit: midi.MidiTimeUnit
                   }
 
type midi.Delta ?a0 = { after: uint 64
                      ; event: ?a0
                      }
 
type midi.NoteEvent = { key: uint 7
                      ; velocity: uint 7
                      }
 
type midi.ControllerChange = { controller: uint 7
                             ; value: uint 7
                             }
 
type midi.VoiceMessage = Choose { pitch_bend: uint 14
                                ; channel_pressure: uint 7
                                ; program_change: uint 7
                                ; controller_change: midi.ControllerChange
                                ; aftertouch: midi.NoteEvent
                                ; note_on: midi.NoteEvent
                                ; note_off: midi.NoteEvent
                                }
 
type midi.VoiceMessages = { channel: uint 4
                          ; message: midi.VoiceMessage
                          ; extra: [midi.Delta midi.VoiceMessage]
                          }
 
type midi.ModeMessage = Choose { reset_controllers: {}
                               ; poly_on: {}
                               ; omni_on: {}
                               ; omni_off: {}
                               ; mono_on: uint 8
                               ; local_control_on: {}
                               ; local_control_off: {}
                               ; all_sound_off: {}
                               ; all_notes_off: {}
                               }
 
type midi.ModeMessages = { channel: uint 4
                         ; message: midi.ModeMessage
                         ; extra: [midi.Delta midi.ModeMessage]
                         }
 
type midi.SysEx = Choose { add_f0: [uint 8]
                         ; as_is: [uint 8]
                         }
 
type midi.MetaSeqSpecific = { manufacturer: uint 16
                            ; data: [uint 8]
                            }
 
type midi.MetaUnknown = { tag: uint 8
                        ; data: [uint 8]
                        }
 
{- bitdata
1_______
-}
type midi.Accidentals_flats = [ 1 [1]
                              | flats : uint 7
                              ]
 
{- bitdata
0_______
-}
type midi.Accidentals_sharps = [ 0 [1]
                               | sharps : uint 7
                               ]
 
{- bitdata
________
-}
type midi.Accidentals = Choose { flats: midi.Accidentals_flats
                               ; sharps: midi.Accidentals_sharps
                               }
 
{- bitdata
00000000
-}
type midi.Mode_minor = [ 0 [8]
                       ]
 
{- bitdata
00000001
-}
type midi.Mode_major = [ 1 [8]
                       ]
 
{- bitdata
0000000_
-}
type midi.Mode = Choose { minor: midi.Mode_minor
                        ; major: midi.Mode_major
                        }
 
type midi.KeySig = { key: midi.Accidentals
                   ; mode: midi.Mode
                   }
 
type midi.SMTPEOffset = { hh: uint 8
                        ; mm: uint 8
                        ; ss: uint 8
                        ; fr: uint 8
                        ; ff: uint 8
                        }
 
type midi.TimeSig = { nn: uint 8
                    ; dd: uint 8
                    ; cc: uint 8
                    ; bb: uint 8
                    }
 
type midi.Meta = Choose { unknown: midi.MetaUnknown
                        ; seq_specifiec: midi.MetaSeqSpecific
                        ; key_sig: midi.KeySig
                        ; time_sig: midi.TimeSig
                        ; smtpe_offset: midi.SMTPEOffset
                        ; tempo: uint 24
                        ; end_track: {}
                        ; channel: uint 8
                        ; cue: [uint 8]
                        ; marker: [uint 8]
                        ; lyrics: [uint 8]
                        ; instrument: [uint 8]
                        ; name: [uint 8]
                        ; copyright: [uint 8]
                        ; text: [uint 8]
                        ; sequence: uint 16
                        }
 
type midi.Event = Choose { meta: midi.Meta
                         ; modeMessage: midi.ModeMessages
                         ; sysEx: midi.SysEx
                         ; voiceMessage: midi.VoiceMessages
                         }
 
type midi.Main = { header: midi.Header
                 ; tracks: [[midi.Delta midi.Event]]
                 }
 
{- bitdata
1000
-}
type midi.VoiceMessageTag_note_off = [ 8 [4]
                                     ]
 
{- bitdata
1001
-}
type midi.VoiceMessageTag_note_on = [ 9 [4]
                                    ]
 
{- bitdata
1010
-}
type midi.VoiceMessageTag_aftertouch = [ 10 [4]
                                       ]
 
{- bitdata
1011
-}
type midi.VoiceMessageTag_controller_change = [ 11 [4]
                                              ]
 
{- bitdata
1100
-}
type midi.VoiceMessageTag_program_change = [ 12 [4]
                                           ]
 
{- bitdata
1101
-}
type midi.VoiceMessageTag_channel_pressure = [ 13 [4]
                                             ]
 
{- bitdata
1110
-}
type midi.VoiceMessageTag_pitch_bend = [ 14 [4]
                                       ]
 
{- bitdata
10__
110_
1110
-}
type midi.VoiceMessageTag = Choose { note_off: midi.VoiceMessageTag_note_off
                                   ; note_on: midi.VoiceMessageTag_note_on
                                   ; aftertouch: midi.VoiceMessageTag_aftertouch
                                   ; controller_change: midi.VoiceMessageTag_controller_change
                                   ; program_change: midi.VoiceMessageTag_program_change
                                   ; channel_pressure: midi.VoiceMessageTag_channel_pressure
                                   ; pitch_bend: midi.VoiceMessageTag_pitch_bend
                                   }
 
{- bitdata
10______
110_____
1110____
-}
type midi.VoiceMessagesHeader_VoiceMessagesHeader = [ tag : midi.VoiceMessageTag
                                                    | channel : uint 4
                                                    ]
 
{- bitdata
10______
110_____
1110____
-}
type midi.VoiceMessagesHeader = Choose { VoiceMessagesHeader: midi.VoiceMessagesHeader_VoiceMessagesHeader
                                       }
 
{- bitdata
1011____
-}
type midi.ModeMessagesHeader_ModeMessagesHeader = [ 11 [4]
                                                  | channel : uint 4
                                                  ]
 
{- bitdata
1011____
-}
type midi.ModeMessagesHeader = Choose { ModeMessagesHeader: midi.ModeMessagesHeader_ModeMessagesHeader
                                      }
 
{- bitdata
1_______
-}
type midi.VarQChunk_More = [ 1 [1]
                           | value : uint 7
                           ]
 
{- bitdata
0_______
-}
type midi.VarQChunk_Last = [ 0 [1]
                           | value : uint 7
                           ]
 
{- bitdata
________
-}
type midi.VarQChunk = Choose { More: midi.VarQChunk_More
                             ; Last: midi.VarQChunk_Last
                             }
 
--- Rules:
 
midi.BE16 : Grammar (uint 16) =
  do (_112 : uint 8) <- GetByte
     (_113 : uint 8) <- GetByte
     pure (_112 # _113)
 
midi.BE32 : Grammar (uint 32) =
  do (_114 : uint 16) <- midi.BE16
     (_115 : uint 16) <- midi.BE16
     pure (_114 # _115)
 
midi.Block ?a0 (n : uint 64) (P : Grammar ?a0) : Grammar ?a0 =
  do (cur : Stream) <- CurrentStream
     do (_116 : Stream) <- StreamLen n cur
        SetStream _116
     ($$ : ?a0) <- P
     do (_117 : Stream) <- StreamOff n cur
        SetStream _117
     pure $$
 
midi.Only ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do ($$ : ?a0) <- P
     END
     pure $$
 
midi.ExactBlock ?a0 (n : uint 64) (P : Grammar ?a0) : Grammar ?a0 =
  midi.Block ?a0 n (midi.Only ?a0 P)
 
midi._Block ?a0 (n : uint 64) (_P : Grammar {}) : Grammar {} =
  do (cur : Stream) <- CurrentStream
     do (_116 : Stream) <- StreamLen n cur
        SetStream _116
     _P
     (_117 : Stream) <- StreamOff n cur
     SetStream _117
 
midi._Only ?a0 (_P : Grammar {}) : Grammar {} =
  do _P
     END
 
midi._ExactBlock ?a0 (n : uint 64) (_P : Grammar {}) : Grammar {} =
  midi._Block ?a0 n (midi._Only ?a0 _P)
 
midi.Chunk ?a0 (name : [uint 8]) (Body : Grammar ?a0) : Grammar ?a0 =
  do midi._ExactBlock [uint 8] 4 (@MatchBytes name)
     ($$ : ?a0) <- do (_120 : uint 64) <- do (_119 : uint 32) <- midi.BE32
                                             pure (_119 as uint 64)
                      midi.ExactBlock ?a0 _120 Body
     pure $$
 
midi.Header : Grammar midi.Header =
  midi.Chunk midi.Header "MThd" do (format : midi.MidiFormat) <- do (_121 : uint 16) <- midi.BE16
                                                                    _121 AS midi.MidiFormat
                                   (track_num : uint 64) <- do (_122 : uint 16) <- midi.BE16
                                                               pure (_122 as uint 64)
                                   (time_unit : midi.MidiTimeUnit) <- do (_123 : uint 16) <- midi.BE16
                                                                         pure (_123 as midi.MidiTimeUnit)
                                   pure {format = format,
                                         track_num = track_num,
                                         time_unit = time_unit}
 
rec value
  midi.VarQBuilder (result : int) : Grammar int =
    do (_125 : midi.VarQChunk) <- do (_124 : uint 8) <- GetByte
                                     pure (_124 as midi.VarQChunk)
       case _125 is
         { {| More = x |} -> {- case branch  {| More = x |} -} midi.VarQBuilder (result <# (x.value))
         ; {| Last = x |} -> {- case branch  {| Last = x |} -} pure (result <# (x.value))
         }
 
midi.VarQ : Grammar (uint 64) =
  do (_126 : int) <- midi.VarQBuilder 0
     _126 AS uint 64
 
midi.Delta ?a0 (E : Grammar ?a0) : Grammar (midi.Delta ?a0) =
  do (after : uint 64) <- midi.VarQ
     (event : ?a0) <- E
     pure {after = after,
           event = event}
 
midi.UInt7 : Grammar (uint 7) =
  do (_127 : uint 8) <- GetByte
     _127 AS uint 7
 
midi.NoteEvent : Grammar midi.NoteEvent =
  do (key : uint 7) <- midi.UInt7
     (velocity : uint 7) <- midi.UInt7
     pure {key = key,
           velocity = velocity}
 
midi._Guard (p : bool) : Grammar {} =
  case p is
    { true -> pure {}
    }
 
midi.ControllerChange : Grammar midi.ControllerChange =
  do (controller : uint 7) <- midi.UInt7
     midi._Guard (controller <= 0x77)
     (value : uint 7) <- midi.UInt7
     pure {controller = controller,
           value = value}
 
midi.VoiceMessage (tag : midi.VoiceMessageTag) : Grammar midi.VoiceMessage =
  case tag is
    { {| note_off = _ |} -> {- case branch  {| note_off = _ |} -} do (_128 : midi.NoteEvent) <- midi.NoteEvent
                                                                     pure {note_off: _128}
    ; {| note_on = _ |} -> {- case branch  {| note_on = _ |} -} do (_129 : midi.NoteEvent) <- midi.NoteEvent
                                                                   pure {note_on: _129}
    ; {| aftertouch = _ |} -> {- case branch  {| aftertouch = _ |} -} do (_130 : midi.NoteEvent) <- midi.NoteEvent
                                                                         pure {aftertouch: _130}
    ; {| controller_change = _ |} -> {- case branch  {| controller_change = _ |} -} do (_131 : midi.ControllerChange) <- midi.ControllerChange
                                                                                       pure {controller_change: _131}
    ; {| program_change = _ |} -> {- case branch  {| program_change = _ |} -} do (_132 : uint 7) <- midi.UInt7
                                                                                 pure {program_change: _132}
    ; {| channel_pressure = _ |} -> {- case branch  {| channel_pressure = _ |} -} do (_133 : uint 7) <- midi.UInt7
                                                                                     pure {channel_pressure: _133}
    ; {| pitch_bend = _ |} -> {- case branch  {| pitch_bend = _ |} -} do (_135 : uint 14) <- do (lsb : uint 7) <- midi.UInt7
                                                                                                (msb : uint 7) <- midi.UInt7
                                                                                                ($$ : uint 14) <- pure (msb # lsb)
                                                                                                pure $$
                                                                         pure {pitch_bend: _135}
    }
 
midi.VoiceMessages : Grammar midi.VoiceMessages =
  do (_137 : midi.VoiceMessagesHeader) <- do (_136 : uint 8) <- GetByte
                                             _136 AS midi.VoiceMessagesHeader
     case _137 is
       { {| VoiceMessagesHeader = header |} -> {- case branch  {| VoiceMessagesHeader = header |} -} do (channel : uint 4) <- pure (header.channel)
                                                                                                        (message : midi.VoiceMessage) <- midi.VoiceMessage (header.tag)
                                                                                                        (extra : [midi.Delta midi.VoiceMessage]) <- Many[] midi.Delta midi.VoiceMessage (midi.VoiceMessage (header.tag))
                                                                                                        pure {channel = channel,
                                                                                                              message = message,
                                                                                                              extra = extra}
       }
 
midi.ModeMessage : Grammar midi.ModeMessage =
  Choose biased
    { {- all_sound_off -} do (_138 : {}) <- @MatchBytes [0x78,
                                                         0x00]
                             pure {all_sound_off: _138}
    | {- reset_controllers -} do (_139 : {}) <- @MatchBytes [0x79,
                                                             0x00]
                                 pure {reset_controllers: _139}
    | {- local_control_off -} do (_140 : {}) <- @MatchBytes [0x7A,
                                                             0x00]
                                 pure {local_control_off: _140}
    | {- local_control_on -} do (_141 : {}) <- @MatchBytes [0x7A,
                                                            0x7F]
                                pure {local_control_on: _141}
    | {- all_notes_off -} do (_142 : {}) <- @MatchBytes [0x7B,
                                                         0x00]
                             pure {all_notes_off: _142}
    | {- omni_off -} do (_143 : {}) <- @MatchBytes [0x7C,
                                                    0x00]
                        pure {omni_off: _143}
    | {- omni_on -} do (_144 : {}) <- @MatchBytes [0x7D,
                                                   0x00]
                       pure {omni_on: _144}
    | {- mono_on -} do (_145 : uint 8) <- do @Match {0x7E}
                                             ($$ : uint 8) <- GetByte
                                             midi._Guard ($$ <= 0x10)
                                             pure $$
                       pure {mono_on: _145}
    | {- poly_on -} do (_146 : {}) <- @MatchBytes [0x7F,
                                                   0x00]
                       pure {poly_on: _146}
    }
 
midi.ModeMessages : Grammar midi.ModeMessages =
  do (_148 : midi.ModeMessagesHeader) <- do (_147 : uint 8) <- GetByte
                                            _147 AS midi.ModeMessagesHeader
     case _148 is
       { {| ModeMessagesHeader = header |} -> {- case branch  {| ModeMessagesHeader = header |} -} do (channel : uint 4) <- pure (header.channel)
                                                                                                      (message : midi.ModeMessage) <- midi.ModeMessage
                                                                                                      (extra : [midi.Delta midi.ModeMessage]) <- Many[] midi.Delta midi.ModeMessage midi.ModeMessage
                                                                                                      pure {channel = channel,
                                                                                                            message = message,
                                                                                                            extra = extra}
       }
 
midi.SysEx : Grammar midi.SysEx =
  Choose biased
    { {- add_f0 -} do (_151 : [uint 8]) <- do @Match {0xF0}
                                              ($$ : [uint 8]) <- do (_150 : uint 64) <- midi.VarQ
                                                                    midi.Block [uint 8] _150 (Many[] GetByte)
                                              pure $$
                      pure {add_f0: _151}
    | {- as_is -} do (_154 : [uint 8]) <- do @Match {0xF7}
                                             ($$ : [uint 8]) <- do (_153 : uint 64) <- midi.VarQ
                                                                   midi.Block [uint 8] _153 (Many[] GetByte)
                                             pure $$
                     pure {as_is: _154}
    }
 
midi.MetaSeqSpecific : Grammar midi.MetaSeqSpecific =
  do (manufacturer : uint 16) <- Choose biased
                                   { do @Match {0}
                                        ($$ : uint 16) <- midi.BE16
                                        pure $$
                                   | do (_156 : uint 8) <- GetByte
                                        pure (_156 as uint 16)
                                   }
     (data : [uint 8]) <- Many[] GetByte
     pure {manufacturer = manufacturer,
           data = data}
 
midi.MetaUnknown (tag : uint 8) : Grammar midi.MetaUnknown =
  do (tag : uint 8) <- pure tag
     (data : [uint 8]) <- Many[] GetByte
     pure {tag = tag,
           data = data}
 
midi.KeySig : Grammar midi.KeySig =
  do (key : midi.Accidentals) <- do (_157 : uint 8) <- GetByte
                                    pure (_157 as midi.Accidentals)
     (mode : midi.Mode) <- do (_158 : uint 8) <- GetByte
                              _158 AS midi.Mode
     pure {key = key,
           mode = mode}
 
midi.SMTPEOffset : Grammar midi.SMTPEOffset =
  do (hh : uint 8) <- GetByte
     (mm : uint 8) <- GetByte
     (ss : uint 8) <- GetByte
     (fr : uint 8) <- GetByte
     (ff : uint 8) <- GetByte
     pure {hh = hh,
           mm = mm,
           ss = ss,
           fr = fr,
           ff = ff}
 
midi.TimeSig : Grammar midi.TimeSig =
  do (nn : uint 8) <- GetByte
     (dd : uint 8) <- GetByte
     (cc : uint 8) <- GetByte
     (bb : uint 8) <- GetByte
     pure {nn = nn,
           dd = dd,
           cc = cc,
           bb = bb}
 
midi.BE24 : Grammar (uint 24) =
  do (_159 : uint 16) <- midi.BE16
     (_160 : uint 8) <- GetByte
     pure (_159 # _160)
 
midi.Meta : Grammar midi.Meta =
  do @Match {0xFF}
     (tag : uint 8) <- GetByte
     midi._Guard (tag <= 0x7F)
     ($$ : midi.Meta) <- do (_162 : uint 64) <- midi.VarQ
                            midi.ExactBlock midi.Meta _162 (case tag is
                                                              { 0x00 -> {- case branch  0x00 -} do (_163 : uint 16) <- midi.BE16
                                                                                                   pure {sequence: _163}
                                                              ; 0x01 -> {- case branch  0x01 -} do (_164 : [uint 8]) <- Many[] GetByte
                                                                                                   pure {text: _164}
                                                              ; 0x02 -> {- case branch  0x02 -} do (_165 : [uint 8]) <- Many[] GetByte
                                                                                                   pure {copyright: _165}
                                                              ; 0x03 -> {- case branch  0x03 -} do (_166 : [uint 8]) <- Many[] GetByte
                                                                                                   pure {name: _166}
                                                              ; 0x04 -> {- case branch  0x04 -} do (_167 : [uint 8]) <- Many[] GetByte
                                                                                                   pure {instrument: _167}
                                                              ; 0x05 -> {- case branch  0x05 -} do (_168 : [uint 8]) <- Many[] GetByte
                                                                                                   pure {lyrics: _168}
                                                              ; 0x06 -> {- case branch  0x06 -} do (_169 : [uint 8]) <- Many[] GetByte
                                                                                                   pure {marker: _169}
                                                              ; 0x07 -> {- case branch  0x07 -} do (_170 : [uint 8]) <- Many[] GetByte
                                                                                                   pure {cue: _170}
                                                              ; 0x20 -> {- case branch  0x20 -} do (_171 : uint 8) <- GetByte
                                                                                                   pure {channel: _171}
                                                              ; 0x2F -> {- case branch  0x2F -} do (_172 : {}) <- END
                                                                                                   pure {end_track: _172}
                                                              ; 0x51 -> {- case branch  0x51 -} do (_173 : uint 24) <- midi.BE24
                                                                                                   pure {tempo: _173}
                                                              ; 0x54 -> {- case branch  0x54 -} do (_174 : midi.SMTPEOffset) <- midi.SMTPEOffset
                                                                                                   pure {smtpe_offset: _174}
                                                              ; 0x58 -> {- case branch  0x58 -} do (_175 : midi.TimeSig) <- midi.TimeSig
                                                                                                   pure {time_sig: _175}
                                                              ; 0x59 -> {- case branch  0x59 -} do (_176 : midi.KeySig) <- midi.KeySig
                                                                                                   pure {key_sig: _176}
                                                              ; 0x7F -> {- case branch  0x7F -} do (_177 : midi.MetaSeqSpecific) <- midi.MetaSeqSpecific
                                                                                                   pure {seq_specifiec: _177}
                                                              ; _ -> do (_178 : midi.MetaUnknown) <- midi.MetaUnknown tag
                                                                        pure {unknown: _178}
                                                              })
     pure $$
 
midi.Event : Grammar midi.Event =
  Choose biased
    { {- voiceMessage -} do (_179 : midi.VoiceMessages) <- midi.VoiceMessages
                            pure {voiceMessage: _179}
    | {- modeMessage -} do (_180 : midi.ModeMessages) <- midi.ModeMessages
                           pure {modeMessage: _180}
    | {- sysEx -} do (_181 : midi.SysEx) <- midi.SysEx
                     pure {sysEx: _181}
    | {- meta -} do (_182 : midi.Meta) <- midi.Meta
                    pure {meta: _182}
    }
 
midi.Track : Grammar [midi.Delta midi.Event] =
  midi.Chunk [midi.Delta midi.Event] "MTrk" (Many[] midi.Delta midi.Event midi.Event)
 
midi.Main : Grammar midi.Main =
  do (header : midi.Header) <- midi.Header
     (tracks : [[midi.Delta midi.Event]]) <- Many[header.track_num] midi.Track
     pure {header = header,
           tracks = tracks}
 
midi.Guard (p : bool) : Grammar {} =
  case p is
    { true -> pure {}
    }
 
midi._BE16 : Grammar {} =
  do @GetByte
     @GetByte
 
midi._BE32 : Grammar {} =
  do midi._BE16
     midi._BE16
 
midi._Chunk ?a0 (name : [uint 8]) (_Body : Grammar {}) : Grammar {} =
  do midi._ExactBlock [uint 8] 4 (@MatchBytes name)
     (_120 : uint 64) <- do (_119 : uint 32) <- midi.BE32
                            pure (_119 as uint 64)
     midi._ExactBlock ?a0 _120 _Body
 
midi._Header : Grammar {} =
  midi._Chunk midi.Header "MThd" do do (_121 : uint 16) <- midi.BE16
                                       @(_121 AS midi.MidiFormat)
                                    midi._BE16
                                    midi._BE16
 
midi._VarQBuilder (result : int) : Grammar {} =
  do (_125 : midi.VarQChunk) <- do (_124 : uint 8) <- GetByte
                                   pure (_124 as midi.VarQChunk)
     case _125 is
       { {| More = x |} -> {- case branch  {| More = x |} -} do midi.VarQBuilder (result <# (x.value))
                                                                pure {}
       ; {| Last = x |} -> {- case branch  {| Last = x |} -} pure {}
       }
 
midi._VarQ : Grammar {} =
  do (_126 : int) <- midi.VarQBuilder 0
     @(_126 AS uint 64)
 
midi._Delta ?a0 (_E : Grammar {}) : Grammar {} =
  do midi._VarQ
     _E
 
midi._UInt7 : Grammar {} =
  do (_127 : uint 8) <- GetByte
     @(_127 AS uint 7)
 
midi._NoteEvent : Grammar {} =
  do midi._UInt7
     midi._UInt7
 
midi._ControllerChange : Grammar {} =
  do (controller : uint 7) <- midi.UInt7
     midi._Guard (controller <= 0x77)
     midi._UInt7
 
midi._VoiceMessage (tag : midi.VoiceMessageTag) : Grammar {} =
  case tag is
    { {| note_off = _ |} -> {- case branch  {| note_off = _ |} -} midi._NoteEvent
    ; {| note_on = _ |} -> {- case branch  {| note_on = _ |} -} midi._NoteEvent
    ; {| aftertouch = _ |} -> {- case branch  {| aftertouch = _ |} -} midi._NoteEvent
    ; {| controller_change = _ |} -> {- case branch  {| controller_change = _ |} -} midi._ControllerChange
    ; {| program_change = _ |} -> {- case branch  {| program_change = _ |} -} midi._UInt7
    ; {| channel_pressure = _ |} -> {- case branch  {| channel_pressure = _ |} -} midi._UInt7
    ; {| pitch_bend = _ |} -> {- case branch  {| pitch_bend = _ |} -} do midi._UInt7
                                                                         midi._UInt7
    }
 
midi._VoiceMessages : Grammar {} =
  do (_137 : midi.VoiceMessagesHeader) <- do (_136 : uint 8) <- GetByte
                                             _136 AS midi.VoiceMessagesHeader
     case _137 is
       { {| VoiceMessagesHeader = header |} -> {- case branch  {| VoiceMessagesHeader = header |} -} do midi._VoiceMessage (header.tag)
                                                                                                        @Many[] midi._Delta midi.VoiceMessage (midi._VoiceMessage (header.tag))
       }
 
midi._ModeMessage : Grammar {} =
  Choose biased
    { {- all_sound_off -} @MatchBytes [0x78,
                                       0x00]
    | {- reset_controllers -} @MatchBytes [0x79,
                                           0x00]
    | {- local_control_off -} @MatchBytes [0x7A,
                                           0x00]
    | {- local_control_on -} @MatchBytes [0x7A,
                                          0x7F]
    | {- all_notes_off -} @MatchBytes [0x7B,
                                       0x00]
    | {- omni_off -} @MatchBytes [0x7C,
                                  0x00]
    | {- omni_on -} @MatchBytes [0x7D,
                                 0x00]
    | {- mono_on -} do @Match {0x7E}
                       ($$ : uint 8) <- GetByte
                       midi._Guard ($$ <= 0x10)
    | {- poly_on -} @MatchBytes [0x7F,
                                 0x00]
    }
 
midi._ModeMessages : Grammar {} =
  do (_148 : midi.ModeMessagesHeader) <- do (_147 : uint 8) <- GetByte
                                            _147 AS midi.ModeMessagesHeader
     case _148 is
       { {| ModeMessagesHeader = header |} -> {- case branch  {| ModeMessagesHeader = header |} -} do midi._ModeMessage
                                                                                                      @Many[] midi._Delta midi.ModeMessage midi._ModeMessage
       }
 
midi._SysEx : Grammar {} =
  Choose biased
    { {- add_f0 -} do @Match {0xF0}
                      (_150 : uint 64) <- midi.VarQ
                      midi._Block [uint 8] _150 (@Many[] @GetByte)
    | {- as_is -} do @Match {0xF7}
                     (_153 : uint 64) <- midi.VarQ
                     midi._Block [uint 8] _153 (@Many[] @GetByte)
    }
 
midi._MetaSeqSpecific : Grammar {} =
  do Choose biased
       { do @Match {0}
            midi._BE16
       | @GetByte
       }
     @Many[] @GetByte
 
midi._MetaUnknown : Grammar {} =
  @Many[] @GetByte
 
midi._KeySig : Grammar {} =
  do @GetByte
     (_158 : uint 8) <- GetByte
     @(_158 AS midi.Mode)
 
midi._SMTPEOffset : Grammar {} =
  do @GetByte
     @GetByte
     @GetByte
     @GetByte
     @GetByte
 
midi._TimeSig : Grammar {} =
  do @GetByte
     @GetByte
     @GetByte
     @GetByte
 
midi._BE24 : Grammar {} =
  do midi._BE16
     @GetByte
 
midi._Meta : Grammar {} =
  do @Match {0xFF}
     (tag : uint 8) <- GetByte
     midi._Guard (tag <= 0x7F)
     (_162 : uint 64) <- midi.VarQ
     midi._ExactBlock midi.Meta _162 (case tag is
                                        { 0x00 -> {- case branch  0x00 -} midi._BE16
                                        ; 0x01 -> {- case branch  0x01 -} @Many[] @GetByte
                                        ; 0x02 -> {- case branch  0x02 -} @Many[] @GetByte
                                        ; 0x03 -> {- case branch  0x03 -} @Many[] @GetByte
                                        ; 0x04 -> {- case branch  0x04 -} @Many[] @GetByte
                                        ; 0x05 -> {- case branch  0x05 -} @Many[] @GetByte
                                        ; 0x06 -> {- case branch  0x06 -} @Many[] @GetByte
                                        ; 0x07 -> {- case branch  0x07 -} @Many[] @GetByte
                                        ; 0x20 -> {- case branch  0x20 -} @GetByte
                                        ; 0x2F -> {- case branch  0x2F -} END
                                        ; 0x51 -> {- case branch  0x51 -} midi._BE24
                                        ; 0x54 -> {- case branch  0x54 -} midi._SMTPEOffset
                                        ; 0x58 -> {- case branch  0x58 -} midi._TimeSig
                                        ; 0x59 -> {- case branch  0x59 -} midi._KeySig
                                        ; 0x7F -> {- case branch  0x7F -} midi._MetaSeqSpecific
                                        ; _ -> midi._MetaUnknown
                                        })
 
midi._Event : Grammar {} =
  Choose biased
    { {- voiceMessage -} midi._VoiceMessages
    | {- modeMessage -} midi._ModeMessages
    | {- sysEx -} midi._SysEx
    | {- meta -} midi._Meta
    }
 
midi._Track : Grammar {} =
  midi._Chunk [midi.Delta midi.Event] "MTrk" (@Many[] midi._Delta midi.Event midi._Event)
 
midi._Main : Grammar {} =
  do (header : midi.Header) <- midi.Header
     @Many[header.track_num] midi._Track
