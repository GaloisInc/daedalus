module Number
 
--- Imports:
 
--- Type defs:
type Number.Frac ?a0 = { num: int
                       ; exp: ?a0
                       }
 
--- Rules:
 
Number.addDigit ?a0 (Literal 10 ?a0) (Arith ?a0) (val : ?a0) (d : ?a0) : ?a0 =
  (10 * val) + d
 
Number.Digit : Grammar int =
  do (d : uint 8) <- Match ('0' .. '9')
     ($$ : int) <- pure (d - '0' as int)
     pure $$
 
Number.Natural : Grammar int =
  do (_26 : [int]) <- Many[ 1 .. ] Number.Digit
     for ((val : int) = 0; (d : int) in _26)
       (pure (Number.addDigit int val d))
 
Number.Frac ?a0 (Arith ?a0) (Literal 1 ?a0) (n : uint 64) (w : Number.Frac ?a0) : Grammar (Number.Frac ?a0) =
  do (ds : [int]) <- do @Match {'.'}
                        ($$ : [int]) <- Many[ n .. ] Number.Digit
                        pure $$
     ($$ : Number.Frac ?a0) <- pure (for ((val : Number.Frac ?a0) = w; (d : int) in ds)
                                       let num = Number.addDigit int (val.num) d in
                                       let exp = (val.exp) - 1 in
                                       {num = num,
                                        exp = exp})
     pure $$
 
Number.HexDigit : Grammar int =
  Choose biased
    { Number.Digit
    | Choose biased
        { do (_31 : uint 8) <- do (_30 : uint 8) <- do (_29 : uint 8) <- Match ('a' .. 'f')
                                                       pure (_29 - 'a')
                                  pure (10 + _30)
             pure (_31 as int)
        | do (_34 : uint 8) <- do (_33 : uint 8) <- do (_32 : uint 8) <- Match ('A' .. 'F')
                                                       pure (_32 - 'A')
                                  pure (10 + _33)
             pure (_34 as int)
        }
    }
 
Number._Digit : Grammar {} =
  @Match ('0' .. '9')
 
Number._Natural : Grammar {} =
  @Many[ 1 .. ] Number._Digit
 
Number._Frac ?a0 (Arith ?a0) (Literal 1 ?a0) (n : uint 64) : Grammar {} =
  do @Match {'.'}
     @Many[ n .. ] Number._Digit
 
Number._HexDigit : Grammar {} =
  Choose biased
    { Number._Digit
    | Choose biased
        { @Match ('a' .. 'f')
        | @Match ('A' .. 'F')
        }
    }
module IntList
 
--- Imports:
import Number
 
--- Type defs:
rec
  type IntList.IntList0 = { hd: int
                          ; tail: IntList.IntList
                          }
   
  type IntList.IntList = Choose { cons: IntList.IntList0
                                ; nil: {}
                                }
 
--- Rules:
 
IntList.WS : Grammar {} =
  @Match ((((({'\NUL'} | {'\t'}) | {'\f'}) | {' '}) | {'\n'}) |
          {'\r'})
 
IntList._WS : Grammar {} =
  @Match ((((({'\NUL'} | {'\t'}) | {'\f'}) | {' '}) | {'\n'}) |
          {'\r'})
 
IntList.Token ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do ($$ : ?a0) <- P
     @Many[ 1 .. ] IntList._WS
     pure $$
 
rec value
  IntList.IntList : Grammar IntList.IntList =
    Choose biased
      { {- cons -} do (_35 : IntList.IntList0) <- do (hd : int) <- IntList.Token int Number.Natural
                                                     (tail : IntList.IntList) <- IntList.IntList
                                                     pure {hd = hd,
                                                           tail = tail}
                      pure {cons: _35}
      | {- nil -} do (_36 : {}) <- pure {}
                     pure {nil: _36}
      }
 
IntList._Token ?a0 (_P : Grammar {}) : Grammar {} =
  do _P
     @Many[ 1 .. ] IntList._WS
 
IntList._IntList : Grammar {} =
  Choose biased
    { {- cons -} do IntList._Token int Number._Natural
                    IntList.IntList
                    pure {}
    | {- nil -} pure {}
    }
module T017
 
--- Imports:
import IntList
 
--- Type defs:
 
--- Rules:
 
T017.Main : Grammar IntList.IntList =
  IntList.IntList
 
T017._Main : Grammar {} =
  IntList._IntList
