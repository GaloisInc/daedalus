module Daedalus
 
--- Imports:
 
--- Type defs:
 
--- Rules:
 
Daedalus.joinWords ?a0 ?a1 ?a2 (?a0 + ?a1 = ?a2) (?a1 + ?a0 = ?a2) (?bigEndian : bool) (a : uint ?a0) (b : uint ?a1) : uint ?a2 =
  if ?bigEndian then a # b else b # a
 
Daedalus.UInt16 (?bigEndian : bool) : Grammar (uint 16) =
  do (_92 : uint 8) <- Match UInt8
     (_93 : uint 8) <- Match UInt8
     pure (Daedalus.joinWords 8 8 16 ?bigEndian _92 _93)
 
Daedalus.UInt32 (?bigEndian : bool) : Grammar (uint 32) =
  do (_95 : uint 16) <- Daedalus.UInt16 ?bigEndian
     (_96 : uint 16) <- Daedalus.UInt16 ?bigEndian
     pure (Daedalus.joinWords 16 16 32 ?bigEndian _95 _96)
 
Daedalus.UInt64 (?bigEndian : bool) : Grammar (uint 64) =
  do (_98 : uint 32) <- Daedalus.UInt32 ?bigEndian
     (_99 : uint 32) <- Daedalus.UInt32 ?bigEndian
     pure (Daedalus.joinWords 32 32 64 ?bigEndian _98 _99)
 
Daedalus.SInt16 (?bigEndian : bool) : Grammar (sint 16) =
  do (_101 : uint 16) <- Daedalus.UInt16 ?bigEndian
     pure (_101 as sint 16)
 
Daedalus.SInt32 (?bigEndian : bool) : Grammar (sint 32) =
  do (_103 : uint 32) <- Daedalus.UInt32 ?bigEndian
     pure (_103 as sint 32)
 
Daedalus.SInt64 (?bigEndian : bool) : Grammar (sint 64) =
  do (_105 : uint 64) <- Daedalus.UInt64 ?bigEndian
     pure (_105 as sint 64)
 
Daedalus.wordToHalfFloat (w : uint 16) : float =
  let sign = w >> 15 as uint 1 in
  let expo = w >> 10 as uint 5 in
  let mant = w as uint 10 in
  if (expo == 0) then let magic = 126 << 23 in
                      let num = (wordToFloat (magic + (0 # mant))) - (wordToFloat magic) in
                      if (sign == 1) then - num else num else let newExp = if (expo == 0x1F) then 0xFF else (127 - 15) + (0 # expo) in
                                                              wordToFloat (((sign # newExp) # mant) # 0)
 
Daedalus.HalfFloat (?bigEndian : bool) : Grammar float =
  do (_107 : uint 16) <- Daedalus.UInt16 ?bigEndian
     pure (Daedalus.wordToHalfFloat _107)
 
Daedalus.Float (?bigEndian : bool) : Grammar float =
  do (_109 : uint 32) <- Daedalus.UInt32 ?bigEndian
     pure (wordToFloat _109)
 
Daedalus.Double (?bigEndian : bool) : Grammar double =
  do (_111 : uint 64) <- Daedalus.UInt64 ?bigEndian
     pure (wordToDouble _111)
 
Daedalus.BEUInt16 : Grammar (uint 16) =
  do (?bigEndian : bool) <- pure true
     ($$ : uint 16) <- Daedalus.UInt16 ?bigEndian
     pure $$
 
Daedalus.BEUInt32 : Grammar (uint 32) =
  do (?bigEndian : bool) <- pure true
     ($$ : uint 32) <- Daedalus.UInt32 ?bigEndian
     pure $$
 
Daedalus.BEUInt64 : Grammar (uint 64) =
  do (?bigEndian : bool) <- pure true
     ($$ : uint 64) <- Daedalus.UInt64 ?bigEndian
     pure $$
 
Daedalus.BESInt16 : Grammar (sint 16) =
  do (?bigEndian : bool) <- pure true
     ($$ : sint 16) <- Daedalus.SInt16 ?bigEndian
     pure $$
 
Daedalus.BESInt32 : Grammar (sint 32) =
  do (?bigEndian : bool) <- pure true
     ($$ : sint 32) <- Daedalus.SInt32 ?bigEndian
     pure $$
 
Daedalus.BESInt64 : Grammar (sint 64) =
  do (?bigEndian : bool) <- pure true
     ($$ : sint 64) <- Daedalus.SInt64 ?bigEndian
     pure $$
 
Daedalus.BEHalfFloat : Grammar float =
  do (?bigEndian : bool) <- pure true
     ($$ : float) <- Daedalus.HalfFloat ?bigEndian
     pure $$
 
Daedalus.BEFloat : Grammar float =
  do (?bigEndian : bool) <- pure true
     ($$ : float) <- Daedalus.Float ?bigEndian
     pure $$
 
Daedalus.BEDouble : Grammar double =
  do (?bigEndian : bool) <- pure true
     ($$ : double) <- Daedalus.Double ?bigEndian
     pure $$
 
Daedalus.LEUInt16 : Grammar (uint 16) =
  do (?bigEndian : bool) <- pure false
     ($$ : uint 16) <- Daedalus.UInt16 ?bigEndian
     pure $$
 
Daedalus.LEUInt32 : Grammar (uint 32) =
  do (?bigEndian : bool) <- pure false
     ($$ : uint 32) <- Daedalus.UInt32 ?bigEndian
     pure $$
 
Daedalus.LEUInt64 : Grammar (uint 64) =
  do (?bigEndian : bool) <- pure false
     ($$ : uint 64) <- Daedalus.UInt64 ?bigEndian
     pure $$
 
Daedalus.LESInt16 : Grammar (sint 16) =
  do (?bigEndian : bool) <- pure false
     ($$ : sint 16) <- Daedalus.SInt16 ?bigEndian
     pure $$
 
Daedalus.LESInt32 : Grammar (sint 32) =
  do (?bigEndian : bool) <- pure false
     ($$ : sint 32) <- Daedalus.SInt32 ?bigEndian
     pure $$
 
Daedalus.LESInt64 : Grammar (sint 64) =
  do (?bigEndian : bool) <- pure false
     ($$ : sint 64) <- Daedalus.SInt64 ?bigEndian
     pure $$
 
Daedalus.LEHalfFloat : Grammar float =
  do (?bigEndian : bool) <- pure false
     ($$ : float) <- Daedalus.HalfFloat ?bigEndian
     pure $$
 
Daedalus.LEFloat : Grammar float =
  do (?bigEndian : bool) <- pure false
     ($$ : float) <- Daedalus.Float ?bigEndian
     pure $$
 
Daedalus.LEDouble : Grammar double =
  do (?bigEndian : bool) <- pure false
     ($$ : double) <- Daedalus.Double ?bigEndian
     pure $$
 
Daedalus.Guard (b : bool) : Grammar {} =
  case b is
    { true -> pure {}
    }
 
Daedalus.GuardMsg (p : bool) (s : [uint 8]) : Grammar {} =
  if p then pure {} else Fail (concat ["Guard failed: ",
                                       s])
 
Daedalus.When ?a0 ?a1 (P : Grammar ?a1) (x : ?a0) : Grammar ?a0 =
  do do P
        pure {}
     ($$ : ?a0) <- pure x
     pure $$
 
Daedalus.Default ?a0 (x : ?a0) (P : Grammar ?a0) : Grammar ?a0 =
  Choose biased
    { P
    | pure x
    }
 
Daedalus.Only ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do ($$ : ?a0) <- P
     END
     pure $$
 
Daedalus.numBase ?a0 ?a1 ?a2 (Literal 0 ?a2) (HasKey ?a0 ?a1) (HasElement ?a0 ?a2) (Traversable ?a0) (Arith ?a2) (base : ?a2) (ds : ?a0) : ?a2 =
  for ((val : ?a2) = 0; (d : ?a2) in ds)
    ((val * base) + d)
 
Daedalus.min ?a0 (x : ?a0) (y : ?a0) : ?a0 =
  if (x < y) then x else y
 
Daedalus.max ?a0 (x : ?a0) (y : ?a0) : ?a0 =
  if (x < y) then y else x
 
Daedalus.SetStreamAt (n : uint 64) (s : Stream) : Grammar {} =
  do (_149 : Stream) <- StreamOff n s
     SetStream _149
 
Daedalus.Skip (n : uint 64) : Grammar {} =
  do (_150 : Stream) <- CurrentStream
     Daedalus.SetStreamAt n _150
 
Daedalus.SetStreamAt_195 (n : uint 64) (s : Stream) : Grammar {} =
  do (_149 : Stream) <- StreamOff n s
     SetStream _149
 
Daedalus.Chunk ?a0 (n : uint 64) (P : Grammar ?a0) : Grammar ?a0 =
  do (s : Stream) <- CurrentStream
     do (_151 : Stream) <- StreamLen n s
        SetStream _151
     ($$ : ?a0) <- P
     Daedalus.SetStreamAt_195 n s
     pure $$
 
Daedalus.Bytes (n : uint 64) : Grammar Stream =
  Daedalus.Chunk Stream n CurrentStream
 
Daedalus.LookAhead ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do (s : Stream) <- CurrentStream
     ($$ : ?a0) <- P
     SetStream s
     pure $$
 
Daedalus.WithStream ?a0 (s : Stream) (P : Grammar ?a0) : Grammar ?a0 =
  Daedalus.LookAhead ?a0 do SetStream s
                            ($$ : ?a0) <- P
                            pure $$
 
Daedalus.UInt16_154 : Grammar {} =
  do @Match UInt8
     @Match UInt8
 
Daedalus.UInt32_155 : Grammar {} =
  do Daedalus.UInt16_154
     Daedalus.UInt16_154
 
Daedalus.UInt64_156 : Grammar {} =
  do Daedalus.UInt32_155
     Daedalus.UInt32_155
 
Daedalus.SInt16_157 : Grammar {} =
  Daedalus.UInt16_154
 
Daedalus.SInt32_158 : Grammar {} =
  Daedalus.UInt32_155
 
Daedalus.SInt64_159 : Grammar {} =
  Daedalus.UInt64_156
 
Daedalus.HalfFloat_160 : Grammar {} =
  Daedalus.UInt16_154
 
Daedalus.Float_161 : Grammar {} =
  Daedalus.UInt32_155
 
Daedalus.Double_162 : Grammar {} =
  Daedalus.UInt64_156
 
Daedalus.BEUInt16_163 : Grammar {} =
  Daedalus.UInt16_154
 
Daedalus.BEUInt32_164 : Grammar {} =
  Daedalus.UInt32_155
 
Daedalus.BEUInt64_165 : Grammar {} =
  Daedalus.UInt64_156
 
Daedalus.BESInt16_166 : Grammar {} =
  Daedalus.SInt16_157
 
Daedalus.BESInt32_167 : Grammar {} =
  Daedalus.SInt32_158
 
Daedalus.BESInt64_168 : Grammar {} =
  Daedalus.SInt64_159
 
Daedalus.BEHalfFloat_169 : Grammar {} =
  Daedalus.HalfFloat_160
 
Daedalus.BEFloat_170 : Grammar {} =
  Daedalus.Float_161
 
Daedalus.BEDouble_171 : Grammar {} =
  Daedalus.Double_162
 
Daedalus.LEUInt16_172 : Grammar {} =
  Daedalus.UInt16_154
 
Daedalus.LEUInt32_173 : Grammar {} =
  Daedalus.UInt32_155
 
Daedalus.LEUInt64_174 : Grammar {} =
  Daedalus.UInt64_156
 
Daedalus.LESInt16_175 : Grammar {} =
  Daedalus.SInt16_157
 
Daedalus.LESInt32_176 : Grammar {} =
  Daedalus.SInt32_158
 
Daedalus.LESInt64_177 : Grammar {} =
  Daedalus.SInt64_159
 
Daedalus.LEHalfFloat_178 : Grammar {} =
  Daedalus.HalfFloat_160
 
Daedalus.LEFloat_179 : Grammar {} =
  Daedalus.Float_161
 
Daedalus.LEDouble_180 : Grammar {} =
  Daedalus.Double_162
 
Daedalus.Guard_181 (b : bool) : Grammar {} =
  case b is
    { true -> pure {}
    }
 
Daedalus.GuardMsg_183 (p : bool) (s : [uint 8]) : Grammar {} =
  if p then pure {} else Fail (concat ["Guard failed: ",
                                       s])
 
Daedalus.When_186 ?a0 ?a1 (P : Grammar {}) : Grammar {} =
  P
 
Daedalus.Default_189 ?a0 (P : Grammar {}) : Grammar {} =
  Choose biased
    { P
    | pure {}
    }
 
Daedalus.Only_192 ?a0 (P : Grammar {}) : Grammar {} =
  do P
     END
 
Daedalus.Skip_199 (n : uint 64) : Grammar {} =
  do (_150 : Stream) <- CurrentStream
     Daedalus.SetStreamAt_195 n _150
 
Daedalus.Chunk_202 ?a0 (n : uint 64) (P : Grammar {}) : Grammar {} =
  do (s : Stream) <- CurrentStream
     do (_151 : Stream) <- StreamLen n s
        SetStream _151
     P
     Daedalus.SetStreamAt_195 n s
 
Daedalus.Bytes_208 (n : uint 64) : Grammar {} =
  Daedalus.Chunk_202 Stream n (pure {})
 
Daedalus.LookAhead_210 ?a0 (P : Grammar {}) : Grammar {} =
  do (s : Stream) <- CurrentStream
     P
     SetStream s
 
Daedalus.WithStream_214 ?a0 (s : Stream) (P : Grammar {}) : Grammar {} =
  Daedalus.LookAhead_210 ?a0 do SetStream s
                                P
module T076
 
--- Imports:
import Daedalus
 
--- Type defs:
type T076.BTreeHeader = { off: uint 64
                        ; count: uint 64
                        }
 
type T076.BTree = { count: uint 64
                  ; hdr: [T076.BTreeHeader]
                  ; s: Stream
                  }
 
--- Rules:
 
T076.BTreeHeader : Grammar T076.BTreeHeader =
  do (off : uint 64) <- Daedalus.BEUInt64
     (count : uint 64) <- Daedalus.BEUInt64
     pure {off = off,
           count = count}
 
rec value
  T076.BTree : Grammar T076.BTree =
    do (count : uint 64) <- Daedalus.BEUInt64
       (hdr : [T076.BTreeHeader]) <- Many[count] T076.BTreeHeader
       (s : Stream) <- CurrentStream
       do map ((h : T076.BTreeHeader) in hdr)
            do Daedalus.SetStreamAt_195 (h.off) s
               ($$ : [T076.BTree]) <- Many[h.count] T076.BTree
               pure $$
          pure {}
       pure {count = count,
             hdr = hdr,
             s = s}
 
T076.BTreeHeader_218 : Grammar {} =
  do Daedalus.BEUInt64_165
     Daedalus.BEUInt64_165
 
T076.BTree_219 : Grammar {} =
  do (count : uint 64) <- Daedalus.BEUInt64
     (hdr : [T076.BTreeHeader]) <- Many[count] T076.BTreeHeader
     (s : Stream) <- CurrentStream
     map ((h : T076.BTreeHeader) in hdr)
       do Daedalus.SetStreamAt_195 (h.off) s
          ($$ : [T076.BTree]) <- Many[h.count] T076.BTree
          pure $$
     pure {}
