module Daedalus
 
--- Imports:
 
--- Type defs:
 
--- Rules:
 
Daedalus.joinWords ?a0 ?a1 ?a2 (?a0 + ?a1 = ?a2) (?a1 + ?a0 = ?a2) (?bigEndian : bool) (a : uint ?a0) (b : uint ?a1) : uint ?a2 =
  if ?bigEndian then a # b else b # a
 
Daedalus.UInt16 (?bigEndian : bool) : Grammar (uint 16) =
  do (_75 : uint 8) <- GetByte
     (_76 : uint 8) <- GetByte
     pure (Daedalus.joinWords 8 8 16 ?bigEndian _75 _76)
 
Daedalus.UInt32 (?bigEndian : bool) : Grammar (uint 32) =
  do (_78 : uint 16) <- Daedalus.UInt16 ?bigEndian
     (_79 : uint 16) <- Daedalus.UInt16 ?bigEndian
     pure (Daedalus.joinWords 16 16 32 ?bigEndian _78 _79)
 
Daedalus.UInt64 (?bigEndian : bool) : Grammar (uint 64) =
  do (_81 : uint 32) <- Daedalus.UInt32 ?bigEndian
     (_82 : uint 32) <- Daedalus.UInt32 ?bigEndian
     pure (Daedalus.joinWords 32 32 64 ?bigEndian _81 _82)
 
Daedalus.SInt16 (?bigEndian : bool) : Grammar (sint 16) =
  do (_84 : uint 16) <- Daedalus.UInt16 ?bigEndian
     pure (_84 as sint 16)
 
Daedalus.SInt32 (?bigEndian : bool) : Grammar (sint 32) =
  do (_86 : uint 32) <- Daedalus.UInt32 ?bigEndian
     pure (_86 as sint 32)
 
Daedalus.SInt64 (?bigEndian : bool) : Grammar (sint 64) =
  do (_88 : uint 64) <- Daedalus.UInt64 ?bigEndian
     pure (_88 as sint 64)
 
Daedalus.wordToHalfFloat (w : uint 16) : float =
  let sign = w >> 15 as uint 1 in
  let expo = w >> 10 as uint 5 in
  let mant = w as uint 10 in
  if (expo == 0) then let magic = 126 << 23 in
                      let num = (wordToFloat (magic + (0 # mant))) - (wordToFloat magic) in
                      if (sign == 1) then - num else num else let newExp = if (expo == 0x1F) then 0xFF else (127 - 15) + (0 # expo) in
                                                              wordToFloat (((sign # newExp) # mant) # 0)
 
Daedalus.HalfFloat (?bigEndian : bool) : Grammar float =
  do (_90 : uint 16) <- Daedalus.UInt16 ?bigEndian
     pure (Daedalus.wordToHalfFloat _90)
 
Daedalus.Float (?bigEndian : bool) : Grammar float =
  do (_92 : uint 32) <- Daedalus.UInt32 ?bigEndian
     pure (wordToFloat _92)
 
Daedalus.Double (?bigEndian : bool) : Grammar double =
  do (_94 : uint 64) <- Daedalus.UInt64 ?bigEndian
     pure (wordToDouble _94)
 
Daedalus.BEUInt16 : Grammar (uint 16) =
  do (?bigEndian : bool) <- pure true
     ($$ : uint 16) <- Daedalus.UInt16 ?bigEndian
     pure $$
 
Daedalus.BEUInt32 : Grammar (uint 32) =
  do (?bigEndian : bool) <- pure true
     ($$ : uint 32) <- Daedalus.UInt32 ?bigEndian
     pure $$
 
Daedalus.BEUInt64 : Grammar (uint 64) =
  do (?bigEndian : bool) <- pure true
     ($$ : uint 64) <- Daedalus.UInt64 ?bigEndian
     pure $$
 
Daedalus.BESInt16 : Grammar (sint 16) =
  do (?bigEndian : bool) <- pure true
     ($$ : sint 16) <- Daedalus.SInt16 ?bigEndian
     pure $$
 
Daedalus.BESInt32 : Grammar (sint 32) =
  do (?bigEndian : bool) <- pure true
     ($$ : sint 32) <- Daedalus.SInt32 ?bigEndian
     pure $$
 
Daedalus.BESInt64 : Grammar (sint 64) =
  do (?bigEndian : bool) <- pure true
     ($$ : sint 64) <- Daedalus.SInt64 ?bigEndian
     pure $$
 
Daedalus.BEHalfFloat : Grammar float =
  do (?bigEndian : bool) <- pure true
     ($$ : float) <- Daedalus.HalfFloat ?bigEndian
     pure $$
 
Daedalus.BEFloat : Grammar float =
  do (?bigEndian : bool) <- pure true
     ($$ : float) <- Daedalus.Float ?bigEndian
     pure $$
 
Daedalus.BEDouble : Grammar double =
  do (?bigEndian : bool) <- pure true
     ($$ : double) <- Daedalus.Double ?bigEndian
     pure $$
 
Daedalus.LEUInt16 : Grammar (uint 16) =
  do (?bigEndian : bool) <- pure false
     ($$ : uint 16) <- Daedalus.UInt16 ?bigEndian
     pure $$
 
Daedalus.LEUInt32 : Grammar (uint 32) =
  do (?bigEndian : bool) <- pure false
     ($$ : uint 32) <- Daedalus.UInt32 ?bigEndian
     pure $$
 
Daedalus.LEUInt64 : Grammar (uint 64) =
  do (?bigEndian : bool) <- pure false
     ($$ : uint 64) <- Daedalus.UInt64 ?bigEndian
     pure $$
 
Daedalus.LESInt16 : Grammar (sint 16) =
  do (?bigEndian : bool) <- pure false
     ($$ : sint 16) <- Daedalus.SInt16 ?bigEndian
     pure $$
 
Daedalus.LESInt32 : Grammar (sint 32) =
  do (?bigEndian : bool) <- pure false
     ($$ : sint 32) <- Daedalus.SInt32 ?bigEndian
     pure $$
 
Daedalus.LESInt64 : Grammar (sint 64) =
  do (?bigEndian : bool) <- pure false
     ($$ : sint 64) <- Daedalus.SInt64 ?bigEndian
     pure $$
 
Daedalus.LEHalfFloat : Grammar float =
  do (?bigEndian : bool) <- pure false
     ($$ : float) <- Daedalus.HalfFloat ?bigEndian
     pure $$
 
Daedalus.LEFloat : Grammar float =
  do (?bigEndian : bool) <- pure false
     ($$ : float) <- Daedalus.Float ?bigEndian
     pure $$
 
Daedalus.LEDouble : Grammar double =
  do (?bigEndian : bool) <- pure false
     ($$ : double) <- Daedalus.Double ?bigEndian
     pure $$
 
Daedalus.Guard (b : bool) : Grammar {} =
  case b is
    { true -> pure {}
    }
 
Daedalus.Only ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do ($$ : ?a0) <- P
     END
     pure $$
 
Daedalus.min ?a0 (x : ?a0) (y : ?a0) : ?a0 =
  if (x < y) then x else y
 
Daedalus.max ?a0 (x : ?a0) (y : ?a0) : ?a0 =
  if (x < y) then y else x
 
Daedalus.SetStreamAt (n : uint 64) (s : Stream) : Grammar {} =
  do (_131 : Stream) <- StreamOff n s
     SetStream _131
 
Daedalus.Skip (n : uint 64) : Grammar {} =
  do (_132 : Stream) <- CurrentStream
     Daedalus.SetStreamAt n _132
 
Daedalus._SetStreamAt (n : uint 64) (s : Stream) : Grammar {} =
  do (_131 : Stream) <- StreamOff n s
     SetStream _131
 
Daedalus.Chunk ?a0 (n : uint 64) (P : Grammar ?a0) : Grammar ?a0 =
  do (s : Stream) <- CurrentStream
     do (_133 : Stream) <- StreamLen n s
        SetStream _133
     ($$ : ?a0) <- P
     Daedalus._SetStreamAt n s
     pure $$
 
Daedalus.Bytes (n : uint 64) : Grammar Stream =
  Daedalus.Chunk Stream n CurrentStream
 
Daedalus.LookAhead ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do (s : Stream) <- CurrentStream
     ($$ : ?a0) <- P
     SetStream s
     pure $$
 
Daedalus._UInt16 : Grammar {} =
  do @GetByte
     @GetByte
 
Daedalus._UInt32 : Grammar {} =
  do Daedalus._UInt16
     Daedalus._UInt16
 
Daedalus._UInt64 : Grammar {} =
  do Daedalus._UInt32
     Daedalus._UInt32
 
Daedalus._SInt16 : Grammar {} =
  Daedalus._UInt16
 
Daedalus._SInt32 : Grammar {} =
  Daedalus._UInt32
 
Daedalus._SInt64 : Grammar {} =
  Daedalus._UInt64
 
Daedalus._HalfFloat : Grammar {} =
  Daedalus._UInt16
 
Daedalus._Float : Grammar {} =
  Daedalus._UInt32
 
Daedalus._Double : Grammar {} =
  Daedalus._UInt64
 
Daedalus._BEUInt16 : Grammar {} =
  Daedalus._UInt16
 
Daedalus._BEUInt32 : Grammar {} =
  Daedalus._UInt32
 
Daedalus._BEUInt64 : Grammar {} =
  Daedalus._UInt64
 
Daedalus._BESInt16 : Grammar {} =
  Daedalus._SInt16
 
Daedalus._BESInt32 : Grammar {} =
  Daedalus._SInt32
 
Daedalus._BESInt64 : Grammar {} =
  Daedalus._SInt64
 
Daedalus._BEHalfFloat : Grammar {} =
  Daedalus._HalfFloat
 
Daedalus._BEFloat : Grammar {} =
  Daedalus._Float
 
Daedalus._BEDouble : Grammar {} =
  Daedalus._Double
 
Daedalus._LEUInt16 : Grammar {} =
  Daedalus._UInt16
 
Daedalus._LEUInt32 : Grammar {} =
  Daedalus._UInt32
 
Daedalus._LEUInt64 : Grammar {} =
  Daedalus._UInt64
 
Daedalus._LESInt16 : Grammar {} =
  Daedalus._SInt16
 
Daedalus._LESInt32 : Grammar {} =
  Daedalus._SInt32
 
Daedalus._LESInt64 : Grammar {} =
  Daedalus._SInt64
 
Daedalus._LEHalfFloat : Grammar {} =
  Daedalus._HalfFloat
 
Daedalus._LEFloat : Grammar {} =
  Daedalus._Float
 
Daedalus._LEDouble : Grammar {} =
  Daedalus._Double
 
Daedalus._Guard (b : bool) : Grammar {} =
  case b is
    { true -> pure {}
    }
 
Daedalus._Only ?a0 (_P : Grammar {}) : Grammar {} =
  do _P
     END
 
Daedalus._Skip (n : uint 64) : Grammar {} =
  do (_132 : Stream) <- CurrentStream
     Daedalus._SetStreamAt n _132
 
Daedalus._Chunk ?a0 (n : uint 64) (_P : Grammar {}) : Grammar {} =
  do (s : Stream) <- CurrentStream
     do (_133 : Stream) <- StreamLen n s
        SetStream _133
     _P
     Daedalus._SetStreamAt n s
 
Daedalus._Bytes (n : uint 64) : Grammar {} =
  Daedalus._Chunk Stream n (pure {})
 
Daedalus._LookAhead ?a0 (_P : Grammar {}) : Grammar {} =
  do (s : Stream) <- CurrentStream
     _P
     SetStream s
module T076
 
--- Imports:
import Daedalus
 
--- Type defs:
type T076.BTreeHeader = { off: uint 64
                        ; count: uint 64
                        }
 
type T076.BTree = { count: uint 64
                  ; hdr: [T076.BTreeHeader]
                  ; s: Stream
                  }
 
--- Rules:
 
T076.BTreeHeader : Grammar T076.BTreeHeader =
  do (off : uint 64) <- Daedalus.BEUInt64
     (count : uint 64) <- Daedalus.BEUInt64
     pure {off = off,
           count = count}
 
rec value
  T076.BTree : Grammar T076.BTree =
    do (count : uint 64) <- Daedalus.BEUInt64
       (hdr : [T076.BTreeHeader]) <- Many[count] T076.BTreeHeader
       (s : Stream) <- CurrentStream
       do map ((h : T076.BTreeHeader) in hdr)
            do Daedalus._SetStreamAt (h.off) s
               ($$ : [T076.BTree]) <- Many[h.count] T076.BTree
               pure $$
          pure {}
       pure {count = count,
             hdr = hdr,
             s = s}
 
T076._BTreeHeader : Grammar {} =
  do Daedalus._BEUInt64
     Daedalus._BEUInt64
 
T076._BTree : Grammar {} =
  do (count : uint 64) <- Daedalus.BEUInt64
     (hdr : [T076.BTreeHeader]) <- Many[count] T076.BTreeHeader
     (s : Stream) <- CurrentStream
     map ((h : T076.BTreeHeader) in hdr)
       do Daedalus._SetStreamAt (h.off) s
          ($$ : [T076.BTree]) <- Many[h.count] T076.BTree
          pure $$
     pure {}
