module case-union1
 
--- Imports:
 
--- Type defs:
type case-union1.P = Choose { c1: [uint 8]
                            ; c2: [uint 8]
                            }
 
type case-union1.Main = { p: case-union1.P
                        ; tag: [uint 8]
                        }
 
--- Rules:
 
case-union1.P : Grammar case-union1.P =
  Choose fair
    { {- c1 -} do (_0 : [uint 8]) <- MatchBytes "a"
                  pure {c1: _0}
    | {- c2 -} do (_1 : [uint 8]) <- MatchBytes "b"
                  pure {c2: _1}
    }
 
case-union1.Main : Grammar case-union1.Main =
  do (p : case-union1.P) <- case-union1.P
     (tag : [uint 8]) <- case p is
                           { {| c1 = _ |}, {| c2 = _ |} -> pure "either"
                           }
     pure {p = p,
           tag = tag}
 
case-union1._Main : Grammar {} =
  do (p : case-union1.P) <- case-union1.P
     case p is
       { {| c1 = _ |}, {| c2 = _ |} -> pure {}
       }
 
case-union1._P : Grammar {} =
  Choose fair
    { {- c1 -} @MatchBytes "a"
    | {- c2 -} @MatchBytes "b"
    }
