[WARNING] ./P026.ddl:33:3--40:44:
            Using unbiased choice may be inefficient.
[WARNING] ./P026.ddl:24:20--25:70:
            Using unbiased choice may be inefficient.
[WARNING] ./P026.ddl:29:29--29:48:
            Using unbiased choice may be inefficient.
[WARNING] ./P026.ddl:29:12--29:69:
            Using unbiased choice may be inefficient.
[WARNING] ./P026.ddl:12:25--12:43:
            Using unbiased choice may be inefficient.
[WARNING] ./P026.ddl:12:25--12:49:
            Using unbiased choice may be inefficient.
[WARNING] ./P026.ddl:8:25--8:42:
            Using unbiased choice may be inefficient.
module P026
 
--- Imports:
 
--- Type defs:
type P026.Number = { num: int
                   ; exp: int
                   }
 
type P026.Sign = Choose { neg: {}
                        ; pos: {}
                        }
 
type P026.Main = { x: [P026.Number]
                 }
 
--- Rules:
 
P026.$lf : ByteClass =
  {10}
 
P026.$cr : ByteClass =
  {13}
 
P026.$simpleWS : ByteClass =
  (({0} | {9}) | {12}) | {32}
 
P026.SimpleEOL : Grammar (uint 8) =
  Choose fair
    { do @Match P026.$cr
         ($$ : uint 8) <- Match P026.$lf
         pure $$
    | Match P026.$lf
    }
 
P026.EOL : Grammar (uint 8) =
  Choose biased
    { P026.SimpleEOL
    | Match P026.$cr
    }
 
P026.Comment : Grammar (uint 8) =
  do @MatchBytes "%"
     @Many[] @Match (!(P026.$lf | P026.$cr))
     ($$ : uint 8) <- P026.EOL
     pure $$
 
P026.AnyWS : Grammar (uint 8) =
  Choose fair
    { Choose fair
        { Match P026.$simpleWS
        | P026.Comment
        }
    | P026.EOL
    }
 
P026.SimpleEOL_66 : Grammar {} =
  Choose fair
    { do @Match P026.$cr
         @Match P026.$lf
    | @Match P026.$lf
    }
 
P026.EOL_67 : Grammar {} =
  Choose biased
    { P026.SimpleEOL_66
    | @Match P026.$cr
    }
 
P026.Comment_68 : Grammar {} =
  do @MatchBytes "%"
     @Many[] @Match (!(P026.$lf | P026.$cr))
     P026.EOL_67
 
P026.AnyWS_69 : Grammar {} =
  Choose fair
    { Choose fair
        { @Match P026.$simpleWS
        | P026.Comment_68
        }
    | P026.EOL_67
    }
 
P026.Token ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do ($$ : ?a0) <- P
     @Many[] P026.AnyWS_69
     pure $$
 
P026.Token_70 ?a0 (P : Grammar {}) : Grammar {} =
  do P
     @Many[] P026.AnyWS_69
 
P026.KW ?a0 (P : Grammar ?a0) : Grammar {} =
  P026.Token_70 ?a0 do P
                       pure {}
 
P026.KW_73 ?a0 (P : Grammar {}) : Grammar {} =
  P026.Token_70 ?a0 P
 
P026.Between ?a0 (open : [uint 8]) (close : [uint 8]) (P : Grammar ?a0) : Grammar ?a0 =
  do P026.KW_73 [uint 8] (@MatchBytes open)
     ($$ : ?a0) <- P
     P026.KW_73 [uint 8] (@MatchBytes close)
     pure $$
 
P026.numBase ?a0 ?a1 ?a2 (Literal 0 ?a2) (HasKey ?a0 ?a1) (HasElement ?a0 ?a2) (Traversable ?a0) (Arith ?a2) (base : ?a2) (ds : ?a0) : ?a2 =
  for ((val : ?a2) = 0; (d : ?a2) in ds)
    ((val * base) + d)
 
P026.Only ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do ($$ : ?a0) <- P
     END
     pure $$
 
P026.Sign : Grammar P026.Sign =
  Choose fair
    { {- pos -} do (_54 : {}) <- Choose fair
                                   { @MatchBytes "+"
                                   | @MatchBytes ""
                                   }
                   pure {pos: _54}
    | {- neg -} do (_55 : {}) <- @MatchBytes "-"
                   pure {neg: _55}
    }
 
P026.Digit : Grammar int =
  do (d : uint 8) <- Match ('0' .. '9')
     ($$ : int) <- pure (d - '0' as int)
     pure $$
 
P026.Natural : Grammar int =
  do (ds : [int]) <- Many[ 1 .. ] P026.Digit
     ($$ : int) <- pure (P026.numBase [int] (uint 64) int 10 ds)
     pure $$
 
P026.Frac (n : uint 64) (w : P026.Number) : Grammar P026.Number =
  do (ds : [int]) <- do @MatchBytes "."
                        ($$ : [int]) <- Many[ n .. ] P026.Digit
                        pure $$
     ($$ : P026.Number) <- pure (for ((val : P026.Number) = w; (d : int) in ds)
                                   let num = (10 * (val.num)) + d in
                                   let exp = (val.exp) - 1 in
                                   {num = num,
                                    exp = exp})
     pure $$
 
P026.UnsignedNumber : Grammar P026.Number =
  Choose fair
    { do (n : int) <- P026.Natural
         (val : P026.Number) <- pure let num = n in
                                     let exp = 0 in
                                     {num = num,
                                      exp = exp}
         ($$ : P026.Number) <- Choose biased
                                 { P026.Frac 0 val
                                 | pure val
                                 }
         pure $$
    | P026.Frac 1 let num = 0 in
                  let exp = 0 in
                  {num = num,
                   exp = exp}
    }
 
P026.Number : Grammar P026.Number =
  P026.Token P026.Number do (sign : P026.Sign) <- P026.Sign
                            (n : P026.Number) <- P026.UnsignedNumber
                            ($$ : P026.Number) <- Choose fair
                                                    { do case sign is
                                                           { {| pos = _59 |} -> pure {}
                                                           }
                                                         ($$ : P026.Number) <- pure n
                                                         pure $$
                                                    | do case sign is
                                                           { {| neg = _61 |} -> pure {}
                                                           }
                                                         ($$ : P026.Number) <- pure let num = 0 - (n.num) in
                                                                                    let exp = n.exp in
                                                                                    {num = num,
                                                                                     exp = exp}
                                                         pure $$
                                                    }
                            pure $$
 
P026.Main : Grammar P026.Main =
  do (x : [P026.Number]) <- Many[] P026.Number
     END
     pure {x = x}
 
P026.Between_76 ?a0 (open : [uint 8]) (close : [uint 8]) (P : Grammar {}) : Grammar {} =
  do P026.KW_73 [uint 8] (@MatchBytes open)
     P
     P026.KW_73 [uint 8] (@MatchBytes close)
 
P026.Only_81 ?a0 (P : Grammar {}) : Grammar {} =
  do P
     END
 
P026.Sign_84 : Grammar {} =
  Choose fair
    { {- pos -} Choose fair
                  { @MatchBytes "+"
                  | @MatchBytes ""
                  }
    | {- neg -} @MatchBytes "-"
    }
 
P026.Digit_85 : Grammar {} =
  @Match ('0' .. '9')
 
P026.Natural_86 : Grammar {} =
  @Many[ 1 .. ] P026.Digit_85
 
P026.Number_87 : Grammar {} =
  P026.Token_70 P026.Number do (sign : P026.Sign) <- P026.Sign
                               do P026.UnsignedNumber
                                  pure {}
                               Choose fair
                                 { case sign is
                                     { {| pos = _59 |} -> pure {}
                                     }
                                 | case sign is
                                     { {| neg = _61 |} -> pure {}
                                     }
                                 }
 
P026.Frac_89 (n : uint 64) : Grammar {} =
  do @MatchBytes "."
     @Many[ n .. ] P026.Digit_85
 
P026.UnsignedNumber_91 : Grammar {} =
  Choose fair
    { do P026.Natural_86
         Choose biased
           { P026.Frac_89 0
           | pure {}
           }
    | P026.Frac_89 1
    }
 
P026.Main_92 : Grammar {} =
  do @Many[] P026.Number_87
     END
