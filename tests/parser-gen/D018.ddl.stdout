[WARNING] ./D018.ddl:123:3--123:43:
            Using unbiased choice may be inefficient.
[WARNING] ./D018.ddl:92:5--93:13:
            Using unbiased choice may be inefficient.
[WARNING] ./D018.ddl:92:5--94:26:
            Using unbiased choice may be inefficient.
[WARNING] ./D018.ddl:109:6--110:17:
            Using unbiased choice may be inefficient.
[WARNING] ./D018.ddl:108:6--110:17:
            Using unbiased choice may be inefficient.
[WARNING] ./D018.ddl:107:6--110:17:
            Using unbiased choice may be inefficient.
[WARNING] ./D018.ddl:106:6--110:17:
            Using unbiased choice may be inefficient.
[WARNING] ./D018.ddl:105:6--110:17:
            Using unbiased choice may be inefficient.
[WARNING] ./D018.ddl:104:6--110:17:
            Using unbiased choice may be inefficient.
[WARNING] ./D018.ddl:103:6--110:17:
            Using unbiased choice may be inefficient.
[WARNING] ./D018.ddl:102:6--110:17:
            Using unbiased choice may be inefficient.
[WARNING] ./D018.ddl:100:4--111:3:
            Using unbiased choice may be inefficient.
[WARNING] ./D018.ddl:31:5--32:27:
            Using unbiased choice may be inefficient.
[WARNING] ./D018.ddl:5:29--5:46:
            Using unbiased choice may be inefficient.
module D018
 
--- Imports:
 
--- Type defs:
type D018.Number = { num: int
                   ; exp: int
                   }
 
type D018.Ref = { obj: int
                ; gen: int
                }
 
rec
  type D018.Value = Choose { array: [D018.Value]
                           ; bool: bool
                           ; dict: Map [uint 8] D018.Value
                           ; name: [uint 8]
                           ; null: {}
                           ; number: D018.Number
                           ; ref: D018.Ref
                           ; string: [uint 8]
                           }
 
type D018.Dict0 = { key: [uint 8]
                  ; value: D018.Value
                  }
 
type D018.Sign = Choose { pos: {}
                        ; neg: {}
                        }
 
type D018.Main = { x: [D018.Value]
                 }
 
--- Rules:
 
D018.$lf : ByteClass =
  {10}
 
D018.$cr : ByteClass =
  {13}
 
D018.$simpleWS : ByteClass =
  (({0} | {9}) | {12}) | {32}
 
D018.SimpleEOL : Grammar (uint 8) =
  Choose fair
    { do @Match D018.$cr
         ($$ : uint 8) <- Match D018.$lf
         pure $$
    | Match D018.$lf
    }
 
D018.EOL : Grammar (uint 8) =
  Choose biased
    { D018.SimpleEOL
    | Match D018.$cr
    }
 
D018.Comment : Grammar (uint 8) =
  do @MatchBytes "%"
     @Many[] @Match (!(D018.$lf | D018.$cr))
     ($$ : uint 8) <- D018.EOL
     pure $$
 
D018.AnyWS : Grammar (uint 8) =
  Choose biased
    { Choose biased
        { Match D018.$simpleWS
        | D018.Comment
        }
    | D018.EOL
    }
 
D018.SimpleEOL_ : Grammar {} =
  Choose fair
    { do @Match D018.$cr
         @Match D018.$lf
    | @Match D018.$lf
    }
 
D018.EOL_ : Grammar {} =
  Choose biased
    { D018.SimpleEOL_
    | @Match D018.$cr
    }
 
D018.Comment_ : Grammar {} =
  do @MatchBytes "%"
     @Many[] @Match (!(D018.$lf | D018.$cr))
     D018.EOL_
 
D018.AnyWS_ : Grammar {} =
  Choose biased
    { Choose biased
        { @Match D018.$simpleWS
        | D018.Comment_
        }
    | D018.EOL_
    }
 
D018.Token ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do ($$ : ?a0) <- P
     @Many[] D018.AnyWS_
     pure $$
 
D018.Token_ ?a0 (P_ : Grammar {}) : Grammar {} =
  do P_
     @Many[] D018.AnyWS_
 
D018.KW (x : [uint 8]) : Grammar {} =
  D018.Token_ [uint 8] (@MatchBytes x)
 
D018.KW_ (x : [uint 8]) : Grammar {} =
  D018.Token_ [uint 8] (@MatchBytes x)
 
D018.Between ?a0 (open : [uint 8]) (close : [uint 8]) (P : Grammar ?a0) : Grammar ?a0 =
  do D018.KW_ open
     ($$ : ?a0) <- P
     D018.KW_ close
     pure $$
 
D018.numBase ?a0 ?a1 ?a2 (Literal 0 ?a2) (HasKey ?a0 ?a1) (HasElement ?a0 ?a2) (Traversable ?a0) (Arith ?a2) (base : ?a2) (ds : ?a0) : ?a2 =
  for ((val : ?a2) = 0; (d : ?a2) in ds)
    ((val * base) + d)
 
D018.Only ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do ($$ : ?a0) <- P
     END
     pure $$
 
D018.When ?a0 ?a1 (P : Grammar ?a1) (x : ?a0) : Grammar ?a0 =
  do do P
        pure {}
     ($$ : ?a0) <- pure x
     pure $$
 
D018.Guard (p : bool) : Grammar {} =
  case p is
    { true -> pure {}
    }
 
D018.Bool : Grammar bool =
  Choose fair
    { D018.When bool {} (D018.KW "true") true
    | D018.When bool {} (D018.KW "false") false
    }
 
D018.Sign : Grammar D018.Sign =
  Choose biased
    { {- neg -} do (_90 : {}) <- @MatchBytes "-"
                   pure {neg: _90}
    | {- pos -} do (_91 : {}) <- @MatchBytes "+"
                   pure {pos: _91}
    | {- pos -} do (_92 : {}) <- pure {}
                   pure {pos: _92}
    }
 
D018.Digit : Grammar int =
  do (_94 : uint 8) <- do (_93 : uint 8) <- Match ('0' .. '9')
                          pure (_93 - '0')
     pure (_94 as int)
 
D018.Natural : Grammar int =
  do (_95 : [int]) <- Many[ 1 .. ] D018.Digit
     pure (D018.numBase [int] (uint 64) int 10 _95)
 
D018.Frac (n : uint 64) (w : D018.Number) : Grammar D018.Number =
  do @MatchBytes "."
     (ds : [int]) <- Many[ n .. ] D018.Digit
     ($$ : D018.Number) <- pure (for ((val : D018.Number) = w; (d : int) in ds)
                                   let num = (10 * (val.num)) + d in
                                   let exp = (val.exp) - 1 in
                                   {num = num,
                                    exp = exp})
     pure $$
 
D018.UnsignedLeadDigits : Grammar D018.Number =
  do (n : int) <- D018.Natural
     (val : D018.Number) <- pure let num = n in
                                 let exp = 0 in
                                 {num = num,
                                  exp = exp}
     ($$ : D018.Number) <- Choose biased
                             { D018.Frac 0 val
                             | pure val
                             }
     pure $$
 
D018.UnsignedNumber : Grammar D018.Number =
  Choose biased
    { D018.UnsignedLeadDigits
    | D018.Frac 1 let num = 0 in
                  let exp = 0 in
                  {num = num,
                   exp = exp}
    }
 
D018.Number : Grammar D018.Number =
  D018.Token D018.Number do (sign : D018.Sign) <- D018.Sign
                            (n : D018.Number) <- D018.UnsignedNumber
                            ($$ : D018.Number) <- case sign is
                                                    { {| pos = _ |} -> {- case branch  {| pos = _ |} -} pure n
                                                    ; {| neg = _ |} -> {- case branch  {| neg = _ |} -} do (num : int) <- pure (0 - (n.num))
                                                                                                           (exp : int) <- pure (n.exp)
                                                                                                           pure {num = num,
                                                                                                                 exp = exp}
                                                    }
                            pure $$
 
D018.OctDigit : Grammar int =
  do (_100 : uint 8) <- do (_99 : uint 8) <- Match ('0' .. '7')
                           pure (_99 - '0')
     pure (_100 as int)
 
D018.HexDigit : Grammar int =
  Choose biased
    { D018.Digit
    | Choose biased
        { do (_103 : uint 8) <- do (_102 : uint 8) <- do (_101 : uint 8) <- Match ('a' .. 'f')
                                                         pure (10 + _101)
                                   pure (_102 - 'a')
             pure (_103 as int)
        | do (_106 : uint 8) <- do (_105 : uint 8) <- do (_104 : uint 8) <- Match ('A' .. 'F')
                                                         pure (10 + _104)
                                   pure (_105 - 'A')
             pure (_106 as int)
        }
    }
 
D018.Guard_ (p : bool) : Grammar {} =
  case p is
    { true -> pure {}
    }
 
D018.NumberAsNat (x : D018.Number) : Grammar int =
  do D018.Guard_ (if (0 <= (x.num)) then (x.exp) == 0 else false)
     ($$ : int) <- pure (x.num)
     pure $$
 
D018.StringNumEsc : Grammar [uint 8] =
  do (_110 : uint 8) <- do (_109 : int) <- do (_108 : [int]) <- Many[ 1 .. 3 ] D018.OctDigit
                                              pure (D018.numBase [int] (uint 64) int 8 _108)
                           pure (_109 as uint 8)
     pure [_110]
 
D018.StringEsc : Grammar [uint 8] =
  do @MatchBytes "\\"
     ($$ : [uint 8]) <- Choose fair
                          { D018.When [uint 8] [uint 8] (MatchBytes "n") "\n"
                          | Choose fair
                              { D018.When [uint 8] [uint 8] (MatchBytes "r") "\r"
                              | Choose fair
                                  { D018.When [uint 8] [uint 8] (MatchBytes "t") "\t"
                                  | Choose fair
                                      { D018.When [uint 8] [uint 8] (MatchBytes "b") "\b"
                                      | Choose fair
                                          { D018.When [uint 8] [uint 8] (MatchBytes "f") "\f"
                                          | Choose fair
                                              { D018.When [uint 8] [uint 8] (MatchBytes "(") "("
                                              | Choose fair
                                                  { D018.When [uint 8] [uint 8] (MatchBytes ")") ")"
                                                  | Choose fair
                                                      { D018.When [uint 8] [uint 8] (MatchBytes "\\") "\\"
                                                      | Choose fair
                                                          { D018.When [uint 8] (uint 8) D018.EOL ""
                                                          | D018.StringNumEsc
                                                          }
                                                      }
                                                  }
                                              }
                                          }
                                      }
                                  }
                              }
                          }
     pure $$
 
rec value
  D018.StringChars : Grammar [uint 8] =
    do (_112 : [[uint 8]]) <- Many[] D018.StringChunk
       pure (concat _112)
   
  D018.StringInParens : Grammar [uint 8] =
    do (_116 : [[uint 8]]) <- do (_113 : [uint 8]) <- MatchBytes "("
                                 (_114 : [uint 8]) <- D018.StringChars
                                 (_115 : [uint 8]) <- MatchBytes ")"
                                 pure [_113,
                                       _114,
                                       _115]
       pure (concat _116)
   
  D018.StringChunk : Grammar [uint 8] =
    Choose fair
      { Choose fair
          { D018.StringInParens
          | D018.StringEsc
          }
      | Many[ 1 .. ] Match (!"\\()")
      }
 
D018.String : Grammar [uint 8] =
  D018.Between [uint 8] "(" ")" D018.StringChars
 
D018.HexStringNum2 : Grammar (uint 8) =
  do (_118 : int) <- do (_117 : [int]) <- Many[2] D018.Token int D018.HexDigit
                        pure (D018.numBase [int] (uint 64) int 16 _117)
     pure (_118 as uint 8)
 
D018.HexStringNum1 : Grammar (uint 8) =
  do (_120 : int) <- do (_119 : int) <- D018.Token int D018.HexDigit
                        pure (16 * _119)
     pure (_120 as uint 8)
 
D018.HexString : Grammar [uint 8] =
  D018.Between [uint 8] "<" ">" do (front : [uint 8]) <- Many[] D018.HexStringNum2
                                   ($$ : [uint 8]) <- Choose fair
                                                        { do (_124 : [[uint 8]]) <- do (_123 : [uint 8]) <- do (_122 : uint 8) <- D018.HexStringNum1
                                                                                                               pure [_122]
                                                                                       pure [front,
                                                                                             _123]
                                                             pure (concat _124)
                                                        | pure front
                                                        }
                                   pure $$
 
D018.NameEsc : Grammar (uint 8) =
  do @MatchBytes "#"
     ($$ : uint 8) <- do (_126 : int) <- do (_125 : [int]) <- Many[2] D018.HexDigit
                                            pure (D018.numBase [int] (uint 64) int 16 _125)
                         pure (_126 as uint 8)
     D018.Guard_ (0 < $$)
     pure $$
 
D018.NameChar : Grammar (uint 8) =
  Choose biased
    { Match (!"\NUL\t\n\f\r ()<>[]{}/%#")
    | D018.NameEsc
    }
 
D018.Name : Grammar [uint 8] =
  D018.Token [uint 8] do @MatchBytes "/"
                         ($$ : [uint 8]) <- Many[] D018.NameChar
                         pure $$
 
D018.Null : Grammar {} =
  D018.KW "null"
 
D018.Ref : Grammar D018.Ref =
  do (obj : int) <- D018.Token int D018.Natural
     (gen : int) <- D018.Token int D018.Natural
     D018.KW_ "R"
     pure {obj = obj,
           gen = gen}
 
rec value
  D018.Array : Grammar [D018.Value] =
    D018.Between [D018.Value] "[" "]" (Many[] D018.Value)
   
  D018.Dict : Grammar (Map [uint 8] D018.Value) =
    do (ents : [D018.Dict0]) <- D018.Between [D018.Dict0] "<<" ">>" (Many[] do (key : [uint 8]) <- D018.Name
                                                                               (value : D018.Value) <- D018.Value
                                                                               pure {key = key,
                                                                                     value = value})
       ($$ : Map [uint 8] D018.Value) <- for ((d : Map [uint 8] D018.Value) = empty; (e : D018.Dict0) in ents)
                                           (Insert (e.key) (e.value) d)
       pure $$
   
  D018.Value : Grammar D018.Value =
    Choose biased
      { {- null -} do (_129 : {}) <- D018.Null
                      pure {null: _129}
      | {- bool -} do (_130 : bool) <- D018.Bool
                      pure {bool: _130}
      | {- ref -} do (_131 : D018.Ref) <- D018.Ref
                     pure {ref: _131}
      | {- name -} do (_132 : [uint 8]) <- D018.Name
                      pure {name: _132}
      | {- string -} do (_133 : [uint 8]) <- D018.String
                        pure {string: _133}
      | {- string -} do (_134 : [uint 8]) <- D018.HexString
                        pure {string: _134}
      | {- number -} do (_135 : D018.Number) <- D018.Number
                        pure {number: _135}
      | {- array -} do (_136 : [D018.Value]) <- D018.Array
                       pure {array: _136}
      | {- dict -} do (_137 : Map [uint 8] D018.Value) <- D018.Dict
                      pure {dict: _137}
      }
 
D018.Main : Grammar D018.Main =
  do (x : [D018.Value]) <- Many[] D018.Value
     END
     pure {x = x}
 
D018.Between_ ?a0 (open : [uint 8]) (close : [uint 8]) (P_ : Grammar {}) : Grammar {} =
  do D018.KW_ open
     P_
     D018.KW_ close
 
D018.Only_ ?a0 (P_ : Grammar {}) : Grammar {} =
  do P_
     END
 
D018.When_ ?a0 ?a1 (P_ : Grammar {}) : Grammar {} =
  P_
 
D018.Bool_ : Grammar {} =
  Choose fair
    { D018.When_ bool {} (D018.KW_ "true")
    | D018.When_ bool {} (D018.KW_ "false")
    }
 
D018.Sign_ : Grammar {} =
  Choose biased
    { {- neg -} @MatchBytes "-"
    | {- pos -} @MatchBytes "+"
    | {- pos -} pure {}
    }
 
D018.Digit_ : Grammar {} =
  @Match ('0' .. '9')
 
D018.Natural_ : Grammar {} =
  @Many[ 1 .. ] D018.Digit_
 
D018.Number_ : Grammar {} =
  D018.Token_ D018.Number do (sign : D018.Sign) <- D018.Sign
                             do D018.UnsignedNumber
                                pure {}
                             case sign is
                               { {| pos = _ |} -> {- case branch  {| pos = _ |} -} pure {}
                               ; {| neg = _ |} -> {- case branch  {| neg = _ |} -} pure {}
                               }
 
D018.Frac_ (n : uint 64) : Grammar {} =
  do @MatchBytes "."
     @Many[ n .. ] D018.Digit_
 
D018.UnsignedLeadDigits_ : Grammar {} =
  do D018.Natural_
     Choose biased
       { D018.Frac_ 0
       | pure {}
       }
 
D018.UnsignedNumber_ : Grammar {} =
  Choose biased
    { D018.UnsignedLeadDigits_
    | D018.Frac_ 1
    }
 
D018.OctDigit_ : Grammar {} =
  @Match ('0' .. '7')
 
D018.HexDigit_ : Grammar {} =
  Choose biased
    { D018.Digit_
    | Choose biased
        { @Match ('a' .. 'f')
        | @Match ('A' .. 'F')
        }
    }
 
D018.NumberAsNat_ (x : D018.Number) : Grammar {} =
  D018.Guard_ (if (0 <= (x.num)) then (x.exp) == 0 else false)
 
D018.StringNumEsc_ : Grammar {} =
  @Many[ 1 .. 3 ] D018.OctDigit_
 
D018.StringEsc_ : Grammar {} =
  do @MatchBytes "\\"
     Choose fair
       { D018.When_ [uint 8] [uint 8] (@MatchBytes "n")
       | Choose fair
           { D018.When_ [uint 8] [uint 8] (@MatchBytes "r")
           | Choose fair
               { D018.When_ [uint 8] [uint 8] (@MatchBytes "t")
               | Choose fair
                   { D018.When_ [uint 8] [uint 8] (@MatchBytes "b")
                   | Choose fair
                       { D018.When_ [uint 8] [uint 8] (@MatchBytes "f")
                       | Choose fair
                           { D018.When_ [uint 8] [uint 8] (@MatchBytes "(")
                           | Choose fair
                               { D018.When_ [uint 8] [uint 8] (@MatchBytes ")")
                               | Choose fair
                                   { D018.When_ [uint 8] [uint 8] (@MatchBytes "\\")
                                   | Choose fair
                                       { D018.When_ [uint 8] (uint 8) D018.EOL_
                                       | D018.StringNumEsc_
                                       }
                                   }
                               }
                           }
                       }
                   }
               }
           }
       }
 
D018.StringChars_ : Grammar {} =
  @Many[] do D018.StringChunk
             pure {}
 
D018.StringInParens_ : Grammar {} =
  do @MatchBytes "("
     D018.StringChars_
     @MatchBytes ")"
 
D018.StringChunk_ : Grammar {} =
  Choose fair
    { Choose fair
        { D018.StringInParens_
        | D018.StringEsc_
        }
    | @Many[ 1 .. ] @Match (!"\\()")
    }
 
D018.String_ : Grammar {} =
  D018.Between_ [uint 8] "(" ")" D018.StringChars_
 
D018.HexStringNum2_ : Grammar {} =
  @Many[2] D018.Token_ int D018.HexDigit_
 
D018.HexStringNum1_ : Grammar {} =
  D018.Token_ int D018.HexDigit_
 
D018.HexString_ : Grammar {} =
  D018.Between_ [uint 8] "<" ">" do @Many[] D018.HexStringNum2_
                                    Choose fair
                                      { D018.HexStringNum1_
                                      | pure {}
                                      }
 
D018.NameEsc_ : Grammar {} =
  do @MatchBytes "#"
     ($$ : uint 8) <- do (_126 : int) <- do (_125 : [int]) <- Many[2] D018.HexDigit
                                            pure (D018.numBase [int] (uint 64) int 16 _125)
                         pure (_126 as uint 8)
     D018.Guard_ (0 < $$)
 
D018.NameChar_ : Grammar {} =
  Choose biased
    { @Match (!"\NUL\t\n\f\r ()<>[]{}/%#")
    | D018.NameEsc_
    }
 
D018.Name_ : Grammar {} =
  D018.Token_ [uint 8] do @MatchBytes "/"
                          @Many[] D018.NameChar_
 
D018.Null_ : Grammar {} =
  D018.KW_ "null"
 
D018.Ref_ : Grammar {} =
  do D018.Token_ int D018.Natural_
     D018.Token_ int D018.Natural_
     D018.KW_ "R"
 
D018.Array_ : Grammar {} =
  D018.Between_ [D018.Value] "[" "]" (@Many[] do D018.Value
                                                 pure {})
 
D018.Dict_ : Grammar {} =
  do (ents : [D018.Dict0]) <- D018.Between [D018.Dict0] "<<" ">>" (Many[] do (key : [uint 8]) <- D018.Name
                                                                             (value : D018.Value) <- D018.Value
                                                                             pure {key = key,
                                                                                   value = value})
     for ((d : Map [uint 8] D018.Value) = empty; (e : D018.Dict0) in ents)
       (Insert (e.key) (e.value) d)
     pure {}
 
D018.Value_ : Grammar {} =
  Choose biased
    { {- null -} D018.Null_
    | {- bool -} D018.Bool_
    | {- ref -} D018.Ref_
    | {- name -} D018.Name_
    | {- string -} D018.String_
    | {- string -} D018.HexString_
    | {- number -} D018.Number_
    | {- array -} D018.Array_
    | {- dict -} D018.Dict_
    }
 
D018.Main_ : Grammar {} =
  do @Many[] D018.Value_
     END
