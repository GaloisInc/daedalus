module D011
 
--- Imports:
 
--- Type defs:
type D011.FL = Choose { unknown_length: [uint 8]
                      ; file_length: int
                      }
 
type D011.Main = { b1: D011.FL
                 ; b2: int
                 }
 
--- Rules:
 
D011.numBase (base : int) (ds : [int]) : int =
  for ((val : int) = 0; (d : int) in ds)
    ((val * base) + d)
 
D011.Numeral : Grammar (uint 8) =
  Match ('0' .. '9')
 
D011.Digit : Grammar int =
  do (d : uint 8) <- D011.Numeral
     ($$ : int) <- pure (d - '0' as int)
     pure $$
 
D011.UnsignedNum (digs : uint 64) : Grammar int =
  do (ds : [int]) <- Many[digs] D011.Digit
     ($$ : int) <- pure (D011.numBase 10 ds)
     pure $$
 
D011.FL : Grammar D011.FL =
  Choose biased
    { {- unknown_length -} do (_17 : [uint 8]) <- Many[12] Match {'9'}
                              pure {unknown_length: _17}
    | {- file_length -} do (_18 : int) <- D011.UnsignedNum 12
                           pure {file_length: _18}
    }
 
D011.Main : Grammar D011.Main =
  do (b1 : D011.FL) <- D011.FL
     (b2 : int) <- D011.UnsignedNum 6
     pure {b1 = b1,
           b2 = b2}
 
D011.Numeral_19 : Grammar {} =
  @Match ('0' .. '9')
 
D011.Digit_20 : Grammar {} =
  D011.Numeral_19
 
D011.UnsignedNum_21 (digs : uint 64) : Grammar {} =
  @Many[digs] D011.Digit_20
 
D011.FL_23 : Grammar {} =
  Choose biased
    { {- unknown_length -} @Many[12] @Match {'9'}
    | {- file_length -} D011.UnsignedNum_21 12
    }
 
D011.Main_24 : Grammar {} =
  do D011.FL_23
     D011.UnsignedNum_21 6
