module P018
 
--- Imports:
 
--- Type defs:
type P018.Main = { w1: [uint 8]
                 ; w2: [uint 8]
                 ; w3: [uint 8]
                 ; w4: [uint 8]
                 }
 
--- Rules:
 
P018.length1 (w : [uint 8]) : int =
  for ((r : int) = 0; (s : uint 8) in w)
    (r + 1)
 
P018.Word : Grammar [uint 8] =
  do ($$ : [uint 8]) <- Many[] Match ('a' .. 'z')
     @Match {' '}
     pure $$
 
P018.Assert (p : bool) : Grammar {} =
  case p is
    { true -> pure {}
    }
 
P018.NotAssert (p : bool) : Grammar {} =
  case p is
    { false -> pure {}
    }
 
P018.Assert_ (p : bool) : Grammar {} =
  case p is
    { true -> pure {}
    }
 
P018.NotAssert_ (p : bool) : Grammar {} =
  case p is
    { false -> pure {}
    }
 
P018.Main : Grammar P018.Main =
  do (w1 : [uint 8]) <- P018.Word
     (w2 : [uint 8]) <- P018.Word
     @MatchBytes "||| "
     P018.Assert_ ((P018.length1 w1) == (P018.length1 w2))
     (w3 : [uint 8]) <- P018.Word
     (w4 : [uint 8]) <- P018.Word
     P018.NotAssert_ ((P018.length1 w3) == (P018.length1 w4))
     pure {w1 = w1,
           w2 = w2,
           w3 = w3,
           w4 = w4}
 
P018.Word_ : Grammar {} =
  do @Many[] @Match ('a' .. 'z')
     @Match {' '}
 
P018.Main_ : Grammar {} =
  do (w1 : [uint 8]) <- P018.Word
     (w2 : [uint 8]) <- P018.Word
     @MatchBytes "||| "
     P018.Assert_ ((P018.length1 w1) == (P018.length1 w2))
     (w3 : [uint 8]) <- P018.Word
     (w4 : [uint 8]) <- P018.Word
     P018.NotAssert_ ((P018.length1 w3) == (P018.length1 w4))
