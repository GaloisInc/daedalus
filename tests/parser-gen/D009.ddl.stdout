module D009
 
--- Imports:
 
--- Type defs:
type D009.Main0 = Choose { y: [uint 8]
                         ; x: [uint 8]
                         }
 
--- Rules:
 
D009.Chunk ?a0 (n : uint 64) (P : Grammar ?a0) : Grammar ?a0 =
  do (cur : Stream) <- CurrentStream
     (this : Stream) <- StreamLen n cur
     (next : Stream) <- StreamOff n cur
     SetStream this
     ($$ : ?a0) <- P
     SetStream next
     pure $$
 
D009.PadWSpaces ?a0 (n : uint 64) (P : Grammar ?a0) : Grammar ?a0 =
  D009.Chunk ?a0 n do ($$ : ?a0) <- P
                      @Many[] @Match {' '}
                      END
                      pure $$
 
D009._Chunk ?a0 (n : uint 64) (_P : Grammar {}) : Grammar {} =
  do (cur : Stream) <- CurrentStream
     (this : Stream) <- StreamLen n cur
     (next : Stream) <- StreamOff n cur
     SetStream this
     _P
     SetStream next
 
D009._PadWSpaces ?a0 (n : uint 64) (_P : Grammar {}) : Grammar {} =
  D009._Chunk ?a0 n do _P
                       @Many[] @Match {' '}
                       END
 
D009.Main : Grammar {} =
  do Choose fair
       { {- x -} D009._PadWSpaces [uint 8] 3 (@MatchBytes "ab")
       | {- y -} D009._PadWSpaces [uint 8] 3 (@MatchBytes "ac")
       }
     ($$ : {}) <- END
     pure $$
 
D009._Main : Grammar {} =
  do Choose fair
       { {- x -} D009._PadWSpaces [uint 8] 3 (@MatchBytes "ab")
       | {- y -} D009._PadWSpaces [uint 8] 3 (@MatchBytes "ac")
       }
     END
