module P016
 
--- Imports:
 
--- Type defs:
type P016.A = { a: [uint 8]
              }
 
type P016.Main = { x: P016.A
                 ; y: int
                 ; z: uint 8
                 }
 
--- Rules:
 
P016.$digit : ByteClass =
  '0' .. '9'
 
P016.A : Grammar P016.A =
  do (a : [uint 8]) <- Many[] Match P016.$digit
     @Match {'|'}
     pure {a = a}
 
P016.Main : Grammar P016.Main =
  do (x : P016.A) <- P016.A
     (y : int) <- for ((r : int) = 0; (b : uint 8) in x.a)
                    do (c : uint 8) <- Match UInt8
                       ($$ : int) <- pure ((c as int) + r)
                       pure $$
     (z : uint 8) <- Match UInt8
     pure {x = x,
           y = y,
           z = z}
 
P016._A : Grammar {} =
  do @Many[] @Match P016.$digit
     @Match {'|'}
 
P016._Main : Grammar {} =
  do (x : P016.A) <- P016.A
     for ((r : {}) = {}; (b : uint 8) in x.a)
       (@Match UInt8)
     @Match UInt8
