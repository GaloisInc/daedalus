module D022.todo
 
--- Imports:
 
--- Type defs:
type D022.todo.FrameComponent = { identifier: uint 8
                                ; hoizontalSampling: uint 4
                                ; verticalSampling: uint 4
                                ; quantTableSel: uint 8
                                }
 
type D022.todo.SOFPayload = { samplePrecision: uint 8
                            ; numberOfLines: uint 16
                            ; numberOfSamplesPerLine: uint 16
                            ; components: [D022.todo.FrameComponent]
                            }
 
type D022.todo.SomeSOF = { sof: uint 4
                         ; data: D022.todo.SOFPayload
                         }
 
type D022.todo.SOSComponent = { id: uint 8
                              ; acTable: uint 4
                              ; dcTable: uint 4
                              }
 
type D022.todo.SOSHeader = { components: [D022.todo.SOSComponent]
                           ; ss: uint 8
                           ; se: uint 8
                           ; ah: uint 4
                           ; al: uint 4
                           }
 
type D022.todo.SOS = { header: D022.todo.SOSHeader
                     ; data: [[uint 8]]
                     }
 
type D022.todo.Segment = Choose { comment: [uint 8]
                                ; dri: uint 16
                                }
 
--- Rules:
 
D022.todo.Marker (x : uint 8) : Grammar [uint 8] =
  MatchBytes [0xFF,
              x]
 
D022.todo.SomeMarker (front : uint 4) : Grammar (uint 4) =
  do @Match {0xFF}
     (tag : uint 8) <- Match UInt8
     (upper : uint 4) <- pure (tag >> 4 as uint 4)
     case upper == front is
       { true -> pure {}
       }
     ($$ : uint 4) <- pure (tag as uint 4)
     pure $$
 
D022.todo.BE16 : Grammar (uint 16) =
  do (_65 : uint 8) <- Match UInt8
     (_66 : uint 8) <- Match UInt8
     pure (_65 # _66)
 
D022.todo.NonZero ?a0 (Literal 0 ?a0) (P : Grammar ?a0) : Grammar ?a0 =
  do ($$ : ?a0) <- P
     case 0 < $$ is
       { true -> pure {}
       }
     pure $$
 
D022.todo.Payload ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do (size : uint 64) <- do (_67 : uint 16) <- D022.todo.BE16
                            pure (_67 as uint 64)
     case 2 <= size is
       { true -> pure {}
       }
     (len : uint 64) <- pure (size - 2)
     (here : Stream) <- CurrentStream
     @StreamLen len here
     do (_68 : Stream) <- StreamLen len here
        SetStream _68
     ($$ : ?a0) <- P
     END
     do (_69 : Stream) <- StreamOff len here
        SetStream _69
     pure $$
 
D022.todo.SOI : Grammar [uint 8] =
  Choose biased
    { D022.todo.Marker 0xD8
    | Fail "Missing Start-of-Image"
    }
 
D022.todo.EOI : Grammar [uint 8] =
  Choose biased
    { D022.todo.Marker 0xD9
    | Fail "Missing End-of-Image"
    }
 
D022.todo.Marker_ (x : uint 8) : Grammar {} =
  @MatchBytes [0xFF,
               x]
 
D022.todo.COM : Grammar [uint 8] =
  do D022.todo.Marker_ 0xFE
     ($$ : [uint 8]) <- D022.todo.Payload [uint 8] (Many[] Match UInt8)
     pure $$
 
D022.todo.APP ?a0 (x : uint 4) (P : Grammar ?a0) : Grammar ?a0 =
  do D022.todo.Marker_ (0xE # x)
     ($$ : ?a0) <- D022.todo.Payload ?a0 P
     pure $$
 
D022.todo.FrameComponent : Grammar D022.todo.FrameComponent =
  do (identifier : uint 8) <- Match UInt8
     (samplingFactors : uint 8) <- Match UInt8
     (hoizontalSampling : uint 4) <- pure (samplingFactors >> 4 as uint 4)
     (verticalSampling : uint 4) <- pure (samplingFactors as uint 4)
     (quantTableSel : uint 8) <- Match UInt8
     pure {identifier = identifier,
           hoizontalSampling = hoizontalSampling,
           verticalSampling = verticalSampling,
           quantTableSel = quantTableSel}
 
D022.todo.SOFPayload : Grammar D022.todo.SOFPayload =
  D022.todo.Payload D022.todo.SOFPayload do (samplePrecision : uint 8) <- Match UInt8
                                            (numberOfLines : uint 16) <- D022.todo.BE16
                                            (numberOfSamplesPerLine : uint 16) <- D022.todo.BE16
                                            (comNumber : uint 64) <- do (_72 : uint 8) <- Match UInt8
                                                                        pure (_72 as uint 64)
                                            (components : [D022.todo.FrameComponent]) <- Many[comNumber] D022.todo.FrameComponent
                                            pure {samplePrecision = samplePrecision,
                                                  numberOfLines = numberOfLines,
                                                  numberOfSamplesPerLine = numberOfSamplesPerLine,
                                                  components = components}
 
D022.todo.SomeSOF : Grammar D022.todo.SomeSOF =
  do (sof : uint 4) <- D022.todo.SomeMarker 0xC
     case sof == 4 is
       { false -> pure {}
       }
     (data : D022.todo.SOFPayload) <- D022.todo.SOFPayload
     pure {sof = sof,
           data = data}
 
D022.todo.DRI : Grammar (uint 16) =
  do D022.todo.Marker_ 0xDD
     ($$ : uint 16) <- D022.todo.Payload (uint 16) D022.todo.BE16
     pure $$
 
D022.todo.SOSComponent : Grammar D022.todo.SOSComponent =
  do (id : uint 8) <- Match UInt8
     (table : uint 8) <- Match UInt8
     (acTable : uint 4) <- pure (table as uint 4)
     (dcTable : uint 4) <- pure (table >> 4 as uint 4)
     pure {id = id,
           acTable = acTable,
           dcTable = dcTable}
 
D022.todo.SOSHeader : Grammar D022.todo.SOSHeader =
  do (componentNum : uint 8) <- Match UInt8
     (components : [D022.todo.SOSComponent]) <- Many[componentNum as uint 64] D022.todo.SOSComponent
     (ss : uint 8) <- Match UInt8
     (se : uint 8) <- Match UInt8
     (a : uint 8) <- Match UInt8
     (ah : uint 4) <- pure (a >> 4 as uint 4)
     (al : uint 4) <- pure (a as uint 4)
     pure {components = components,
           ss = ss,
           se = se,
           ah = ah,
           al = al}
 
D022.todo.EntropyEncodedByte : Grammar (uint 8) =
  Choose biased
    { do ($$ : uint 8) <- Match {0xFF}
         @Match {0x00}
         pure $$
    | Match (!{0xFF})
    }
 
D022.todo.EntropyEncodedEntry : Grammar [uint 8] =
  Many[ 1 .. ] D022.todo.EntropyEncodedByte
 
D022.todo.SOS : Grammar D022.todo.SOS =
  do D022.todo.Marker_ 0xDA
     (header : D022.todo.SOSHeader) <- D022.todo.Payload D022.todo.SOSHeader D022.todo.SOSHeader
     (data : [[uint 8]]) <- Many[] D022.todo.EntropyEncodedEntry
     pure {header = header,
           data = data}
 
D022.todo.SomeRST : Grammar (uint 4) =
  do ($$ : uint 4) <- D022.todo.SomeMarker 0xD
     case $$ < 8 is
       { true -> pure {}
       }
     pure $$
 
D022.todo.Segment : Grammar D022.todo.Segment =
  Choose biased
    { {- comment -} do (_74 : [uint 8]) <- D022.todo.COM
                       pure {comment: _74}
    | {- dri -} do (_75 : uint 16) <- D022.todo.DRI
                   pure {dri: _75}
    }
 
D022.todo.SOI_ : Grammar {} =
  Choose biased
    { D022.todo.Marker_ 0xD8
    | Fail "Missing Start-of-Image"
    }
 
D022.todo.EOI_ : Grammar {} =
  Choose biased
    { D022.todo.Marker_ 0xD9
    | Fail "Missing End-of-Image"
    }
 
D022.todo.SomeJpeg : Grammar [D022.todo.Segment] =
  do D022.todo.SOI_
     ($$ : [D022.todo.Segment]) <- Many[] D022.todo.Segment
     D022.todo.EOI_
     pure $$
 
D022.todo.Payload_ ?a0 (P_ : Grammar {}) : Grammar {} =
  do (size : uint 64) <- do (_67 : uint 16) <- D022.todo.BE16
                            pure (_67 as uint 64)
     case 2 <= size is
       { true -> pure {}
       }
     (len : uint 64) <- pure (size - 2)
     (here : Stream) <- CurrentStream
     @StreamLen len here
     do (_68 : Stream) <- StreamLen len here
        SetStream _68
     P_
     END
     (_69 : Stream) <- StreamOff len here
     SetStream _69
 
D022.todo.COM_ : Grammar {} =
  do D022.todo.Marker_ 0xFE
     D022.todo.Payload_ [uint 8] (@Many[] @Match UInt8)
 
D022.todo.BE16_ : Grammar {} =
  do @Match UInt8
     @Match UInt8
 
D022.todo.DRI_ : Grammar {} =
  do D022.todo.Marker_ 0xDD
     D022.todo.Payload_ (uint 16) D022.todo.BE16_
 
D022.todo.Segment_ : Grammar {} =
  Choose biased
    { {- comment -} D022.todo.COM_
    | {- dri -} D022.todo.DRI_
    }
 
D022.todo.SomeJpeg_ : Grammar {} =
  do D022.todo.SOI_
     @Many[] D022.todo.Segment_
     D022.todo.EOI_
 
D022.todo.Main : Grammar {} =
  do D022.todo.SomeJpeg_
     ($$ : {}) <- END
     pure $$
 
D022.todo.SomeMarker_ (front : uint 4) : Grammar {} =
  do @Match {0xFF}
     (tag : uint 8) <- Match UInt8
     (upper : uint 4) <- pure (tag >> 4 as uint 4)
     case upper == front is
       { true -> pure {}
       }
 
D022.todo.NonZero_ ?a0 (Literal 0 ?a0) (P : Grammar ?a0) : Grammar {} =
  do ($$ : ?a0) <- P
     case 0 < $$ is
       { true -> pure {}
       }
 
D022.todo.APP_ ?a0 (x : uint 4) (P_ : Grammar {}) : Grammar {} =
  do D022.todo.Marker_ (0xE # x)
     D022.todo.Payload_ ?a0 P_
 
D022.todo.FrameComponent_ : Grammar {} =
  do @Match UInt8
     @Match UInt8
     @Match UInt8
 
D022.todo.SOFPayload_ : Grammar {} =
  D022.todo.Payload_ D022.todo.SOFPayload do @Match UInt8
                                             D022.todo.BE16_
                                             D022.todo.BE16_
                                             (comNumber : uint 64) <- do (_72 : uint 8) <- Match UInt8
                                                                         pure (_72 as uint 64)
                                             @Many[comNumber] D022.todo.FrameComponent_
 
D022.todo.SomeSOF_ : Grammar {} =
  do (sof : uint 4) <- D022.todo.SomeMarker 0xC
     case sof == 4 is
       { false -> pure {}
       }
     D022.todo.SOFPayload_
 
D022.todo.SOSComponent_ : Grammar {} =
  do @Match UInt8
     @Match UInt8
 
D022.todo.SOSHeader_ : Grammar {} =
  do (componentNum : uint 8) <- Match UInt8
     @Many[componentNum as uint 64] D022.todo.SOSComponent_
     @Match UInt8
     @Match UInt8
     @Match UInt8
 
D022.todo.EntropyEncodedByte_ : Grammar {} =
  Choose biased
    { do @Match {0xFF}
         @Match {0x00}
    | @Match (!{0xFF})
    }
 
D022.todo.EntropyEncodedEntry_ : Grammar {} =
  @Many[ 1 .. ] D022.todo.EntropyEncodedByte_
 
D022.todo.SOS_ : Grammar {} =
  do D022.todo.Marker_ 0xDA
     D022.todo.Payload_ D022.todo.SOSHeader D022.todo.SOSHeader_
     @Many[] D022.todo.EntropyEncodedEntry_
 
D022.todo.SomeRST_ : Grammar {} =
  do ($$ : uint 4) <- D022.todo.SomeMarker 0xD
     case $$ < 8 is
       { true -> pure {}
       }
 
D022.todo.Main_ : Grammar {} =
  do D022.todo.SomeJpeg_
     END
