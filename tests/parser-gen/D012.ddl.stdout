module D012
 
--- Imports:
 
--- Type defs:
type D012.RGB = { red: int
                ; green: int
                ; blue: int
                }
 
--- Rules:
 
D012.WS_21 : Grammar {} =
  @Match {0}
 
D012.Token ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do ($$ : ?a0) <- P
     @Many[ 1 .. ] D012.WS_21
     pure $$
 
D012.Digit : Grammar (uint 8) =
  do (d : uint 8) <- Match ('0' .. '9')
     ($$ : uint 8) <- pure (d - '0')
     pure $$
 
D012.addDigit ?a0 (Coerce safe ?a0 int) (val : int) (d : ?a0) : int =
  (10 * val) + (d as int)
 
D012.Natural : Grammar int =
  do (ds : [uint 8]) <- Many[ 1 .. ] D012.Digit
     ($$ : int) <- pure (for ((val : int) = 0; (d : uint 8) in ds)
                           (D012.addDigit (uint 8) val d))
     pure $$
 
D012.RGB : Grammar D012.RGB =
  do (red : int) <- D012.Token int D012.Natural
     (green : int) <- D012.Token int D012.Natural
     (blue : int) <- D012.Token int D012.Natural
     pure {red = red,
           green = green,
           blue = blue}
 
D012.WS : Grammar (uint 8) =
  Match {0}
 
D012.Token_22 ?a0 (P : Grammar {}) : Grammar {} =
  do P
     @Many[ 1 .. ] D012.WS_21
 
D012.Digit_25 : Grammar {} =
  @Match ('0' .. '9')
 
D012.Natural_26 : Grammar {} =
  @Many[ 1 .. ] D012.Digit_25
 
D012.RGB_27 : Grammar {} =
  do D012.Token_22 int D012.Natural_26
     D012.Token_22 int D012.Natural_26
     D012.Token_22 int D012.Natural_26
 
D012.Main : Grammar {} =
  do D012.RGB_27
     ($$ : {}) <- END
     pure $$
 
D012.Main_28 : Grammar {} =
  do D012.RGB_27
     END
