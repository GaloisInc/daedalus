module T046
 
--- Imports:
 
--- Type defs:
type T046.Main = { a1: int
                 ; a2: int
                 ; m: Map (uint 64) int
                 ; a3: int
                 ; a4: int
                 }
 
--- Rules:
 
T046.l1 ?a0 ?a1 (Traversable ?a0) (HasElement ?a0 int) (HasKey ?a0 ?a1) (xs : ?a0) : int =
  for ((s : int) = 0; (x : int) in xs)
    (s + x)
 
T046.l2 ?a0 ?a1 (Coerce safe ?a1 int) (Traversable ?a0) (HasElement ?a0 int) (HasKey ?a0 ?a1) (xs : ?a0) : int =
  for ((s : int) = 0; (k : ?a1), (x : int) in xs)
    ((s + x) + (k as int))
 
T046.ExampleMap : Grammar (Map (uint 64) int) =
  for ((s : Map (uint 64) int) = empty; (k : uint 64), (x : int) in [5,
                                                                     6,
                                                                     7])
    (Insert k x s)
 
T046.Main : Grammar T046.Main =
  do (a1 : int) <- pure (T046.l1 [int] (uint 64) [1,
                                                  2,
                                                  3])
     (a2 : int) <- pure (T046.l2 [int] (uint 64) [1,
                                                  2,
                                                  3])
     (m : Map (uint 64) int) <- T046.ExampleMap
     (a3 : int) <- pure (T046.l1 (Map (uint 64) int) (uint 64) m)
     (a4 : int) <- pure (T046.l2 (Map (uint 64) int) (uint 64) m)
     pure {a1 = a1,
           a2 = a2,
           m = m,
           a3 = a3,
           a4 = a4}
 
T046.ExampleMap_ : Grammar {} =
  do for ((s : Map (uint 64) int) = empty; (k : uint 64), (x : int) in [5,
                                                                        6,
                                                                        7])
       (Insert k x s)
     pure {}
 
T046.Main_ : Grammar {} =
  T046.ExampleMap_
