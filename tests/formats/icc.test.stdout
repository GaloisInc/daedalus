module ICC
 
--- Imports:
 
--- Type defs:
type ICC.VersionField = { major: uint 8
                        ; minor: uint 4
                        ; bugfix: uint 4
                        }
 
type ICC.ProfileClasses = Choose { abstract_profile: {}
                                 ; color_space_profile: {}
                                 ; device_link_profile: {}
                                 ; display_device_profile: {}
                                 ; input_device_profile: {}
                                 ; named_color_profile: {}
                                 ; output_device_profile: {}
                                 }
 
type ICC.DataColorSpaces = Choose { cielab_or_pcslab: {}
                                  ; cieluv: {}
                                  ; cieyxy: {}
                                  ; cmy: {}
                                  ; cmyk: {}
                                  ; eight_colour: {}
                                  ; eleven_colour: {}
                                  ; fifteen_colour: {}
                                  ; five_colour: {}
                                  ; four_colour: {}
                                  ; fourteen_colour: {}
                                  ; gray: {}
                                  ; hls: {}
                                  ; hsv: {}
                                  ; nciexyz_or_pcsxyz: {}
                                  ; nine_colour: {}
                                  ; rgb: {}
                                  ; seven_colour: {}
                                  ; six_colour: {}
                                  ; ten_colour: {}
                                  ; thirteen_colour: {}
                                  ; three_colour: {}
                                  ; twelve_colour: {}
                                  ; two_colour: {}
                                  ; ycbcr: {}
                                  }
 
type ICC.PrimaryPlatforms = Choose { sun_microsystems: {}
                                   ; silicon_graphics_inc: {}
                                   ; none: {}
                                   ; microsoft_corporation: {}
                                   ; apple_computer_inc: {}
                                   }
 
type ICC.RenderingIntent = Choose { saturation: {}
                                  ; perceptual: {}
                                  ; media_relative_colorimetric: {}
                                  ; icc_absolute_colorimetric: {}
                                  }
 
type ICC.XYZNumber = { x: uint 32
                     ; y: uint 32
                     ; z: uint 32
                     }
 
type ICC.DateTimeNumber = { year: uint 16
                          ; month: uint 16
                          ; day: uint 16
                          ; hour: uint 16
                          ; minute: uint 16
                          ; second: uint 16
                          }
 
type ICC.ProfileHeader = { size: uint 32
                         ; preferred_cmm_type: uint 32
                         ; version: ICC.VersionField
                         ; devce_class: ICC.ProfileClasses
                         ; color_space: ICC.DataColorSpaces
                         ; pcs: ICC.DataColorSpaces
                         ; creation_date_time: ICC.DateTimeNumber
                         ; primary_platform: ICC.PrimaryPlatforms
                         ; profile_flags: uint 32
                         ; device_manufacturer: uint 32
                         ; device_model: uint 32
                         ; device_attributes: uint 64
                         ; rendering_intent: ICC.RenderingIntent
                         ; illuminant: ICC.XYZNumber
                         ; creatior: uint 32
                         ; identifier: [uint 8]
                         ; reserved_data: [uint 8]
                         }
 
type ICC.TagSignature = Choose { A2B0: {}
                               ; A2B1: {}
                               ; A2B2: {}
                               ; A2B3: {}
                               ; A2M0: {}
                               ; B2A0: {}
                               ; B2A1: {}
                               ; B2A2: {}
                               ; B2D0: {}
                               ; B2D1: {}
                               ; B2D2: {}
                               ; B2D3: {}
                               ; D2B0: {}
                               ; D2B1: {}
                               ; D2B2: {}
                               ; D2B3: {}
                               ; bTRC: {}
                               ; bXYZ: {}
                               ; bcp0: {}
                               ; bcp1: {}
                               ; bcp2: {}
                               ; bcp3: {}
                               ; bsp0: {}
                               ; bsp1: {}
                               ; bsp2: {}
                               ; bsp3: {}
                               ; calt: {}
                               ; chad: {}
                               ; ciis: {}
                               ; clot: {}
                               ; clro: {}
                               ; clrt: {}
                               ; cprt: {}
                               ; desc: {}
                               ; dmdd: {}
                               ; dmnd: {}
                               ; gTRC: {}
                               ; gXYZ: {}
                               ; gamt: {}
                               ; kTRC: {}
                               ; lumi: {}
                               ; meas: {}
                               ; ncl2: {}
                               ; pre0: {}
                               ; pre1: {}
                               ; pre2: {}
                               ; pseq: {}
                               ; psid: {}
                               ; rTRC: {}
                               ; rXYZ: {}
                               ; resp: {}
                               ; rig0: {}
                               ; rig2: {}
                               ; targ: {}
                               ; tech: {}
                               ; view: {}
                               ; vued: {}
                               ; wtpt: {}
                               }
 
type ICC.TagEntry = { tag_signature: ICC.TagSignature
                    ; offset_to_data_element: uint 32
                    ; size_of_data_element: uint 32
                    }
 
type ICC.Main = { profileHeader: ICC.ProfileHeader
                ; tagTable: [ICC.TagEntry]
                }
 
type ICC.XYNumber = { x: uint 32
                    ; y: uint 32
                    }
 
type ICC.PositionNumber = { offset: uint 32
                          ; size: uint 32
                          }
 
type ICC.Response16Number = { device: uint 16
                            ; measurement: uint 32
                            }
 
type ICC.LutAToBType = { number_of_input_channels: uint 8
                       ; number_of_output_channels: uint 8
                       ; offset_first_B_curve: uint 32
                       ; offset_to_matrix: uint 32
                       ; offset_to_first_M_curve: uint 32
                       ; offset_to_CLUT: uint 32
                       ; offset_to_first_A_curve: uint 32
                       ; data: Stream
                       }
 
type ICC.MultiProcessElementsType = { number_of_input_channels: uint 16
                                    ; number_of_output_channels: uint 16
                                    ; number_of_processing_elements: uint 32
                                    ; n: uint 64
                                    ; elements: [Stream]
                                    }
 
type ICC.LutAB_or_multi = Choose { lutAB: ICC.LutAToBType
                                 ; mpe: ICC.MultiProcessElementsType
                                 }
 
type ICC.Lut8Type = { number_of_input_channels: uint 8
                    ; number_of_output_channels: uint 8
                    ; number_of_clut_grid_points: uint 8
                    ; encoded_e_parameters: [sint 32]
                    ; input_tables: Stream
                    ; clut_values: Stream
                    ; output_tables: Stream
                    }
 
type ICC.Lut16Type = { number_of_input_channels: uint 8
                     ; number_of_output_channels: uint 8
                     ; number_of_clut_grid_points: uint 8
                     ; encoded_e_parameters: [sint 32]
                     ; number_of_input_table_entries: uint 32
                     ; number_of_output_table_entries: uint 32
                     ; input_tables: Stream
                     ; clut_values: Stream
                     ; output_tables: Stream
                     }
 
type ICC.LutBToAType = { number_of_input_channels: uint 8
                       ; number_of_output_channels: uint 8
                       ; offset_first_B_curve: uint 32
                       ; offset_to_matrix: uint 32
                       ; offset_to_first_M_curve: uint 32
                       ; offset_to_CLUT: uint 32
                       ; offset_to_first_A_curve: uint 32
                       ; data: Stream
                       }
 
type ICC.Lut_8_16_AB_BA = Choose { lut16: ICC.Lut16Type
                                 ; lut8: ICC.Lut8Type
                                 ; lutAB: ICC.LutAToBType
                                 ; lutBA: ICC.LutBToAType
                                 }
 
type ICC.Lut_8_16_BA = Choose { lut16: ICC.Lut16Type
                              ; lut8: ICC.Lut8Type
                              ; lutBA: ICC.LutBToAType
                              }
 
type ICC.ParametricCurveType = { function: uint 16
                               ; parameters: [uint 32]
                               }
 
type ICC.SomeCurve = Choose { curve: [uint 16]
                            ; parametric_curve: ICC.ParametricCurveType
                            }
 
type ICC.UnicodeRecord = { language: uint 16
                         ; country: uint 16
                         ; data: Stream
                         }
 
type ICC.Colorant = { name: [uint 7]
                    ; pcs: [uint 16]
                    }
 
type ICC.ResponseCurve = { measurement_unit: uint 32
                         ; pcxyzs: [ICC.XYNumber]
                         ; response_arrays: [[ICC.Response16Number]]
                         }
 
type ICC.MeasurementType = { standard_observer: uint 32
                           ; nCIEXYZ: ICC.XYZNumber
                           ; geometry: uint 32
                           ; flare: uint 32
                           ; illuminant: uint 32
                           }
 
type ICC.ColorName = { name_root: [uint 7]
                     ; pcs_coords: [uint 16]
                     ; device_coords: [uint 16]
                     }
 
type ICC.NamedColor2Type = { vendor_specific: uint 32
                           ; prefix: [uint 7]
                           ; suffix: [uint 7]
                           ; names: [ICC.ColorName]
                           }
 
type ICC.ViewConditionsType = { illuminantXYZ: ICC.XYZNumber
                              ; surroundXYZ: ICC.XYZNumber
                              ; illuminant: uint 32
                              }
 
type ICC.Tag = Choose { view: ICC.ViewConditionsType
                      ; vued: [ICC.UnicodeRecord]
                      ; tech: [uint 8]
                      ; rig2: [uint 8]
                      ; rTRC: ICC.SomeCurve
                      ; rXYZ: [ICC.XYZNumber]
                      ; psid: {}
                      ; pseq: [uint 8]
                      ; desc: [ICC.UnicodeRecord]
                      ; pre2: ICC.Lut_8_16_BA
                      ; pre1: ICC.Lut_8_16_BA
                      ; pre0: ICC.Lut_8_16_AB_BA
                      ; rig0: [uint 8]
                      ; resp: [ICC.ResponseCurve]
                      ; ncl2: ICC.NamedColor2Type
                      ; wtpt: [ICC.XYZNumber]
                      ; meas: ICC.MeasurementType
                      ; lumi: [ICC.XYZNumber]
                      ; gTRC: ICC.SomeCurve
                      ; gXYZ: [ICC.XYZNumber]
                      ; kTRC: ICC.SomeCurve
                      ; gamt: ICC.Lut_8_16_BA
                      ; D2B3: ICC.MultiProcessElementsType
                      ; D2B2: ICC.MultiProcessElementsType
                      ; D2B1: ICC.MultiProcessElementsType
                      ; D2B0: ICC.MultiProcessElementsType
                      ; dmdd: [ICC.UnicodeRecord]
                      ; dmnd: [ICC.UnicodeRecord]
                      ; cprt: [ICC.UnicodeRecord]
                      ; ciis: [uint 8]
                      ; clot: [ICC.Colorant]
                      ; clrt: [ICC.Colorant]
                      ; clro: [uint 8]
                      ; chad: [uint 32]
                      ; targ: [uint 7]
                      ; calt: ICC.DateTimeNumber
                      ; B2D3: ICC.MultiProcessElementsType
                      ; B2D2: ICC.MultiProcessElementsType
                      ; B2D1: ICC.MultiProcessElementsType
                      ; B2D0: ICC.MultiProcessElementsType
                      ; B2A2: ICC.Lut_8_16_BA
                      ; B2A1: ICC.Lut_8_16_BA
                      ; B2A0: ICC.Lut_8_16_BA
                      ; bTRC: ICC.SomeCurve
                      ; bXYZ: [ICC.XYZNumber]
                      ; A2Mo: ICC.MultiProcessElementsType
                      ; A2B3: ICC.LutAB_or_multi
                      ; A2B2: ICC.LutAB_or_multi
                      ; A2B1: ICC.LutAB_or_multi
                      ; A2B0: ICC.LutAB_or_multi
                      }
 
type ICC.Lut_8_16_AB = Choose { lut16: ICC.Lut16Type
                              ; lut8: ICC.Lut8Type
                              ; lutAB: ICC.LutAToBType
                              }
 
type ICC.ChromaticityType = { phosphor_or_colorant: uint 16
                            ; cie_coords: [ICC.XYNumber]
                            }
 
type ICC.TagStructType = { struct_type_id: [uint 8]
                         }
 
--- Rules:
 
ICC.VersionField : Grammar ICC.VersionField =
  do (major : uint 8) <- GetByte
     (min_bf : uint 8) <- GetByte
     (minor : uint 4) <- pure (min_bf >> 4 as uint 4)
     (bugfix : uint 4) <- pure (min_bf as uint 4)
     @MatchBytes [0,
                  0]
     pure {major = major,
           minor = minor,
           bugfix = bugfix}
 
ICC.ProfileClasses : Grammar ICC.ProfileClasses =
  Choose biased
    { {- input_device_profile -} do (_232 : {}) <- @MatchBytes "scnr"
                                    pure {input_device_profile: _232}
    | {- display_device_profile -} do (_233 : {}) <- @MatchBytes "mntr"
                                      pure {display_device_profile: _233}
    | {- output_device_profile -} do (_234 : {}) <- @MatchBytes "prtr"
                                     pure {output_device_profile: _234}
    | {- device_link_profile -} do (_235 : {}) <- @MatchBytes "link"
                                   pure {device_link_profile: _235}
    | {- color_space_profile -} do (_236 : {}) <- @MatchBytes "spac"
                                   pure {color_space_profile: _236}
    | {- abstract_profile -} do (_237 : {}) <- @MatchBytes "abst"
                                pure {abstract_profile: _237}
    | {- named_color_profile -} do (_238 : {}) <- @MatchBytes "nmcl"
                                   pure {named_color_profile: _238}
    }
 
ICC.DataColorSpaces : Grammar ICC.DataColorSpaces =
  Choose biased
    { {- nciexyz_or_pcsxyz -} do (_239 : {}) <- @MatchBytes "XYZ "
                                 pure {nciexyz_or_pcsxyz: _239}
    | {- cielab_or_pcslab -} do (_240 : {}) <- @MatchBytes "Lab "
                                pure {cielab_or_pcslab: _240}
    | {- cieluv -} do (_241 : {}) <- @MatchBytes "Luv "
                      pure {cieluv: _241}
    | {- ycbcr -} do (_242 : {}) <- @MatchBytes "Ycbr"
                     pure {ycbcr: _242}
    | {- cieyxy -} do (_243 : {}) <- @MatchBytes "Yxy "
                      pure {cieyxy: _243}
    | {- rgb -} do (_244 : {}) <- @MatchBytes "RGB "
                   pure {rgb: _244}
    | {- gray -} do (_245 : {}) <- @MatchBytes "GRAY"
                    pure {gray: _245}
    | {- hsv -} do (_246 : {}) <- @MatchBytes "HSV "
                   pure {hsv: _246}
    | {- hls -} do (_247 : {}) <- @MatchBytes "HLS "
                   pure {hls: _247}
    | {- cmyk -} do (_248 : {}) <- @MatchBytes "CMYK"
                    pure {cmyk: _248}
    | {- cmy -} do (_249 : {}) <- @MatchBytes "CMY "
                   pure {cmy: _249}
    | {- two_colour -} do (_250 : {}) <- @MatchBytes "2CLR"
                          pure {two_colour: _250}
    | {- three_colour -} do (_251 : {}) <- @MatchBytes "3CLR"
                            pure {three_colour: _251}
    | {- four_colour -} do (_252 : {}) <- @MatchBytes "4CLR"
                           pure {four_colour: _252}
    | {- five_colour -} do (_253 : {}) <- @MatchBytes "5CLR"
                           pure {five_colour: _253}
    | {- six_colour -} do (_254 : {}) <- @MatchBytes "6CLR"
                          pure {six_colour: _254}
    | {- seven_colour -} do (_255 : {}) <- @MatchBytes "7CLR"
                            pure {seven_colour: _255}
    | {- eight_colour -} do (_256 : {}) <- @MatchBytes "8CLR"
                            pure {eight_colour: _256}
    | {- nine_colour -} do (_257 : {}) <- @MatchBytes "9CLR"
                           pure {nine_colour: _257}
    | {- ten_colour -} do (_258 : {}) <- @MatchBytes "ACLR"
                          pure {ten_colour: _258}
    | {- eleven_colour -} do (_259 : {}) <- @MatchBytes "BCLR"
                             pure {eleven_colour: _259}
    | {- twelve_colour -} do (_260 : {}) <- @MatchBytes "CCLR"
                             pure {twelve_colour: _260}
    | {- thirteen_colour -} do (_261 : {}) <- @MatchBytes "DCLR"
                               pure {thirteen_colour: _261}
    | {- fourteen_colour -} do (_262 : {}) <- @MatchBytes "ECLR"
                               pure {fourteen_colour: _262}
    | {- fifteen_colour -} do (_263 : {}) <- @MatchBytes "FCLR"
                              pure {fifteen_colour: _263}
    }
 
ICC.PrimaryPlatforms : Grammar ICC.PrimaryPlatforms =
  Choose biased
    { {- none -} do (_264 : {}) <- @MatchBytes [0,
                                                0,
                                                0,
                                                0]
                    pure {none: _264}
    | {- apple_computer_inc -} do (_265 : {}) <- @MatchBytes "APPL"
                                  pure {apple_computer_inc: _265}
    | {- microsoft_corporation -} do (_266 : {}) <- @MatchBytes "MSFT"
                                     pure {microsoft_corporation: _266}
    | {- silicon_graphics_inc -} do (_267 : {}) <- @MatchBytes "SGI "
                                    pure {silicon_graphics_inc: _267}
    | {- sun_microsystems -} do (_268 : {}) <- @MatchBytes "SUNW"
                                pure {sun_microsystems: _268}
    }
 
ICC.RenderingIntent : Grammar ICC.RenderingIntent =
  Choose biased
    { {- perceptual -} do (_269 : {}) <- @MatchBytes [0,
                                                      0,
                                                      0,
                                                      0]
                          pure {perceptual: _269}
    | {- media_relative_colorimetric -} do (_270 : {}) <- @MatchBytes [0,
                                                                       0,
                                                                       0,
                                                                       1]
                                           pure {media_relative_colorimetric: _270}
    | {- saturation -} do (_271 : {}) <- @MatchBytes [0,
                                                      0,
                                                      0,
                                                      2]
                          pure {saturation: _271}
    | {- icc_absolute_colorimetric -} do (_272 : {}) <- @MatchBytes [0,
                                                                     0,
                                                                     0,
                                                                     3]
                                         pure {icc_absolute_colorimetric: _272}
    }
 
ICC.BE16 : Grammar (uint 16) =
  do (_273 : uint 8) <- GetByte
     (_274 : uint 8) <- GetByte
     pure (_273 # _274)
 
ICC.BE32 : Grammar (uint 32) =
  do (_275 : uint 16) <- ICC.BE16
     (_276 : uint 16) <- ICC.BE16
     pure (_275 # _276)
 
ICC.XYZNumber : Grammar ICC.XYZNumber =
  do (x : uint 32) <- ICC.BE32
     (y : uint 32) <- ICC.BE32
     (z : uint 32) <- ICC.BE32
     pure {x = x,
           y = y,
           z = z}
 
ICC.DateTimeNumber : Grammar ICC.DateTimeNumber =
  do (year : uint 16) <- ICC.BE16
     (month : uint 16) <- ICC.BE16
     (day : uint 16) <- ICC.BE16
     (hour : uint 16) <- ICC.BE16
     (minute : uint 16) <- ICC.BE16
     (second : uint 16) <- ICC.BE16
     pure {year = year,
           month = month,
           day = day,
           hour = hour,
           minute = minute,
           second = second}
 
ICC.BE64 : Grammar (uint 64) =
  do (_277 : uint 32) <- ICC.BE32
     (_278 : uint 32) <- ICC.BE32
     pure (_277 # _278)
 
ICC.ProfileHeader : Grammar ICC.ProfileHeader =
  do (size : uint 32) <- ICC.BE32
     (preferred_cmm_type : uint 32) <- ICC.BE32
     (version : ICC.VersionField) <- ICC.VersionField
     (devce_class : ICC.ProfileClasses) <- ICC.ProfileClasses
     (color_space : ICC.DataColorSpaces) <- ICC.DataColorSpaces
     (pcs : ICC.DataColorSpaces) <- ICC.DataColorSpaces
     (creation_date_time : ICC.DateTimeNumber) <- ICC.DateTimeNumber
     @MatchBytes "acsp"
     (primary_platform : ICC.PrimaryPlatforms) <- ICC.PrimaryPlatforms
     (profile_flags : uint 32) <- ICC.BE32
     (device_manufacturer : uint 32) <- ICC.BE32
     (device_model : uint 32) <- ICC.BE32
     (device_attributes : uint 64) <- ICC.BE64
     (rendering_intent : ICC.RenderingIntent) <- ICC.RenderingIntent
     (illuminant : ICC.XYZNumber) <- ICC.XYZNumber
     (creatior : uint 32) <- ICC.BE32
     (identifier : [uint 8]) <- Many[16] GetByte
     (reserved_data : [uint 8]) <- Many[28] Match {'\NUL'}
     pure {size = size,
           preferred_cmm_type = preferred_cmm_type,
           version = version,
           devce_class = devce_class,
           color_space = color_space,
           pcs = pcs,
           creation_date_time = creation_date_time,
           primary_platform = primary_platform,
           profile_flags = profile_flags,
           device_manufacturer = device_manufacturer,
           device_model = device_model,
           device_attributes = device_attributes,
           rendering_intent = rendering_intent,
           illuminant = illuminant,
           creatior = creatior,
           identifier = identifier,
           reserved_data = reserved_data}
 
ICC.TagSignature : Grammar ICC.TagSignature =
  Choose biased
    { {- A2B0 -} do (_279 : {}) <- @MatchBytes "A2B0"
                    pure {A2B0: _279}
    | {- A2B1 -} do (_280 : {}) <- @MatchBytes "A2B1"
                    pure {A2B1: _280}
    | {- A2B2 -} do (_281 : {}) <- @MatchBytes "A2B2"
                    pure {A2B2: _281}
    | {- A2B3 -} do (_282 : {}) <- @MatchBytes "A2B3"
                    pure {A2B3: _282}
    | {- A2M0 -} do (_283 : {}) <- @MatchBytes "A2M0"
                    pure {A2M0: _283}
    | {- bcp0 -} do (_284 : {}) <- @MatchBytes "bcp0"
                    pure {bcp0: _284}
    | {- bcp1 -} do (_285 : {}) <- @MatchBytes "bcp1"
                    pure {bcp1: _285}
    | {- bcp2 -} do (_286 : {}) <- @MatchBytes "bcp2"
                    pure {bcp2: _286}
    | {- bcp3 -} do (_287 : {}) <- @MatchBytes "bcp3"
                    pure {bcp3: _287}
    | {- bsp0 -} do (_288 : {}) <- @MatchBytes "bsp0"
                    pure {bsp0: _288}
    | {- bsp1 -} do (_289 : {}) <- @MatchBytes "bsp1"
                    pure {bsp1: _289}
    | {- bsp2 -} do (_290 : {}) <- @MatchBytes "bsp2"
                    pure {bsp2: _290}
    | {- bsp3 -} do (_291 : {}) <- @MatchBytes "bsp3"
                    pure {bsp3: _291}
    | {- bXYZ -} do (_292 : {}) <- @MatchBytes "bXYZ"
                    pure {bXYZ: _292}
    | {- bTRC -} do (_293 : {}) <- @MatchBytes "bTRC"
                    pure {bTRC: _293}
    | {- B2A0 -} do (_294 : {}) <- @MatchBytes "B2A0"
                    pure {B2A0: _294}
    | {- B2A1 -} do (_295 : {}) <- @MatchBytes "B2A1"
                    pure {B2A1: _295}
    | {- B2A2 -} do (_296 : {}) <- @MatchBytes "B2A2"
                    pure {B2A2: _296}
    | {- B2D0 -} do (_297 : {}) <- @MatchBytes "B2D0"
                    pure {B2D0: _297}
    | {- B2D1 -} do (_298 : {}) <- @MatchBytes "B2D1"
                    pure {B2D1: _298}
    | {- B2D2 -} do (_299 : {}) <- @MatchBytes "B2D2"
                    pure {B2D2: _299}
    | {- B2D3 -} do (_300 : {}) <- @MatchBytes "B2D3"
                    pure {B2D3: _300}
    | {- calt -} do (_301 : {}) <- @MatchBytes "calt"
                    pure {calt: _301}
    | {- targ -} do (_302 : {}) <- @MatchBytes "targ"
                    pure {targ: _302}
    | {- chad -} do (_303 : {}) <- @MatchBytes "chad"
                    pure {chad: _303}
    | {- clro -} do (_304 : {}) <- @MatchBytes "clro"
                    pure {clro: _304}
    | {- clrt -} do (_305 : {}) <- @MatchBytes "clrt"
                    pure {clrt: _305}
    | {- clot -} do (_306 : {}) <- @MatchBytes "clot"
                    pure {clot: _306}
    | {- ciis -} do (_307 : {}) <- @MatchBytes "ciis"
                    pure {ciis: _307}
    | {- cprt -} do (_308 : {}) <- @MatchBytes "cprt"
                    pure {cprt: _308}
    | {- dmnd -} do (_309 : {}) <- @MatchBytes "dmnd"
                    pure {dmnd: _309}
    | {- dmdd -} do (_310 : {}) <- @MatchBytes "dmdd"
                    pure {dmdd: _310}
    | {- D2B0 -} do (_311 : {}) <- @MatchBytes "D2B0"
                    pure {D2B0: _311}
    | {- D2B1 -} do (_312 : {}) <- @MatchBytes "D2B1"
                    pure {D2B1: _312}
    | {- D2B2 -} do (_313 : {}) <- @MatchBytes "D2B2"
                    pure {D2B2: _313}
    | {- D2B3 -} do (_314 : {}) <- @MatchBytes "D2B3"
                    pure {D2B3: _314}
    | {- gamt -} do (_315 : {}) <- @MatchBytes "gamt"
                    pure {gamt: _315}
    | {- kTRC -} do (_316 : {}) <- @MatchBytes "kTRC"
                    pure {kTRC: _316}
    | {- gXYZ -} do (_317 : {}) <- @MatchBytes "gXYZ"
                    pure {gXYZ: _317}
    | {- gTRC -} do (_318 : {}) <- @MatchBytes "gTRC"
                    pure {gTRC: _318}
    | {- lumi -} do (_319 : {}) <- @MatchBytes "lumi"
                    pure {lumi: _319}
    | {- meas -} do (_320 : {}) <- @MatchBytes "meas"
                    pure {meas: _320}
    | {- wtpt -} do (_321 : {}) <- @MatchBytes "wtpt"
                    pure {wtpt: _321}
    | {- ncl2 -} do (_322 : {}) <- @MatchBytes "ncl2"
                    pure {ncl2: _322}
    | {- resp -} do (_323 : {}) <- @MatchBytes "resp"
                    pure {resp: _323}
    | {- rig0 -} do (_324 : {}) <- @MatchBytes "rig0"
                    pure {rig0: _324}
    | {- pre0 -} do (_325 : {}) <- @MatchBytes "pre0"
                    pure {pre0: _325}
    | {- pre1 -} do (_326 : {}) <- @MatchBytes "pre1"
                    pure {pre1: _326}
    | {- pre2 -} do (_327 : {}) <- @MatchBytes "pre2"
                    pure {pre2: _327}
    | {- desc -} do (_328 : {}) <- @MatchBytes "desc"
                    pure {desc: _328}
    | {- pseq -} do (_329 : {}) <- @MatchBytes "pseq"
                    pure {pseq: _329}
    | {- psid -} do (_330 : {}) <- @MatchBytes "psid"
                    pure {psid: _330}
    | {- rXYZ -} do (_331 : {}) <- @MatchBytes "rXYZ"
                    pure {rXYZ: _331}
    | {- rTRC -} do (_332 : {}) <- @MatchBytes "rTRC"
                    pure {rTRC: _332}
    | {- rig2 -} do (_333 : {}) <- @MatchBytes "rig2"
                    pure {rig2: _333}
    | {- tech -} do (_334 : {}) <- @MatchBytes "tech"
                    pure {tech: _334}
    | {- vued -} do (_335 : {}) <- @MatchBytes "vued"
                    pure {vued: _335}
    | {- view -} do (_336 : {}) <- @MatchBytes "view"
                    pure {view: _336}
    }
 
ICC.TagEntry : Grammar ICC.TagEntry =
  do (tag_signature : ICC.TagSignature) <- ICC.TagSignature
     (offset_to_data_element : uint 32) <- ICC.BE32
     (size_of_data_element : uint 32) <- ICC.BE32
     pure {tag_signature = tag_signature,
           offset_to_data_element = offset_to_data_element,
           size_of_data_element = size_of_data_element}
 
ICC.TagTable : Grammar [ICC.TagEntry] =
  do (n : uint 64) <- do (_337 : uint 32) <- ICC.BE32
                         pure (_337 as uint 64)
     ($$ : [ICC.TagEntry]) <- Many[n] ICC.TagEntry
     pure $$
 
ICC.Main : Grammar ICC.Main =
  do (profileHeader : ICC.ProfileHeader) <- ICC.ProfileHeader
     (tagTable : [ICC.TagEntry]) <- ICC.TagTable
     pure {profileHeader = profileHeader,
           tagTable = tagTable}
 
ICC.XYNumber : Grammar ICC.XYNumber =
  do (x : uint 32) <- ICC.BE32
     (y : uint 32) <- ICC.BE32
     pure {x = x,
           y = y}
 
ICC.PositionNumber : Grammar ICC.PositionNumber =
  do (offset : uint 32) <- ICC.BE32
     (size : uint 32) <- ICC.BE32
     pure {offset = offset,
           size = size}
 
ICC.ASCII7 : Grammar [uint 7] =
  do ($$ : [uint 7]) <- Many[] do (_339 : uint 8) <- Match (1 .. 255)
                                  _339 AS uint 7
     Choose biased
       { @Many[ 1 .. ] @Match {'\NUL'}
       | Fail "Non 0 string terminator"
       }
     pure $$
 
ICC.Response16Number : Grammar ICC.Response16Number =
  do (device : uint 16) <- ICC.BE16
     @MatchBytes [0,
                  0]
     (measurement : uint 32) <- ICC.BE32
     pure {device = device,
           measurement = measurement}
 
ICC._StartTag (x : [uint 8]) : Grammar {} =
  do @MatchBytes x
     @MatchBytes [0,
                  0,
                  0,
                  0]
 
ICC.LutAToBType : Grammar ICC.LutAToBType =
  do ICC._StartTag "mAB "
     (number_of_input_channels : uint 8) <- GetByte
     (number_of_output_channels : uint 8) <- GetByte
     @MatchBytes [0,
                  0]
     (offset_first_B_curve : uint 32) <- ICC.BE32
     (offset_to_matrix : uint 32) <- ICC.BE32
     (offset_to_first_M_curve : uint 32) <- ICC.BE32
     (offset_to_CLUT : uint 32) <- ICC.BE32
     (offset_to_first_A_curve : uint 32) <- ICC.BE32
     (data : Stream) <- CurrentStream
     pure {number_of_input_channels = number_of_input_channels,
           number_of_output_channels = number_of_output_channels,
           offset_first_B_curve = offset_first_B_curve,
           offset_to_matrix = offset_to_matrix,
           offset_to_first_M_curve = offset_to_first_M_curve,
           offset_to_CLUT = offset_to_CLUT,
           offset_to_first_A_curve = offset_to_first_A_curve,
           data = data}
 
ICC._GotoRel (s : Stream) (n : uint 64) : Grammar {} =
  do (_341 : Stream) <- StreamOff n s
     SetStream _341
 
ICC._Goto (n : uint 64) : Grammar {} =
  do (_342 : Stream) <- CurrentStream
     ICC._GotoRel _342 n
 
ICC.Chunk (sz : uint 64) : Grammar Stream =
  do ($$ : Stream) <- do (_343 : Stream) <- CurrentStream
                         StreamLen sz _343
     ICC._Goto sz
     pure $$
 
ICC.ChunkRelativeTo (s : Stream) (off : uint 64) (sz : uint 64) : Grammar Stream =
  do ICC._GotoRel s off
     ($$ : Stream) <- ICC.Chunk sz
     pure $$
 
ICC._Guard (p : bool) : Grammar {} =
  case p is
    { true -> pure {}
    }
 
ICC.MultiProcessElementsType : Grammar ICC.MultiProcessElementsType =
  do (s : Stream) <- CurrentStream
     ICC._StartTag "mpet"
     (number_of_input_channels : uint 16) <- ICC.BE16
     (number_of_output_channels : uint 16) <- ICC.BE16
     (number_of_processing_elements : uint 32) <- ICC.BE32
     (n : uint 64) <- pure (number_of_processing_elements as uint 64)
     ICC._Guard (0 < n)
     (els : [ICC.PositionNumber]) <- Many[n] ICC.PositionNumber
     (elements : [Stream]) <- map ((e : ICC.PositionNumber) in els)
                                (ICC.ChunkRelativeTo s (e.offset as uint 64) (e.size as uint 64))
     pure {number_of_input_channels = number_of_input_channels,
           number_of_output_channels = number_of_output_channels,
           number_of_processing_elements = number_of_processing_elements,
           n = n,
           elements = elements}
 
ICC.LutAB_or_multi : Grammar ICC.LutAB_or_multi =
  Choose biased
    { {- lutAB -} do (_345 : ICC.LutAToBType) <- ICC.LutAToBType
                     pure {lutAB: _345}
    | {- mpe -} do (_346 : ICC.MultiProcessElementsType) <- ICC.MultiProcessElementsType
                   pure {mpe: _346}
    }
 
ICC.exp ?a0 ?a1 (Numeric ?a0) (Numeric ?a1) (Literal 1 ?a1) (Literal 0 ?a1) (Literal 1 ?a0) (b : ?a0) (e : ?a1) : ?a0 =
  for ((x : ?a0) = 1; (i : ?a1) in rangeUp 0 e 1)
    (x * b)
 
ICC.Lut8Type : Grammar ICC.Lut8Type =
  do ICC._StartTag "mft1"
     (number_of_input_channels : uint 8) <- GetByte
     (i : uint 64) <- pure (number_of_input_channels as uint 64)
     (number_of_output_channels : uint 8) <- GetByte
     (o : uint 64) <- pure (number_of_output_channels as uint 64)
     (number_of_clut_grid_points : uint 8) <- GetByte
     (g : uint 64) <- pure (number_of_clut_grid_points as uint 64)
     @Match {'\NUL'}
     (encoded_e_parameters : [sint 32]) <- Many[9] do (_347 : uint 32) <- ICC.BE32
                                                      pure (_347 as sint 32)
     (input_tables : Stream) <- ICC.Chunk (256 * i)
     (clut_values : Stream) <- ICC.Chunk ((ICC.exp (uint 64) (uint 64) g i) * o)
     (output_tables : Stream) <- ICC.Chunk (256 * o)
     pure {number_of_input_channels = number_of_input_channels,
           number_of_output_channels = number_of_output_channels,
           number_of_clut_grid_points = number_of_clut_grid_points,
           encoded_e_parameters = encoded_e_parameters,
           input_tables = input_tables,
           clut_values = clut_values,
           output_tables = output_tables}
 
ICC.Lut16Type : Grammar ICC.Lut16Type =
  do ICC._StartTag "mft2"
     (number_of_input_channels : uint 8) <- GetByte
     (i : uint 64) <- pure (number_of_input_channels as uint 64)
     (number_of_output_channels : uint 8) <- GetByte
     (o : uint 64) <- pure (number_of_output_channels as uint 64)
     (number_of_clut_grid_points : uint 8) <- GetByte
     (g : uint 64) <- pure (number_of_clut_grid_points as uint 64)
     @Match {'\NUL'}
     (encoded_e_parameters : [sint 32]) <- Many[9] do (_348 : uint 32) <- ICC.BE32
                                                      pure (_348 as sint 32)
     (number_of_input_table_entries : uint 32) <- ICC.BE32
     (n : uint 64) <- pure (number_of_input_table_entries as uint 64)
     (number_of_output_table_entries : uint 32) <- ICC.BE32
     (m : uint 64) <- pure (number_of_output_table_entries as uint 64)
     (input_tables : Stream) <- ICC.Chunk ((256 * n) * i)
     (clut_values : Stream) <- ICC.Chunk ((2 * (ICC.exp (uint 64) (uint 64) g i)) * o)
     (output_tables : Stream) <- ICC.Chunk ((2 * m) * o)
     pure {number_of_input_channels = number_of_input_channels,
           number_of_output_channels = number_of_output_channels,
           number_of_clut_grid_points = number_of_clut_grid_points,
           encoded_e_parameters = encoded_e_parameters,
           number_of_input_table_entries = number_of_input_table_entries,
           number_of_output_table_entries = number_of_output_table_entries,
           input_tables = input_tables,
           clut_values = clut_values,
           output_tables = output_tables}
 
ICC.LutBToAType : Grammar ICC.LutBToAType =
  do ICC._StartTag "mBA "
     (number_of_input_channels : uint 8) <- GetByte
     (number_of_output_channels : uint 8) <- GetByte
     @MatchBytes [0,
                  0]
     (offset_first_B_curve : uint 32) <- ICC.BE32
     (offset_to_matrix : uint 32) <- ICC.BE32
     (offset_to_first_M_curve : uint 32) <- ICC.BE32
     (offset_to_CLUT : uint 32) <- ICC.BE32
     (offset_to_first_A_curve : uint 32) <- ICC.BE32
     (data : Stream) <- CurrentStream
     pure {number_of_input_channels = number_of_input_channels,
           number_of_output_channels = number_of_output_channels,
           offset_first_B_curve = offset_first_B_curve,
           offset_to_matrix = offset_to_matrix,
           offset_to_first_M_curve = offset_to_first_M_curve,
           offset_to_CLUT = offset_to_CLUT,
           offset_to_first_A_curve = offset_to_first_A_curve,
           data = data}
 
ICC.Lut_8_16_AB_BA : Grammar ICC.Lut_8_16_AB_BA =
  Choose biased
    { {- lut8 -} do (_349 : ICC.Lut8Type) <- ICC.Lut8Type
                    pure {lut8: _349}
    | {- lut16 -} do (_350 : ICC.Lut16Type) <- ICC.Lut16Type
                     pure {lut16: _350}
    | {- lutAB -} do (_351 : ICC.LutAToBType) <- ICC.LutAToBType
                     pure {lutAB: _351}
    | {- lutBA -} do (_352 : ICC.LutBToAType) <- ICC.LutBToAType
                     pure {lutBA: _352}
    }
 
ICC.Lut_8_16_BA : Grammar ICC.Lut_8_16_BA =
  Choose biased
    { {- lut8 -} do (_353 : ICC.Lut8Type) <- ICC.Lut8Type
                    pure {lut8: _353}
    | {- lut16 -} do (_354 : ICC.Lut16Type) <- ICC.Lut16Type
                     pure {lut16: _354}
    | {- lutBA -} do (_355 : ICC.LutBToAType) <- ICC.LutBToAType
                     pure {lutBA: _355}
    }
 
ICC.CurveType : Grammar [uint 16] =
  do ICC._StartTag "curv"
     (n : uint 64) <- do (_356 : uint 32) <- ICC.BE32
                         pure (_356 as uint 64)
     ($$ : [uint 16]) <- Many[n] ICC.BE16
     pure $$
 
ICC.ParametricCurveType : Grammar ICC.ParametricCurveType =
  do ICC._StartTag "para"
     (function : uint 16) <- ICC.BE16
     @MatchBytes [0,
                  0]
     (parameters : [uint 32]) <- Many[] ICC.BE32
     pure {function = function,
           parameters = parameters}
 
ICC.SomeCurve : Grammar ICC.SomeCurve =
  Choose biased
    { {- curve -} do (_358 : [uint 16]) <- ICC.CurveType
                     pure {curve: _358}
    | {- parametric_curve -} do (_359 : ICC.ParametricCurveType) <- ICC.ParametricCurveType
                                pure {parametric_curve: _359}
    }
 
ICC.DateTimeType : Grammar ICC.DateTimeNumber =
  do ICC._StartTag "dtim"
     ($$ : ICC.DateTimeNumber) <- ICC.DateTimeNumber
     pure $$
 
ICC.Only ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do ($$ : ?a0) <- P
     END
     pure $$
 
ICC.TextType : Grammar [uint 7] =
  do ICC._StartTag "text"
     ($$ : [uint 7]) <- ICC.Only [uint 7] ICC.ASCII7
     pure $$
 
ICC.SignatureType : Grammar [uint 8] =
  do ICC._StartTag "sig "
     ($$ : [uint 8]) <- Many[4] GetByte
     pure $$
 
ICC.Remote ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do (s : Stream) <- CurrentStream
     ($$ : ?a0) <- P
     SetStream s
     pure $$
 
ICC.UnicodeRecord (s : Stream) : Grammar ICC.UnicodeRecord =
  do (language : uint 16) <- ICC.BE16
     (country : uint 16) <- ICC.BE16
     (size : uint 64) <- do (_363 : uint 32) <- ICC.BE32
                            pure (_363 as uint 64)
     (offset : uint 64) <- do (_364 : uint 32) <- ICC.BE32
                              pure (_364 as uint 64)
     (data : Stream) <- ICC.Remote Stream (ICC.ChunkRelativeTo s offset size)
     pure {language = language,
           country = country,
           data = data}
 
ICC.MultiLocalizedUnicodeType : Grammar [ICC.UnicodeRecord] =
  do (s : Stream) <- CurrentStream
     ICC._StartTag "mluc"
     (record_number : uint 32) <- ICC.BE32
     (record_size : uint 32) <- ICC.BE32
     ICC._Guard (record_size == 12)
     ($$ : [ICC.UnicodeRecord]) <- Many[record_number as uint 64] ICC.UnicodeRecord s
     pure $$
 
ICC.S15Fixed16ArrayType : Grammar [uint 32] =
  do ICC._StartTag "sf32"
     ($$ : [uint 32]) <- Many[] ICC.BE32
     pure $$
 
ICC._BE16 : Grammar {} =
  do @GetByte
     @GetByte
 
ICC._BE32 : Grammar {} =
  do ICC._BE16
     ICC._BE16
 
ICC.ColorantOrderType : Grammar [uint 8] =
  do ICC._StartTag "clro"
     ICC._BE32
     ($$ : [uint 8]) <- Many[] GetByte
     pure $$
 
ICC.ParseChunk ?a0 (sz : uint 64) (P : Grammar ?a0) : Grammar ?a0 =
  do (s : Stream) <- CurrentStream
     do (_368 : Stream) <- StreamLen sz s
        SetStream _368
     ($$ : ?a0) <- P
     do (_369 : Stream) <- StreamOff sz s
        SetStream _369
     pure $$
 
ICC.Colorant : Grammar ICC.Colorant =
  do (name : [uint 7]) <- ICC.ParseChunk [uint 7] 32 (ICC.Only [uint 7] ICC.ASCII7)
     (pcs : [uint 16]) <- Many[3] ICC.BE16
     pure {name = name,
           pcs = pcs}
 
ICC.ColorantTableType : Grammar [ICC.Colorant] =
  do ICC._StartTag "clrt"
     (count_of_colorant : uint 64) <- do (_370 : uint 32) <- ICC.BE32
                                         pure (_370 as uint 64)
     ($$ : [ICC.Colorant]) <- Many[count_of_colorant] ICC.Colorant
     pure $$
 
ICC.ResponseCurve (n : uint 64) : Grammar ICC.ResponseCurve =
  do (measurement_unit : uint 32) <- ICC.BE32
     (counts : [uint 32]) <- Many[n] ICC.BE32
     (pcxyzs : [ICC.XYNumber]) <- Many[n] ICC.XYNumber
     (response_arrays : [[ICC.Response16Number]]) <- map ((qi : uint 32) in counts)
                                                       (Many[qi as uint 64] ICC.Response16Number)
     pure {measurement_unit = measurement_unit,
           pcxyzs = pcxyzs,
           response_arrays = response_arrays}
 
ICC.ResponseCurveSet16Type : Grammar [ICC.ResponseCurve] =
  do (s : Stream) <- CurrentStream
     ICC._StartTag "rcs2"
     (number_of_channels : uint 64) <- do (_372 : uint 16) <- ICC.BE16
                                          pure (_372 as uint 64)
     (count : uint 64) <- do (_373 : uint 16) <- ICC.BE16
                             pure (_373 as uint 64)
     ($$ : [ICC.ResponseCurve]) <- Many[count] do (off : uint 64) <- do (_375 : uint 32) <- ICC.BE32
                                                                        pure (_375 as uint 64)
                                                  ($$ : ICC.ResponseCurve) <- ICC.Remote ICC.ResponseCurve do ICC._GotoRel s off
                                                                                                              ($$ : ICC.ResponseCurve) <- ICC.ResponseCurve number_of_channels
                                                                                                              pure $$
                                                  pure $$
     pure $$
 
ICC.XYZType : Grammar [ICC.XYZNumber] =
  do ICC._StartTag "XYZ "
     ($$ : [ICC.XYZNumber]) <- Many[] ICC.XYZNumber
     pure $$
 
ICC.MeasurementType : Grammar ICC.MeasurementType =
  do ICC._StartTag "meas"
     (standard_observer : uint 32) <- ICC.BE32
     (nCIEXYZ : ICC.XYZNumber) <- ICC.XYZNumber
     (geometry : uint 32) <- ICC.BE32
     (flare : uint 32) <- ICC.BE32
     (illuminant : uint 32) <- ICC.BE32
     pure {standard_observer = standard_observer,
           nCIEXYZ = nCIEXYZ,
           geometry = geometry,
           flare = flare,
           illuminant = illuminant}
 
ICC.ColorName (m : uint 64) : Grammar ICC.ColorName =
  do (name_root : [uint 7]) <- ICC.ParseChunk [uint 7] 32 ICC.ASCII7
     (pcs_coords : [uint 16]) <- Many[3] ICC.BE16
     (device_coords : [uint 16]) <- Many[m] ICC.BE16
     pure {name_root = name_root,
           pcs_coords = pcs_coords,
           device_coords = device_coords}
 
ICC.NamedColor2Type : Grammar ICC.NamedColor2Type =
  do ICC._StartTag "ncl2"
     (vendor_specific : uint 32) <- ICC.BE32
     (count : uint 64) <- do (_379 : uint 32) <- ICC.BE32
                             pure (_379 as uint 64)
     (number_of_coords : uint 64) <- do (_380 : uint 32) <- ICC.BE32
                                        pure (_380 as uint 64)
     (prefix : [uint 7]) <- ICC.ParseChunk [uint 7] 32 (ICC.Only [uint 7] ICC.ASCII7)
     (suffix : [uint 7]) <- ICC.ParseChunk [uint 7] 32 (ICC.Only [uint 7] ICC.ASCII7)
     (names : [ICC.ColorName]) <- Many[count] ICC.ColorName number_of_coords
     pure {vendor_specific = vendor_specific,
           prefix = prefix,
           suffix = suffix,
           names = names}
 
ICC.StartTag (x : [uint 8]) : Grammar [uint 8] =
  do @MatchBytes x
     ($$ : [uint 8]) <- MatchBytes [0,
                                    0,
                                    0,
                                    0]
     pure $$
 
ICC.ProfileSequenceDescType : Grammar [uint 8] =
  do ($$ : [uint 8]) <- ICC.StartTag "pseq"
     pure $$
 
ICC.ViewConditionsType : Grammar ICC.ViewConditionsType =
  do ICC._StartTag "view"
     (illuminantXYZ : ICC.XYZNumber) <- ICC.XYZNumber
     (surroundXYZ : ICC.XYZNumber) <- ICC.XYZNumber
     (illuminant : uint 32) <- ICC.BE32
     pure {illuminantXYZ = illuminantXYZ,
           surroundXYZ = surroundXYZ,
           illuminant = illuminant}
 
ICC.Tag (sig : ICC.TagSignature) : Grammar ICC.Tag =
  case sig is
    { {| A2B0 = _ |} -> do (_382 : ICC.LutAB_or_multi) <- ICC.LutAB_or_multi
                           pure {A2B0: _382}
    ; {| A2B1 = _ |} -> do (_383 : ICC.LutAB_or_multi) <- ICC.LutAB_or_multi
                           pure {A2B1: _383}
    ; {| A2B2 = _ |} -> do (_384 : ICC.LutAB_or_multi) <- ICC.LutAB_or_multi
                           pure {A2B2: _384}
    ; {| A2B3 = _ |} -> do (_385 : ICC.LutAB_or_multi) <- ICC.LutAB_or_multi
                           pure {A2B3: _385}
    ; {| A2M0 = _ |} -> do (_386 : ICC.MultiProcessElementsType) <- ICC.MultiProcessElementsType
                           pure {A2Mo: _386}
    ; {| bXYZ = _ |} -> do (_387 : [ICC.XYZNumber]) <- ICC.XYZType
                           pure {bXYZ: _387}
    ; {| bTRC = _ |} -> do (_388 : ICC.SomeCurve) <- ICC.SomeCurve
                           pure {bTRC: _388}
    ; {| B2A0 = _ |} -> do (_389 : ICC.Lut_8_16_BA) <- ICC.Lut_8_16_BA
                           pure {B2A0: _389}
    ; {| B2A1 = _ |} -> do (_390 : ICC.Lut_8_16_BA) <- ICC.Lut_8_16_BA
                           pure {B2A1: _390}
    ; {| B2A2 = _ |} -> do (_391 : ICC.Lut_8_16_BA) <- ICC.Lut_8_16_BA
                           pure {B2A2: _391}
    ; {| B2D0 = _ |} -> do (_392 : ICC.MultiProcessElementsType) <- ICC.MultiProcessElementsType
                           pure {B2D0: _392}
    ; {| B2D1 = _ |} -> do (_393 : ICC.MultiProcessElementsType) <- ICC.MultiProcessElementsType
                           pure {B2D1: _393}
    ; {| B2D2 = _ |} -> do (_394 : ICC.MultiProcessElementsType) <- ICC.MultiProcessElementsType
                           pure {B2D2: _394}
    ; {| B2D3 = _ |} -> do (_395 : ICC.MultiProcessElementsType) <- ICC.MultiProcessElementsType
                           pure {B2D3: _395}
    ; {| calt = _ |} -> do (_396 : ICC.DateTimeNumber) <- ICC.DateTimeType
                           pure {calt: _396}
    ; {| targ = _ |} -> do (_397 : [uint 7]) <- ICC.TextType
                           pure {targ: _397}
    ; {| chad = _ |} -> do (_398 : [uint 32]) <- ICC.S15Fixed16ArrayType
                           pure {chad: _398}
    ; {| clro = _ |} -> do (_399 : [uint 8]) <- ICC.ColorantOrderType
                           pure {clro: _399}
    ; {| clrt = _ |} -> do (_400 : [ICC.Colorant]) <- ICC.ColorantTableType
                           pure {clrt: _400}
    ; {| clot = _ |} -> do (_401 : [ICC.Colorant]) <- ICC.ColorantTableType
                           pure {clot: _401}
    ; {| ciis = _ |} -> do (_402 : [uint 8]) <- ICC.SignatureType
                           pure {ciis: _402}
    ; {| cprt = _ |} -> do (_403 : [ICC.UnicodeRecord]) <- ICC.MultiLocalizedUnicodeType
                           pure {cprt: _403}
    ; {| dmnd = _ |} -> do (_404 : [ICC.UnicodeRecord]) <- ICC.MultiLocalizedUnicodeType
                           pure {dmnd: _404}
    ; {| dmdd = _ |} -> do (_405 : [ICC.UnicodeRecord]) <- ICC.MultiLocalizedUnicodeType
                           pure {dmdd: _405}
    ; {| D2B0 = _ |} -> do (_406 : ICC.MultiProcessElementsType) <- ICC.MultiProcessElementsType
                           pure {D2B0: _406}
    ; {| D2B1 = _ |} -> do (_407 : ICC.MultiProcessElementsType) <- ICC.MultiProcessElementsType
                           pure {D2B1: _407}
    ; {| D2B2 = _ |} -> do (_408 : ICC.MultiProcessElementsType) <- ICC.MultiProcessElementsType
                           pure {D2B2: _408}
    ; {| D2B3 = _ |} -> do (_409 : ICC.MultiProcessElementsType) <- ICC.MultiProcessElementsType
                           pure {D2B3: _409}
    ; {| gamt = _ |} -> do (_410 : ICC.Lut_8_16_BA) <- ICC.Lut_8_16_BA
                           pure {gamt: _410}
    ; {| kTRC = _ |} -> do (_411 : ICC.SomeCurve) <- ICC.SomeCurve
                           pure {kTRC: _411}
    ; {| gXYZ = _ |} -> do (_412 : [ICC.XYZNumber]) <- ICC.XYZType
                           pure {gXYZ: _412}
    ; {| gTRC = _ |} -> do (_413 : ICC.SomeCurve) <- ICC.SomeCurve
                           pure {gTRC: _413}
    ; {| lumi = _ |} -> do (_414 : [ICC.XYZNumber]) <- ICC.XYZType
                           pure {lumi: _414}
    ; {| meas = _ |} -> do (_415 : ICC.MeasurementType) <- ICC.MeasurementType
                           pure {meas: _415}
    ; {| wtpt = _ |} -> do (_416 : [ICC.XYZNumber]) <- ICC.XYZType
                           pure {wtpt: _416}
    ; {| ncl2 = _ |} -> do (_417 : ICC.NamedColor2Type) <- ICC.NamedColor2Type
                           pure {ncl2: _417}
    ; {| resp = _ |} -> do (_418 : [ICC.ResponseCurve]) <- ICC.ResponseCurveSet16Type
                           pure {resp: _418}
    ; {| rig0 = _ |} -> do (_419 : [uint 8]) <- ICC.SignatureType
                           pure {rig0: _419}
    ; {| pre0 = _ |} -> do (_420 : ICC.Lut_8_16_AB_BA) <- ICC.Lut_8_16_AB_BA
                           pure {pre0: _420}
    ; {| pre1 = _ |} -> do (_421 : ICC.Lut_8_16_BA) <- ICC.Lut_8_16_BA
                           pure {pre1: _421}
    ; {| pre2 = _ |} -> do (_422 : ICC.Lut_8_16_BA) <- ICC.Lut_8_16_BA
                           pure {pre2: _422}
    ; {| desc = _ |} -> do (_423 : [ICC.UnicodeRecord]) <- ICC.MultiLocalizedUnicodeType
                           pure {desc: _423}
    ; {| pseq = _ |} -> do (_424 : [uint 8]) <- ICC.ProfileSequenceDescType
                           pure {pseq: _424}
    ; {| psid = _ |} -> pure {psid: {}}
    ; {| rXYZ = _ |} -> do (_425 : [ICC.XYZNumber]) <- ICC.XYZType
                           pure {rXYZ: _425}
    ; {| rTRC = _ |} -> do (_426 : ICC.SomeCurve) <- ICC.SomeCurve
                           pure {rTRC: _426}
    ; {| rig2 = _ |} -> do (_427 : [uint 8]) <- ICC.SignatureType
                           pure {rig2: _427}
    ; {| tech = _ |} -> do (_428 : [uint 8]) <- ICC.SignatureType
                           pure {tech: _428}
    ; {| vued = _ |} -> do (_429 : [ICC.UnicodeRecord]) <- ICC.MultiLocalizedUnicodeType
                           pure {vued: _429}
    ; {| view = _ |} -> do (_430 : ICC.ViewConditionsType) <- ICC.ViewConditionsType
                           pure {view: _430}
    }
 
ICC.ParseTag (t : ICC.TagEntry) : Grammar ICC.Tag =
  do ICC._Goto (t.offset_to_data_element as uint 64)
     ($$ : ICC.Tag) <- ICC.ParseChunk ICC.Tag (t.size_of_data_element as uint 64) (ICC.Tag (t.tag_signature))
     pure $$
 
ICC.Lut_8_16_AB : Grammar ICC.Lut_8_16_AB =
  Choose biased
    { {- lut8 -} do (_432 : ICC.Lut8Type) <- ICC.Lut8Type
                    pure {lut8: _432}
    | {- lut16 -} do (_433 : ICC.Lut16Type) <- ICC.Lut16Type
                     pure {lut16: _433}
    | {- lutAB -} do (_434 : ICC.LutAToBType) <- ICC.LutAToBType
                     pure {lutAB: _434}
    }
 
ICC.ChromaticityType : Grammar ICC.ChromaticityType =
  do ICC._StartTag "chrm"
     (number_of_device_channels : uint 64) <- do (_435 : uint 16) <- ICC.BE16
                                                 pure (_435 as uint 64)
     (phosphor_or_colorant : uint 16) <- ICC.BE16
     (cie_coords : [ICC.XYNumber]) <- Many[number_of_device_channels] ICC.XYNumber
     pure {phosphor_or_colorant = phosphor_or_colorant,
           cie_coords = cie_coords}
 
ICC._Remote ?a0 (_P : Grammar {}) : Grammar {} =
  do (s : Stream) <- CurrentStream
     _P
     SetStream s
 
ICC._ParseChunk ?a0 (sz : uint 64) (_P : Grammar {}) : Grammar {} =
  do (s : Stream) <- CurrentStream
     do (_368 : Stream) <- StreamLen sz s
        SetStream _368
     _P
     (_369 : Stream) <- StreamOff sz s
     SetStream _369
 
ICC._MultiProcessElementsType : Grammar {} =
  do (s : Stream) <- CurrentStream
     ICC._StartTag "mpet"
     ICC._BE16
     ICC._BE16
     (number_of_processing_elements : uint 32) <- ICC.BE32
     (n : uint 64) <- pure (number_of_processing_elements as uint 64)
     ICC._Guard (0 < n)
     (els : [ICC.PositionNumber]) <- Many[n] ICC.PositionNumber
     map ((e : ICC.PositionNumber) in els)
       (ICC.ChunkRelativeTo s (e.offset as uint 64) (e.size as uint 64))
     pure {}
 
ICC._LutAToBType : Grammar {} =
  do ICC._StartTag "mAB "
     @GetByte
     @GetByte
     @MatchBytes [0,
                  0]
     ICC._BE32
     ICC._BE32
     ICC._BE32
     ICC._BE32
     ICC._BE32
 
ICC._LutAB_or_multi : Grammar {} =
  Choose biased
    { {- lutAB -} ICC._LutAToBType
    | {- mpe -} ICC._MultiProcessElementsType
    }
 
ICC._Chunk (sz : uint 64) : Grammar {} =
  do do (_343 : Stream) <- CurrentStream
        @StreamLen sz _343
     ICC._Goto sz
 
ICC._Lut8Type : Grammar {} =
  do ICC._StartTag "mft1"
     (number_of_input_channels : uint 8) <- GetByte
     (i : uint 64) <- pure (number_of_input_channels as uint 64)
     (number_of_output_channels : uint 8) <- GetByte
     (o : uint 64) <- pure (number_of_output_channels as uint 64)
     (number_of_clut_grid_points : uint 8) <- GetByte
     (g : uint 64) <- pure (number_of_clut_grid_points as uint 64)
     @Match {'\NUL'}
     @Many[9] ICC._BE32
     ICC._Chunk (256 * i)
     ICC._Chunk ((ICC.exp (uint 64) (uint 64) g i) * o)
     ICC._Chunk (256 * o)
 
ICC._Lut16Type : Grammar {} =
  do ICC._StartTag "mft2"
     (number_of_input_channels : uint 8) <- GetByte
     (i : uint 64) <- pure (number_of_input_channels as uint 64)
     (number_of_output_channels : uint 8) <- GetByte
     (o : uint 64) <- pure (number_of_output_channels as uint 64)
     (number_of_clut_grid_points : uint 8) <- GetByte
     (g : uint 64) <- pure (number_of_clut_grid_points as uint 64)
     @Match {'\NUL'}
     @Many[9] ICC._BE32
     (number_of_input_table_entries : uint 32) <- ICC.BE32
     (n : uint 64) <- pure (number_of_input_table_entries as uint 64)
     (number_of_output_table_entries : uint 32) <- ICC.BE32
     (m : uint 64) <- pure (number_of_output_table_entries as uint 64)
     ICC._Chunk ((256 * n) * i)
     ICC._Chunk ((2 * (ICC.exp (uint 64) (uint 64) g i)) * o)
     ICC._Chunk ((2 * m) * o)
 
ICC._LutBToAType : Grammar {} =
  do ICC._StartTag "mBA "
     @GetByte
     @GetByte
     @MatchBytes [0,
                  0]
     ICC._BE32
     ICC._BE32
     ICC._BE32
     ICC._BE32
     ICC._BE32
 
ICC._Lut_8_16_AB_BA : Grammar {} =
  Choose biased
    { {- lut8 -} ICC._Lut8Type
    | {- lut16 -} ICC._Lut16Type
    | {- lutAB -} ICC._LutAToBType
    | {- lutBA -} ICC._LutBToAType
    }
 
ICC._Lut_8_16_BA : Grammar {} =
  Choose biased
    { {- lut8 -} ICC._Lut8Type
    | {- lut16 -} ICC._Lut16Type
    | {- lutBA -} ICC._LutBToAType
    }
 
ICC._CurveType : Grammar {} =
  do ICC._StartTag "curv"
     (n : uint 64) <- do (_356 : uint 32) <- ICC.BE32
                         pure (_356 as uint 64)
     @Many[n] ICC._BE16
 
ICC._ParametricCurveType : Grammar {} =
  do ICC._StartTag "para"
     ICC._BE16
     @MatchBytes [0,
                  0]
     @Many[] ICC._BE32
 
ICC._SomeCurve : Grammar {} =
  Choose biased
    { {- curve -} ICC._CurveType
    | {- parametric_curve -} ICC._ParametricCurveType
    }
 
ICC._DateTimeNumber : Grammar {} =
  do ICC._BE16
     ICC._BE16
     ICC._BE16
     ICC._BE16
     ICC._BE16
     ICC._BE16
 
ICC._DateTimeType : Grammar {} =
  do ICC._StartTag "dtim"
     ICC._DateTimeNumber
 
ICC._ASCII7 : Grammar {} =
  do @Many[] do (_339 : uint 8) <- Match (1 .. 255)
                @(_339 AS uint 7)
     Choose biased
       { @Many[ 1 .. ] @Match {'\NUL'}
       | Fail "Non 0 string terminator"
       }
 
ICC._Only ?a0 (_P : Grammar {}) : Grammar {} =
  do _P
     END
 
ICC._TextType : Grammar {} =
  do ICC._StartTag "text"
     ICC._Only [uint 7] ICC._ASCII7
 
ICC._SignatureType : Grammar {} =
  do ICC._StartTag "sig "
     @Many[4] @GetByte
 
ICC._ChunkRelativeTo (s : Stream) (off : uint 64) (sz : uint 64) : Grammar {} =
  do ICC._GotoRel s off
     ICC._Chunk sz
 
ICC._UnicodeRecord (s : Stream) : Grammar {} =
  do ICC._BE16
     ICC._BE16
     (size : uint 64) <- do (_363 : uint 32) <- ICC.BE32
                            pure (_363 as uint 64)
     (offset : uint 64) <- do (_364 : uint 32) <- ICC.BE32
                              pure (_364 as uint 64)
     ICC._Remote Stream (ICC._ChunkRelativeTo s offset size)
 
ICC._MultiLocalizedUnicodeType : Grammar {} =
  do (s : Stream) <- CurrentStream
     ICC._StartTag "mluc"
     (record_number : uint 32) <- ICC.BE32
     (record_size : uint 32) <- ICC.BE32
     ICC._Guard (record_size == 12)
     @Many[record_number as uint 64] ICC._UnicodeRecord s
 
ICC._S15Fixed16ArrayType : Grammar {} =
  do ICC._StartTag "sf32"
     @Many[] ICC._BE32
 
ICC._ColorantOrderType : Grammar {} =
  do ICC._StartTag "clro"
     ICC._BE32
     @Many[] @GetByte
 
ICC._Colorant : Grammar {} =
  do ICC._ParseChunk [uint 7] 32 (ICC._Only [uint 7] ICC._ASCII7)
     @Many[3] ICC._BE16
 
ICC._ColorantTableType : Grammar {} =
  do ICC._StartTag "clrt"
     (count_of_colorant : uint 64) <- do (_370 : uint 32) <- ICC.BE32
                                         pure (_370 as uint 64)
     @Many[count_of_colorant] ICC._Colorant
 
ICC._XYNumber : Grammar {} =
  do ICC._BE32
     ICC._BE32
 
ICC._ResponseCurve (n : uint 64) : Grammar {} =
  do ICC._BE32
     (counts : [uint 32]) <- Many[n] ICC.BE32
     @Many[n] ICC._XYNumber
     map ((qi : uint 32) in counts)
       (Many[qi as uint 64] ICC.Response16Number)
     pure {}
 
ICC._ResponseCurveSet16Type : Grammar {} =
  do (s : Stream) <- CurrentStream
     ICC._StartTag "rcs2"
     (number_of_channels : uint 64) <- do (_372 : uint 16) <- ICC.BE16
                                          pure (_372 as uint 64)
     (count : uint 64) <- do (_373 : uint 16) <- ICC.BE16
                             pure (_373 as uint 64)
     @Many[count] do (off : uint 64) <- do (_375 : uint 32) <- ICC.BE32
                                           pure (_375 as uint 64)
                     ICC._Remote ICC.ResponseCurve do ICC._GotoRel s off
                                                      ICC._ResponseCurve number_of_channels
 
ICC._XYZNumber : Grammar {} =
  do ICC._BE32
     ICC._BE32
     ICC._BE32
 
ICC._XYZType : Grammar {} =
  do ICC._StartTag "XYZ "
     @Many[] ICC._XYZNumber
 
ICC._MeasurementType : Grammar {} =
  do ICC._StartTag "meas"
     ICC._BE32
     ICC._XYZNumber
     ICC._BE32
     ICC._BE32
     ICC._BE32
 
ICC._ColorName (m : uint 64) : Grammar {} =
  do ICC._ParseChunk [uint 7] 32 ICC._ASCII7
     @Many[3] ICC._BE16
     @Many[m] ICC._BE16
 
ICC._NamedColor2Type : Grammar {} =
  do ICC._StartTag "ncl2"
     ICC._BE32
     (count : uint 64) <- do (_379 : uint 32) <- ICC.BE32
                             pure (_379 as uint 64)
     (number_of_coords : uint 64) <- do (_380 : uint 32) <- ICC.BE32
                                        pure (_380 as uint 64)
     ICC._ParseChunk [uint 7] 32 (ICC._Only [uint 7] ICC._ASCII7)
     ICC._ParseChunk [uint 7] 32 (ICC._Only [uint 7] ICC._ASCII7)
     @Many[count] ICC._ColorName number_of_coords
 
ICC._ProfileSequenceDescType : Grammar {} =
  ICC._StartTag "pseq"
 
ICC._ViewConditionsType : Grammar {} =
  do ICC._StartTag "view"
     ICC._XYZNumber
     ICC._XYZNumber
     ICC._BE32
 
ICC._Tag (sig : ICC.TagSignature) : Grammar {} =
  case sig is
    { {| A2B0 = _ |} -> ICC._LutAB_or_multi
    ; {| A2B1 = _ |} -> ICC._LutAB_or_multi
    ; {| A2B2 = _ |} -> ICC._LutAB_or_multi
    ; {| A2B3 = _ |} -> ICC._LutAB_or_multi
    ; {| A2M0 = _ |} -> ICC._MultiProcessElementsType
    ; {| bXYZ = _ |} -> ICC._XYZType
    ; {| bTRC = _ |} -> ICC._SomeCurve
    ; {| B2A0 = _ |} -> ICC._Lut_8_16_BA
    ; {| B2A1 = _ |} -> ICC._Lut_8_16_BA
    ; {| B2A2 = _ |} -> ICC._Lut_8_16_BA
    ; {| B2D0 = _ |} -> ICC._MultiProcessElementsType
    ; {| B2D1 = _ |} -> ICC._MultiProcessElementsType
    ; {| B2D2 = _ |} -> ICC._MultiProcessElementsType
    ; {| B2D3 = _ |} -> ICC._MultiProcessElementsType
    ; {| calt = _ |} -> ICC._DateTimeType
    ; {| targ = _ |} -> ICC._TextType
    ; {| chad = _ |} -> ICC._S15Fixed16ArrayType
    ; {| clro = _ |} -> ICC._ColorantOrderType
    ; {| clrt = _ |} -> ICC._ColorantTableType
    ; {| clot = _ |} -> ICC._ColorantTableType
    ; {| ciis = _ |} -> ICC._SignatureType
    ; {| cprt = _ |} -> ICC._MultiLocalizedUnicodeType
    ; {| dmnd = _ |} -> ICC._MultiLocalizedUnicodeType
    ; {| dmdd = _ |} -> ICC._MultiLocalizedUnicodeType
    ; {| D2B0 = _ |} -> ICC._MultiProcessElementsType
    ; {| D2B1 = _ |} -> ICC._MultiProcessElementsType
    ; {| D2B2 = _ |} -> ICC._MultiProcessElementsType
    ; {| D2B3 = _ |} -> ICC._MultiProcessElementsType
    ; {| gamt = _ |} -> ICC._Lut_8_16_BA
    ; {| kTRC = _ |} -> ICC._SomeCurve
    ; {| gXYZ = _ |} -> ICC._XYZType
    ; {| gTRC = _ |} -> ICC._SomeCurve
    ; {| lumi = _ |} -> ICC._XYZType
    ; {| meas = _ |} -> ICC._MeasurementType
    ; {| wtpt = _ |} -> ICC._XYZType
    ; {| ncl2 = _ |} -> ICC._NamedColor2Type
    ; {| resp = _ |} -> ICC._ResponseCurveSet16Type
    ; {| rig0 = _ |} -> ICC._SignatureType
    ; {| pre0 = _ |} -> ICC._Lut_8_16_AB_BA
    ; {| pre1 = _ |} -> ICC._Lut_8_16_BA
    ; {| pre2 = _ |} -> ICC._Lut_8_16_BA
    ; {| desc = _ |} -> ICC._MultiLocalizedUnicodeType
    ; {| pseq = _ |} -> ICC._ProfileSequenceDescType
    ; {| psid = _ |} -> pure {}
    ; {| rXYZ = _ |} -> ICC._XYZType
    ; {| rTRC = _ |} -> ICC._SomeCurve
    ; {| rig2 = _ |} -> ICC._SignatureType
    ; {| tech = _ |} -> ICC._SignatureType
    ; {| vued = _ |} -> ICC._MultiLocalizedUnicodeType
    ; {| view = _ |} -> ICC._ViewConditionsType
    }
 
ICC._ParseTag (t : ICC.TagEntry) : Grammar {} =
  do ICC._Goto (t.offset_to_data_element as uint 64)
     ICC._ParseChunk ICC.Tag (t.size_of_data_element as uint 64) (ICC._Tag (t.tag_signature))
 
ICC.TagStructType : Grammar ICC.TagStructType =
  do (s : Stream) <- CurrentStream
     ICC._StartTag "tstr"
     (struct_type_id : [uint 8]) <- Many[4] GetByte
     (n : uint 64) <- do (_436 : uint 32) <- ICC.BE32
                         pure (_436 as uint 64)
     @Many[n] do (ent : ICC.TagEntry) <- ICC.TagEntry
                 ICC._Remote ICC.Tag do SetStream s
                                        ICC._ParseTag ent
     pure {struct_type_id = struct_type_id}
 
ICC.getBit ?a0 (Numeric ?a0) (Coerce trunc ?a0 (uint 1)) (n : uint 64) (b : ?a0) : uint 1 =
  b >> n as uint 1
 
ICC.GotoRel (s : Stream) (n : uint 64) : Grammar {} =
  do (_341 : Stream) <- StreamOff n s
     SetStream _341
 
ICC.Goto (n : uint 64) : Grammar {} =
  do (_342 : Stream) <- CurrentStream
     ICC.GotoRel _342 n
 
ICC.Guard (p : bool) : Grammar {} =
  case p is
    { true -> pure {}
    }
 
ICC._VersionField : Grammar {} =
  do @GetByte
     @GetByte
     @MatchBytes [0,
                  0]
 
ICC._ProfileClasses : Grammar {} =
  Choose biased
    { {- input_device_profile -} @MatchBytes "scnr"
    | {- display_device_profile -} @MatchBytes "mntr"
    | {- output_device_profile -} @MatchBytes "prtr"
    | {- device_link_profile -} @MatchBytes "link"
    | {- color_space_profile -} @MatchBytes "spac"
    | {- abstract_profile -} @MatchBytes "abst"
    | {- named_color_profile -} @MatchBytes "nmcl"
    }
 
ICC._DataColorSpaces : Grammar {} =
  Choose biased
    { {- nciexyz_or_pcsxyz -} @MatchBytes "XYZ "
    | {- cielab_or_pcslab -} @MatchBytes "Lab "
    | {- cieluv -} @MatchBytes "Luv "
    | {- ycbcr -} @MatchBytes "Ycbr"
    | {- cieyxy -} @MatchBytes "Yxy "
    | {- rgb -} @MatchBytes "RGB "
    | {- gray -} @MatchBytes "GRAY"
    | {- hsv -} @MatchBytes "HSV "
    | {- hls -} @MatchBytes "HLS "
    | {- cmyk -} @MatchBytes "CMYK"
    | {- cmy -} @MatchBytes "CMY "
    | {- two_colour -} @MatchBytes "2CLR"
    | {- three_colour -} @MatchBytes "3CLR"
    | {- four_colour -} @MatchBytes "4CLR"
    | {- five_colour -} @MatchBytes "5CLR"
    | {- six_colour -} @MatchBytes "6CLR"
    | {- seven_colour -} @MatchBytes "7CLR"
    | {- eight_colour -} @MatchBytes "8CLR"
    | {- nine_colour -} @MatchBytes "9CLR"
    | {- ten_colour -} @MatchBytes "ACLR"
    | {- eleven_colour -} @MatchBytes "BCLR"
    | {- twelve_colour -} @MatchBytes "CCLR"
    | {- thirteen_colour -} @MatchBytes "DCLR"
    | {- fourteen_colour -} @MatchBytes "ECLR"
    | {- fifteen_colour -} @MatchBytes "FCLR"
    }
 
ICC._PrimaryPlatforms : Grammar {} =
  Choose biased
    { {- none -} @MatchBytes [0,
                              0,
                              0,
                              0]
    | {- apple_computer_inc -} @MatchBytes "APPL"
    | {- microsoft_corporation -} @MatchBytes "MSFT"
    | {- silicon_graphics_inc -} @MatchBytes "SGI "
    | {- sun_microsystems -} @MatchBytes "SUNW"
    }
 
ICC._RenderingIntent : Grammar {} =
  Choose biased
    { {- perceptual -} @MatchBytes [0,
                                    0,
                                    0,
                                    0]
    | {- media_relative_colorimetric -} @MatchBytes [0,
                                                     0,
                                                     0,
                                                     1]
    | {- saturation -} @MatchBytes [0,
                                    0,
                                    0,
                                    2]
    | {- icc_absolute_colorimetric -} @MatchBytes [0,
                                                   0,
                                                   0,
                                                   3]
    }
 
ICC._BE64 : Grammar {} =
  do ICC._BE32
     ICC._BE32
 
ICC._ProfileHeader : Grammar {} =
  do ICC._BE32
     ICC._BE32
     ICC._VersionField
     ICC._ProfileClasses
     ICC._DataColorSpaces
     ICC._DataColorSpaces
     ICC._DateTimeNumber
     @MatchBytes "acsp"
     ICC._PrimaryPlatforms
     ICC._BE32
     ICC._BE32
     ICC._BE32
     ICC._BE64
     ICC._RenderingIntent
     ICC._XYZNumber
     ICC._BE32
     @Many[16] @GetByte
     @Many[28] @Match {'\NUL'}
 
ICC._TagSignature : Grammar {} =
  Choose biased
    { {- A2B0 -} @MatchBytes "A2B0"
    | {- A2B1 -} @MatchBytes "A2B1"
    | {- A2B2 -} @MatchBytes "A2B2"
    | {- A2B3 -} @MatchBytes "A2B3"
    | {- A2M0 -} @MatchBytes "A2M0"
    | {- bcp0 -} @MatchBytes "bcp0"
    | {- bcp1 -} @MatchBytes "bcp1"
    | {- bcp2 -} @MatchBytes "bcp2"
    | {- bcp3 -} @MatchBytes "bcp3"
    | {- bsp0 -} @MatchBytes "bsp0"
    | {- bsp1 -} @MatchBytes "bsp1"
    | {- bsp2 -} @MatchBytes "bsp2"
    | {- bsp3 -} @MatchBytes "bsp3"
    | {- bXYZ -} @MatchBytes "bXYZ"
    | {- bTRC -} @MatchBytes "bTRC"
    | {- B2A0 -} @MatchBytes "B2A0"
    | {- B2A1 -} @MatchBytes "B2A1"
    | {- B2A2 -} @MatchBytes "B2A2"
    | {- B2D0 -} @MatchBytes "B2D0"
    | {- B2D1 -} @MatchBytes "B2D1"
    | {- B2D2 -} @MatchBytes "B2D2"
    | {- B2D3 -} @MatchBytes "B2D3"
    | {- calt -} @MatchBytes "calt"
    | {- targ -} @MatchBytes "targ"
    | {- chad -} @MatchBytes "chad"
    | {- clro -} @MatchBytes "clro"
    | {- clrt -} @MatchBytes "clrt"
    | {- clot -} @MatchBytes "clot"
    | {- ciis -} @MatchBytes "ciis"
    | {- cprt -} @MatchBytes "cprt"
    | {- dmnd -} @MatchBytes "dmnd"
    | {- dmdd -} @MatchBytes "dmdd"
    | {- D2B0 -} @MatchBytes "D2B0"
    | {- D2B1 -} @MatchBytes "D2B1"
    | {- D2B2 -} @MatchBytes "D2B2"
    | {- D2B3 -} @MatchBytes "D2B3"
    | {- gamt -} @MatchBytes "gamt"
    | {- kTRC -} @MatchBytes "kTRC"
    | {- gXYZ -} @MatchBytes "gXYZ"
    | {- gTRC -} @MatchBytes "gTRC"
    | {- lumi -} @MatchBytes "lumi"
    | {- meas -} @MatchBytes "meas"
    | {- wtpt -} @MatchBytes "wtpt"
    | {- ncl2 -} @MatchBytes "ncl2"
    | {- resp -} @MatchBytes "resp"
    | {- rig0 -} @MatchBytes "rig0"
    | {- pre0 -} @MatchBytes "pre0"
    | {- pre1 -} @MatchBytes "pre1"
    | {- pre2 -} @MatchBytes "pre2"
    | {- desc -} @MatchBytes "desc"
    | {- pseq -} @MatchBytes "pseq"
    | {- psid -} @MatchBytes "psid"
    | {- rXYZ -} @MatchBytes "rXYZ"
    | {- rTRC -} @MatchBytes "rTRC"
    | {- rig2 -} @MatchBytes "rig2"
    | {- tech -} @MatchBytes "tech"
    | {- vued -} @MatchBytes "vued"
    | {- view -} @MatchBytes "view"
    }
 
ICC._TagEntry : Grammar {} =
  do ICC._TagSignature
     ICC._BE32
     ICC._BE32
 
ICC._TagTable : Grammar {} =
  do (n : uint 64) <- do (_337 : uint 32) <- ICC.BE32
                         pure (_337 as uint 64)
     @Many[n] ICC._TagEntry
 
ICC._Main : Grammar {} =
  do ICC._ProfileHeader
     ICC._TagTable
 
ICC._PositionNumber : Grammar {} =
  do ICC._BE32
     ICC._BE32
 
ICC._Response16Number : Grammar {} =
  do ICC._BE16
     @MatchBytes [0,
                  0]
     ICC._BE32
 
ICC._Lut_8_16_AB : Grammar {} =
  Choose biased
    { {- lut8 -} ICC._Lut8Type
    | {- lut16 -} ICC._Lut16Type
    | {- lutAB -} ICC._LutAToBType
    }
 
ICC._ChromaticityType : Grammar {} =
  do ICC._StartTag "chrm"
     (number_of_device_channels : uint 64) <- do (_435 : uint 16) <- ICC.BE16
                                                 pure (_435 as uint 64)
     ICC._BE16
     @Many[number_of_device_channels] ICC._XYNumber
 
ICC._TagStructType : Grammar {} =
  do (s : Stream) <- CurrentStream
     ICC._StartTag "tstr"
     @Many[4] @GetByte
     (n : uint 64) <- do (_436 : uint 32) <- ICC.BE32
                         pure (_436 as uint 64)
     @Many[n] do (ent : ICC.TagEntry) <- ICC.TagEntry
                 ICC._Remote ICC.Tag do SetStream s
                                        ICC._ParseTag ent
