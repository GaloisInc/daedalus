module nitf_lib
 
--- Imports:
 
--- Type defs:
type nitf_lib.ClSy0 = Choose { country: [uint 8]
                             ; nato: {}
                             }
 
type nitf_lib.SecCtrlMarking = Choose { atomal: {}
                                      ; cndwdi: {}
                                      ; copyright: {}
                                      ; cosmic: {}
                                      ; crypto: {}
                                      ; efto: {}
                                      ; formrestData: {}
                                      ; fouo: {}
                                      ; generalService: {}
                                      ; limOffUse: {}
                                      ; limdis: {}
                                      ; nato: {}
                                      ; noContract: {}
                                      ; noncompartment: {}
                                      ; orcon: {}
                                      ; personalData: {}
                                      ; propin: {}
                                      ; restrictedData: {}
                                      ; sao: {}
                                      ; sao1: {}
                                      ; sao2: {}
                                      ; sao3: {}
                                      ; saoSi2: {}
                                      ; saoSi3: {}
                                      ; saoSi4: {}
                                      ; siop: {}
                                      ; siopEsi: {}
                                      ; specialControl: {}
                                      ; specialIntel: {}
                                      ; usOnly: {}
                                      ; warningNotice: {}
                                      ; wnintel: {}
                                      }
 
type nitf_lib.CodeWords0 = { first: nitf_lib.SecCtrlMarking
                           ; rest: [nitf_lib.SecCtrlMarking]
                           }
 
type nitf_lib.Date = { century: int
                     ; year: int
                     ; month: uint 64
                     ; day: uint 64
                     }
 
type nitf_lib.Declassification0 = Choose { decldate: nitf_lib.Date
                                         ; nodate: [uint 8]
                                         }
 
type nitf_lib.Declassification1 = Choose { notexempt: {}
                                         ; reason: [int]
                                         }
 
type nitf_lib.Declassification2 = Choose { confidential: {}
                                         ; restricted: {}
                                         ; secret: {}
                                         }
 
type nitf_lib.DefaultByte ?a3 = Choose { actual: ?a3
                                       ; default: {}
                                       }
 
type nitf_lib.Declassification3 = Choose { actual: nitf_lib.DefaultByte nitf_lib.Declassification2
                                         ; none: {}
                                         }
 
type nitf_lib.Declassification4 = Choose { hasdgdt: nitf_lib.Date
                                         ; nodgdt: {}
                                         }
 
type nitf_lib.Declassification5 = Choose { hascltx: [uint 8]
                                         ; nocltx: [uint 8]
                                         }
 
type nitf_lib.ClassificationAuthority0 = Choose { derivative: {}
                                                ; multiple: {}
                                                ; original: {}
                                                }
 
type nitf_lib.ClassificationAuthority1 = Choose { clsrsnA: {}
                                                ; clsrsnB: {}
                                                ; clsrsnC: {}
                                                ; clsrsnD: {}
                                                ; clsrsnE: {}
                                                ; clsrsnF: {}
                                                ; clsrsnG: {}
                                                }
 
type nitf_lib.FixedPoint = { digs: [int]
                           ; radix: [int]
                           }
 
type nitf_lib.SignedNum = Choose { neg: int
                                 ; pos: int
                                 }
 
type nitf_lib.OrBytes ?a4 = Choose { actual: ?a4
                                   ; default: {}
                                   }
 
type nitf_lib.Time = { hour: uint 64
                     ; min: uint 64
                     ; second: uint 64
                     }
 
type nitf_lib.DateTime = { date: nitf_lib.Date
                         ; time: nitf_lib.Time
                         }
 
type nitf_lib.PartialDate = { partCentury: nitf_lib.OrBytes int
                            ; partYear: nitf_lib.OrBytes int
                            ; partMonth: nitf_lib.OrBytes (uint 64)
                            ; partDay: nitf_lib.OrBytes (uint 64)
                            }
 
type nitf_lib.PartialTime = { partHour: nitf_lib.OrBytes (uint 64)
                            ; partMin: nitf_lib.OrBytes (uint 64)
                            ; partSecond: nitf_lib.OrBytes (uint 64)
                            }
 
type nitf_lib.PartialDateTime = { partDate: nitf_lib.PartialDate
                                ; partTime: nitf_lib.PartialTime
                                }
 
type nitf_lib.SecClas = Choose { confidential: {}
                               ; restricted: {}
                               ; secret: {}
                               ; topsecret: {}
                               ; unclassified: {}
                               }
 
type nitf_lib.DeclassificationType = Choose { date: {}
                                            ; datelv: {}
                                            ; event: {}
                                            ; eventlv: {}
                                            ; exempt: {}
                                            ; none: {}
                                            ; oadr: {}
                                            }
 
type nitf_lib.Declassification = { dctp: nitf_lib.DeclassificationType
                                 ; dcdt: nitf_lib.Declassification0
                                 ; dxcm: nitf_lib.Declassification1
                                 ; dg: nitf_lib.Declassification3
                                 ; dgdt: nitf_lib.Declassification4
                                 ; cltx: nitf_lib.Declassification5
                                 }
 
type nitf_lib.ClassificationAuthority = { authtp: nitf_lib.DefaultByte nitf_lib.ClassificationAuthority0
                                        ; auth: [uint 8]
                                        ; crsn: nitf_lib.DefaultByte nitf_lib.ClassificationAuthority1
                                        }
 
type nitf_lib.Security = { srdt: nitf_lib.OrBytes nitf_lib.Date
                         ; ctln: nitf_lib.OrBytes [int]
                         }
 
type nitf_lib.CommonSubheader = { clas: nitf_lib.SecClas
                                ; clsy: nitf_lib.OrBytes nitf_lib.ClSy0
                                ; code: nitf_lib.OrBytes nitf_lib.CodeWords0
                                ; ctlh: nitf_lib.OrBytes nitf_lib.SecCtrlMarking
                                ; rel: [uint 8]
                                ; decl: nitf_lib.Declassification
                                ; clauth: nitf_lib.ClassificationAuthority
                                ; sec: nitf_lib.Security
                                }
 
type nitf_lib.Location = { row: nitf_lib.SignedNum
                         ; col: nitf_lib.SignedNum
                         }
 
--- Rules:
 
nitf_lib.Chunk ?a5 (n : uint 64) (P : Grammar ?a5) : Grammar ?a5 =
  do (cur : Stream) <- CurrentStream
     (this : Stream) <- StreamLen n cur
     (next : Stream) <- StreamOff n cur
     SetStream this
     ($$ : ?a5) <- P
     SetStream next
     pure $$
 
nitf_lib.Guard (p : bool) : Grammar {} =
  Guard p
 
nitf_lib.numBase (base : int) (ds : [int]) : int =
  for ((val : int) = 0; (d : int) in ds)
    ((val * base) + d)
 
nitf_lib.numBaseUInt (base : uint 64) (ds : [uint 64]) : uint 64 =
  for ((val : uint 64) = 0; (d : uint 64) in ds)
    ((val * base) + d)
 
nitf_lib.strlen ?a0 ?a2 ?a3 (Traversable ?a0) (HasKey ?a0 ?a2) (HasElement ?a0 ?a3) (s : ?a0) : int =
  for ((len : int) = 0; (c : ?a3) in s)
    (len + 1)
 
nitf_lib.MyFail ?a0 : Grammar ?a0 =
  Commit
    do ($$ : ?a0) <- Choose fair
                       { }
       pure $$
 
nitf_lib.Etx : Grammar (uint 8) =
  Match {'\EOT'}
 
nitf_lib.BCS : Grammar (uint 8) =
  Match (((32 .. 126) | {'\f'}) | {'\r'})
 
nitf_lib.BCSA : Grammar (uint 8) =
  Match (32 .. 126)
 
nitf_lib.BCSN : Grammar (uint 8) =
  Match (((48 .. 57) | {'+'}) | {'-'})
 
nitf_lib.ECS : Grammar (uint 8) =
  nitf_lib.BCS
 
nitf_lib.ECSA : Grammar (uint 8) =
  nitf_lib.BCSA
 
nitf_lib.LowerCase : Grammar (uint 8) =
  Match ('a' .. 'z')
 
nitf_lib.UpperCase : Grammar (uint 8) =
  Match ('A' .. 'Z')
 
nitf_lib.Alpha : Grammar (uint 8) =
  Choose fair
    { nitf_lib.UpperCase
    | nitf_lib.LowerCase
    }
 
nitf_lib.Numeral : Grammar (uint 8) =
  Match ('0' .. '9')
 
nitf_lib.Sign : Grammar (uint 8) =
  Match ({'+'} | {'-'})
 
nitf_lib.Digit : Grammar int =
  do (d : uint 8) <- nitf_lib.Numeral
     ($$ : int) <- pure (d - '0' as int)
     pure $$
 
nitf_lib.DigitUInt : Grammar (uint 64) =
  do (d : uint 8) <- nitf_lib.Numeral
     ($$ : uint 64) <- pure (d - '0' as uint 64)
     pure $$
 
nitf_lib.FixedPoint : Grammar nitf_lib.FixedPoint =
  do (digs : [int]) <- Many[] nitf_lib.Digit
     @Match {'.'}
     (radix : [int]) <- Many[] nitf_lib.Digit
     pure {digs = digs,
           radix = radix}
 
nitf_lib.UnsignedNum (digs : uint 64) : Grammar int =
  do (ds : [int]) <- Many[digs] nitf_lib.Digit
     ($$ : int) <- pure (nitf_lib.numBase 10 ds)
     pure $$
 
nitf_lib.UnsignedNumUInt (digs : uint 64) : Grammar (uint 64) =
  do (ds : [uint 64]) <- Many[digs] nitf_lib.DigitUInt
     ($$ : uint 64) <- pure (nitf_lib.numBaseUInt 10 ds)
     pure $$
 
nitf_lib.NegNum (digs : uint 64) : Grammar int =
  do @Match {'-'}
     (n : int) <- nitf_lib.UnsignedNum digs
     ($$ : int) <- pure (0 - n)
     pure $$
 
nitf_lib.SignedNum (digs : uint 64) : Grammar nitf_lib.SignedNum =
  Choose fair
    { {- pos -} do (_635 : int) <- nitf_lib.UnsignedNum (digs + 1)
                   pure {pos: _635}
    | {- neg -} do (_636 : int) <- nitf_lib.NegNum digs
                   pure {neg: _636}
    }
 
nitf_lib._Guard (p : bool) : Grammar {} =
  Guard p
 
nitf_lib.BoundedNum (digs : uint 64) (lb : uint 64) (ub : uint 64) : Grammar (uint 64) =
  do ($$ : uint 64) <- nitf_lib.UnsignedNumUInt digs
     nitf_lib._Guard (lb <= $$)
     nitf_lib._Guard ($$ <= ub)
     pure $$
 
nitf_lib.PosNumber (digs : uint 64) : Grammar (uint 64) =
  do ($$ : uint 64) <- nitf_lib.UnsignedNumUInt digs
     nitf_lib._Guard (1 <= $$)
     pure $$
 
nitf_lib.IsNum (digs : uint 64) (v : uint 64) : Grammar (uint 64) =
  nitf_lib.BoundedNum digs v v
 
nitf_lib.BoundedDigit (lb : uint 64) (ub : uint 64) : Grammar (uint 64) =
  nitf_lib.BoundedNum 1 lb ub
 
nitf_lib.UpperBoundedDigit (ub : uint 64) : Grammar (uint 64) =
  nitf_lib.BoundedDigit 0 ub
 
nitf_lib.BoundedPos (digs : uint 64) (ub : uint 64) : Grammar (uint 64) =
  nitf_lib.BoundedNum digs 1 ub
 
nitf_lib.UpperBounded (digs : uint 64) (ub : uint 64) : Grammar (uint 64) =
  nitf_lib.BoundedNum digs 0 ub
 
nitf_lib.PosQuad : Grammar (uint 64) =
  nitf_lib.BoundedNum 4 1 9999
 
nitf_lib.LowerBoundedOrZero (digs : uint 64) (lb : uint 64) : Grammar (uint 64) =
  do ($$ : uint 64) <- nitf_lib.UnsignedNumUInt digs
     Choose fair
       { nitf_lib._Guard ($$ == 0)
       | nitf_lib._Guard (lb <= $$)
       }
     pure $$
 
nitf_lib.Pos : Grammar (uint 8) =
  Match ('1' .. '9')
 
nitf_lib.AlphaNum : Grammar (uint 8) =
  Choose fair
    { nitf_lib.Alpha
    | nitf_lib.Numeral
    }
 
nitf_lib.Byte : Grammar (uint 8) =
  Match (0 .. 255)
 
nitf_lib.Spaces (n : uint 64) : Grammar [uint 8] =
  Many[n] Match {' '}
 
nitf_lib.PadWSpaces ?a3 (n : uint 64) (P : Grammar ?a3) : Grammar ?a3 =
  nitf_lib.Chunk ?a3 n do ($$ : ?a3) <- P
                          @Many[] @Match {' '}
                          END
                          pure $$
 
nitf_lib.DefaultByte ?a3 ?a7 (D : Grammar ?a7) (P : Grammar ?a3) : Grammar (nitf_lib.DefaultByte ?a3) =
  Choose fair
    { {- actual -} do (_637 : ?a3) <- P
                      pure {actual: _637}
    | {- default -} do (_638 : {}) <- do D
                                         pure {}
                       pure {default: _638}
    }
 
nitf_lib.DefaultSpace ?a1 (P : Grammar ?a1) : Grammar (nitf_lib.DefaultByte ?a1) =
  nitf_lib.DefaultByte ?a1 (uint 8) (Match {' '}) P
 
nitf_lib.OrBytes ?a4 (n : uint 64) (b : [uint 8]) (P : Grammar ?a4) : Grammar (nitf_lib.OrBytes ?a4) =
  Choose fair
    { {- actual -} do (_639 : ?a4) <- P
                      pure {actual: _639}
    | {- default -} do (_640 : {}) <- @Many[n] @MatchBytes b
                       pure {default: _640}
    }
 
nitf_lib.DefaultSpaces ?a2 (n : uint 64) (P : Grammar ?a2) : Grammar (nitf_lib.OrBytes ?a2) =
  nitf_lib.OrBytes ?a2 n " " P
 
nitf_lib.OrHyphens ?a2 (n : uint 64) (P : Grammar ?a2) : Grammar (nitf_lib.OrBytes ?a2) =
  nitf_lib.OrBytes ?a2 n "-" P
 
nitf_lib.Eq ?a1 (x : ?a1) (y : ?a1) : Grammar {} =
  nitf_lib.Guard (x == y)
 
nitf_lib.Lt ?a1 (x : ?a1) (y : ?a1) : Grammar {} =
  nitf_lib.Guard (x < y)
 
nitf_lib.Leq ?a1 (x : ?a1) (y : ?a1) : Grammar {} =
  Choose fair
    { nitf_lib.Eq ?a1 x y
    | nitf_lib.Lt ?a1 x y
    }
 
nitf_lib.PartialEq ?a7 (x : nitf_lib.OrBytes ?a7) (y : nitf_lib.OrBytes ?a7) : Grammar {} =
  Choose fair
    { Choose fair
        { case x is
            { {| default = _641 |} -> pure _641
            }
        | case y is
            { {| default = _642 |} -> pure _642
            }
        }
    | do (x0 : ?a7) <- case x is
                         { {| actual = _643 |} -> pure _643
                         }
         (y0 : ?a7) <- case y is
                         { {| actual = _644 |} -> pure _644
                         }
         ($$ : {}) <- nitf_lib.Eq ?a7 x0 y0
         pure $$
    }
 
nitf_lib.PartialLt ?a7 (x : nitf_lib.OrBytes ?a7) (y : nitf_lib.OrBytes ?a7) : Grammar {} =
  Choose fair
    { Choose fair
        { case x is
            { {| default = _646 |} -> pure _646
            }
        | case y is
            { {| default = _647 |} -> pure _647
            }
        }
    | do (x0 : ?a7) <- case x is
                         { {| actual = _648 |} -> pure _648
                         }
         (y0 : ?a7) <- case y is
                         { {| actual = _649 |} -> pure _649
                         }
         ($$ : {}) <- nitf_lib.Lt ?a7 x0 y0
         pure $$
    }
 
nitf_lib.PartialLeq ?a7 (x : nitf_lib.OrBytes ?a7) (y : nitf_lib.OrBytes ?a7) : Grammar {} =
  Choose fair
    { Choose fair
        { case x is
            { {| default = _651 |} -> pure _651
            }
        | case y is
            { {| default = _652 |} -> pure _652
            }
        }
    | do (x0 : ?a7) <- case x is
                         { {| actual = _653 |} -> pure _653
                         }
         (y0 : ?a7) <- case y is
                         { {| actual = _654 |} -> pure _654
                         }
         ($$ : {}) <- nitf_lib.Leq ?a7 x0 y0
         pure $$
    }
 
nitf_lib.Date : Grammar nitf_lib.Date =
  do (century : int) <- nitf_lib.UnsignedNum 2
     (year : int) <- nitf_lib.UnsignedNum 2
     (month : uint 64) <- nitf_lib.BoundedPos 2 12
     (day : uint 64) <- nitf_lib.BoundedPos 2 31
     pure {century = century,
           year = year,
           month = month,
           day = day}
 
nitf_lib.Epoch : Grammar nitf_lib.Date =
  do (century : int) <- pure 19
     (year : int) <- pure 70
     (month : uint 64) <- pure 1
     (day : uint 64) <- pure 1
     pure {century = century,
           year = year,
           month = month,
           day = day}
 
nitf_lib.Today : Grammar nitf_lib.Date =
  do (century : int) <- pure 20
     (year : int) <- pure 20
     (month : uint 64) <- pure 5
     (day : uint 64) <- pure 22
     pure {century = century,
           year = year,
           month = month,
           day = day}
 
nitf_lib.Time : Grammar nitf_lib.Time =
  do (hour : uint 64) <- nitf_lib.UpperBounded 2 23
     (min : uint 64) <- nitf_lib.UpperBounded 2 59
     (second : uint 64) <- nitf_lib.UpperBounded 2 59
     pure {hour = hour,
           min = min,
           second = second}
 
nitf_lib.DateTime : Grammar nitf_lib.DateTime =
  do (date : nitf_lib.Date) <- nitf_lib.Date
     (time : nitf_lib.Time) <- nitf_lib.Time
     pure {date = date,
           time = time}
 
nitf_lib.PartialDate : Grammar nitf_lib.PartialDate =
  do (partCentury : nitf_lib.OrBytes int) <- nitf_lib.OrHyphens int 2 (nitf_lib.UnsignedNum 2)
     (partYear : nitf_lib.OrBytes int) <- nitf_lib.OrHyphens int 2 (nitf_lib.UnsignedNum 2)
     (partMonth : nitf_lib.OrBytes (uint 64)) <- nitf_lib.OrHyphens (uint 64) 2 (nitf_lib.BoundedPos 2 12)
     (partDay : nitf_lib.OrBytes (uint 64)) <- nitf_lib.OrHyphens (uint 64) 2 (nitf_lib.BoundedPos 2 31)
     pure {partCentury = partCentury,
           partYear = partYear,
           partMonth = partMonth,
           partDay = partDay}
 
nitf_lib.LiftDate (d : nitf_lib.Date) : Grammar nitf_lib.PartialDate =
  do (partCentury : nitf_lib.OrBytes int) <- pure {actual: (d.century)}
     (partYear : nitf_lib.OrBytes int) <- pure {actual: (d.year)}
     (partMonth : nitf_lib.OrBytes (uint 64)) <- pure {actual: (d.month)}
     (partDay : nitf_lib.OrBytes (uint 64)) <- pure {actual: (d.day)}
     pure {partCentury = partCentury,
           partYear = partYear,
           partMonth = partMonth,
           partDay = partDay}
 
nitf_lib.PartialTime : Grammar nitf_lib.PartialTime =
  do (partHour : nitf_lib.OrBytes (uint 64)) <- nitf_lib.OrHyphens (uint 64) 2 (nitf_lib.UpperBounded 2 23)
     (partMin : nitf_lib.OrBytes (uint 64)) <- nitf_lib.OrHyphens (uint 64) 2 (nitf_lib.UpperBounded 2 59)
     (partSecond : nitf_lib.OrBytes (uint 64)) <- nitf_lib.OrHyphens (uint 64) 2 (nitf_lib.UpperBounded 2 59)
     pure {partHour = partHour,
           partMin = partMin,
           partSecond = partSecond}
 
nitf_lib.LiftTime (t : nitf_lib.Time) : Grammar nitf_lib.PartialTime =
  do (partHour : nitf_lib.OrBytes (uint 64)) <- pure {actual: (t.hour)}
     (partMin : nitf_lib.OrBytes (uint 64)) <- pure {actual: (t.min)}
     (partSecond : nitf_lib.OrBytes (uint 64)) <- pure {actual: (t.second)}
     pure {partHour = partHour,
           partMin = partMin,
           partSecond = partSecond}
 
nitf_lib.PartialDateTime : Grammar nitf_lib.PartialDateTime =
  do (partDate : nitf_lib.PartialDate) <- nitf_lib.PartialDate
     (partTime : nitf_lib.PartialTime) <- nitf_lib.PartialTime
     pure {partDate = partDate,
           partTime = partTime}
 
nitf_lib.LiftDateTime (dt : nitf_lib.DateTime) : Grammar nitf_lib.PartialDateTime =
  do (partDate : nitf_lib.PartialDate) <- nitf_lib.LiftDate (dt.date)
     (partTime : nitf_lib.PartialTime) <- nitf_lib.LiftTime (dt.time)
     pure {partDate = partDate,
           partTime = partTime}
 
nitf_lib._Eq ?a1 (x : ?a1) (y : ?a1) : Grammar {} =
  nitf_lib._Guard (x == y)
 
nitf_lib._PartialEq ?a7 (x : nitf_lib.OrBytes ?a7) (y : nitf_lib.OrBytes ?a7) : Grammar {} =
  Choose fair
    { Choose fair
        { case x is
            { {| default = _641 |} -> pure {}
            }
        | case y is
            { {| default = _642 |} -> pure {}
            }
        }
    | do (x0 : ?a7) <- case x is
                         { {| actual = _643 |} -> pure _643
                         }
         (y0 : ?a7) <- case y is
                         { {| actual = _644 |} -> pure _644
                         }
         nitf_lib._Eq ?a7 x0 y0
    }
 
nitf_lib.PartialOrdDate (d0 : nitf_lib.PartialDate) (d1 : nitf_lib.PartialDate) : Grammar {} =
  Choose fair
    { nitf_lib.PartialLt int (d0.partCentury) (d1.partCentury)
    | do nitf_lib._PartialEq int (d0.partCentury) (d1.partCentury)
         ($$ : {}) <- Choose fair
                        { nitf_lib.PartialLt int (d0.partYear) (d1.partYear)
                        | do nitf_lib._PartialEq int (d0.partYear) (d1.partYear)
                             ($$ : {}) <- Choose fair
                                            { nitf_lib.PartialLt (uint 64) (d0.partMonth) (d1.partMonth)
                                            | do nitf_lib._PartialEq (uint 64) (d0.partMonth) (d1.partMonth)
                                                 ($$ : {}) <- nitf_lib.PartialLeq (uint 64) (d0.partDay) (d1.partDay)
                                                 pure $$
                                            }
                             pure $$
                        }
         pure $$
    }
 
nitf_lib.PartialOrdTime (t0 : nitf_lib.PartialTime) (t1 : nitf_lib.PartialTime) : Grammar {} =
  Choose fair
    { nitf_lib.PartialLt (uint 64) (t0.partHour) (t1.partHour)
    | do nitf_lib._PartialEq (uint 64) (t0.partHour) (t1.partHour)
         ($$ : {}) <- Choose fair
                        { nitf_lib.PartialLt (uint 64) (t0.partMin) (t1.partMin)
                        | do nitf_lib._PartialEq (uint 64) (t0.partMin) (t1.partMin)
                             ($$ : {}) <- nitf_lib.PartialLeq (uint 64) (t0.partSecond) (t1.partSecond)
                             pure $$
                        }
         pure $$
    }
 
nitf_lib._Lt ?a1 (x : ?a1) (y : ?a1) : Grammar {} =
  nitf_lib._Guard (x < y)
 
nitf_lib._PartialLt ?a7 (x : nitf_lib.OrBytes ?a7) (y : nitf_lib.OrBytes ?a7) : Grammar {} =
  Choose fair
    { Choose fair
        { case x is
            { {| default = _646 |} -> pure {}
            }
        | case y is
            { {| default = _647 |} -> pure {}
            }
        }
    | do (x0 : ?a7) <- case x is
                         { {| actual = _648 |} -> pure _648
                         }
         (y0 : ?a7) <- case y is
                         { {| actual = _649 |} -> pure _649
                         }
         nitf_lib._Lt ?a7 x0 y0
    }
 
nitf_lib._Leq ?a1 (x : ?a1) (y : ?a1) : Grammar {} =
  Choose fair
    { nitf_lib._Eq ?a1 x y
    | nitf_lib._Lt ?a1 x y
    }
 
nitf_lib._PartialLeq ?a7 (x : nitf_lib.OrBytes ?a7) (y : nitf_lib.OrBytes ?a7) : Grammar {} =
  Choose fair
    { Choose fair
        { case x is
            { {| default = _651 |} -> pure {}
            }
        | case y is
            { {| default = _652 |} -> pure {}
            }
        }
    | do (x0 : ?a7) <- case x is
                         { {| actual = _653 |} -> pure _653
                         }
         (y0 : ?a7) <- case y is
                         { {| actual = _654 |} -> pure _654
                         }
         nitf_lib._Leq ?a7 x0 y0
    }
 
nitf_lib._PartialOrdDate (d0 : nitf_lib.PartialDate) (d1 : nitf_lib.PartialDate) : Grammar {} =
  Choose fair
    { nitf_lib._PartialLt int (d0.partCentury) (d1.partCentury)
    | do nitf_lib._PartialEq int (d0.partCentury) (d1.partCentury)
         Choose fair
           { nitf_lib._PartialLt int (d0.partYear) (d1.partYear)
           | do nitf_lib._PartialEq int (d0.partYear) (d1.partYear)
                Choose fair
                  { nitf_lib._PartialLt (uint 64) (d0.partMonth) (d1.partMonth)
                  | do nitf_lib._PartialEq (uint 64) (d0.partMonth) (d1.partMonth)
                       nitf_lib._PartialLeq (uint 64) (d0.partDay) (d1.partDay)
                  }
           }
    }
 
nitf_lib.PartialOrdDateTime (dt0 : nitf_lib.PartialDateTime) (dt1 : nitf_lib.PartialDateTime) : Grammar {} =
  do nitf_lib._PartialOrdDate (dt0.partDate) (dt1.partDate)
     ($$ : {}) <- nitf_lib.PartialOrdTime (dt0.partTime) (dt1.partTime)
     pure $$
 
nitf_lib.OrdDate (d0 : nitf_lib.Date) (d1 : nitf_lib.Date) : Grammar {} =
  do (d0val : nitf_lib.PartialDate) <- nitf_lib.LiftDate d0
     (d1val : nitf_lib.PartialDate) <- nitf_lib.LiftDate d1
     ($$ : {}) <- nitf_lib.PartialOrdDate d0val d1val
     pure $$
 
nitf_lib.SecClas : Grammar nitf_lib.SecClas =
  Choose fair
    { {- topsecret -} do (_663 : {}) <- @Match {'T'}
                         pure {topsecret: _663}
    | {- secret -} do (_664 : {}) <- @Match {'S'}
                      pure {secret: _664}
    | {- confidential -} do (_665 : {}) <- @Match {'C'}
                            pure {confidential: _665}
    | {- restricted -} do (_666 : {}) <- @Match {'R'}
                          pure {restricted: _666}
    | {- unclassified -} do (_667 : {}) <- @Match {'U'}
                            pure {unclassified: _667}
    }
 
nitf_lib.CountryCode : Grammar [uint 8] =
  Many[2] nitf_lib.AlphaNum
 
nitf_lib.ClSy : Grammar (nitf_lib.OrBytes nitf_lib.ClSy0) =
  nitf_lib.DefaultSpaces nitf_lib.ClSy0 2 Choose fair
                                            { {- nato -} do (_668 : {}) <- @MatchBytes "XN"
                                                            pure {nato: _668}
                                            | {- country -} do (_669 : [uint 8]) <- nitf_lib.CountryCode
                                                               pure {country: _669}
                                            }
 
nitf_lib.SecCtrlMarking : Grammar nitf_lib.SecCtrlMarking =
  Choose fair
    { {- atomal -} do (_670 : {}) <- @MatchBytes "AT"
                      pure {atomal: _670}
    | {- cndwdi -} do (_671 : {}) <- @MatchBytes "CN"
                      pure {cndwdi: _671}
    | {- copyright -} do (_672 : {}) <- @MatchBytes "PX"
                         pure {copyright: _672}
    | {- cosmic -} do (_673 : {}) <- @MatchBytes "CS"
                      pure {cosmic: _673}
    | {- crypto -} do (_674 : {}) <- @MatchBytes "CR"
                      pure {crypto: _674}
    | {- efto -} do (_675 : {}) <- @MatchBytes "TX"
                    pure {efto: _675}
    | {- formrestData -} do (_676 : {}) <- @MatchBytes "RF"
                            pure {formrestData: _676}
    | {- fouo -} do (_677 : {}) <- @MatchBytes "FO"
                    pure {fouo: _677}
    | {- generalService -} do (_678 : {}) <- @MatchBytes "GS"
                              pure {generalService: _678}
    | {- limOffUse -} do (_679 : {}) <- @MatchBytes "LU"
                         pure {limOffUse: _679}
    | {- limdis -} do (_680 : {}) <- @MatchBytes "DS"
                      pure {limdis: _680}
    | {- nato -} do (_681 : {}) <- @MatchBytes "NS"
                    pure {nato: _681}
    | {- noContract -} do (_682 : {}) <- @MatchBytes "NC"
                          pure {noContract: _682}
    | {- noncompartment -} do (_683 : {}) <- @MatchBytes "NT"
                              pure {noncompartment: _683}
    | {- orcon -} do (_684 : {}) <- @MatchBytes "OR"
                     pure {orcon: _684}
    | {- personalData -} do (_685 : {}) <- @MatchBytes "IN"
                            pure {personalData: _685}
    | {- propin -} do (_686 : {}) <- @MatchBytes "PI"
                      pure {propin: _686}
    | {- restrictedData -} do (_687 : {}) <- @MatchBytes "RD"
                              pure {restrictedData: _687}
    | {- sao -} do (_688 : {}) <- @MatchBytes "SA"
                   pure {sao: _688}
    | {- sao1 -} do (_689 : {}) <- @MatchBytes "SL"
                    pure {sao1: _689}
    | {- sao2 -} do (_690 : {}) <- @MatchBytes "HA"
                    pure {sao2: _690}
    | {- sao3 -} do (_691 : {}) <- @MatchBytes "HB"
                    pure {sao3: _691}
    | {- saoSi2 -} do (_692 : {}) <- @MatchBytes "SK"
                      pure {saoSi2: _692}
    | {- saoSi3 -} do (_693 : {}) <- @MatchBytes "HC"
                      pure {saoSi3: _693}
    | {- saoSi4 -} do (_694 : {}) <- @MatchBytes "HD"
                      pure {saoSi4: _694}
    | {- siop -} do (_695 : {}) <- @MatchBytes "SH"
                    pure {siop: _695}
    | {- siopEsi -} do (_696 : {}) <- @MatchBytes "SE"
                       pure {siopEsi: _696}
    | {- specialControl -} do (_697 : {}) <- @MatchBytes "SC"
                              pure {specialControl: _697}
    | {- specialIntel -} do (_698 : {}) <- @MatchBytes "SI"
                            pure {specialIntel: _698}
    | {- usOnly -} do (_699 : {}) <- @MatchBytes "UO"
                      pure {usOnly: _699}
    | {- warningNotice -} do (_700 : {}) <- @MatchBytes "WN"
                             pure {warningNotice: _700}
    | {- wnintel -} do (_701 : {}) <- @MatchBytes "WI"
                       pure {wnintel: _701}
    }
 
nitf_lib._Spaces (n : uint 64) : Grammar {} =
  @Many[n] @Match {' '}
 
nitf_lib.CodeWords : Grammar (nitf_lib.OrBytes nitf_lib.CodeWords0) =
  nitf_lib.DefaultSpaces nitf_lib.CodeWords0 11 do (first : nitf_lib.SecCtrlMarking) <- nitf_lib.SecCtrlMarking
                                                   (rest : [nitf_lib.SecCtrlMarking]) <- Many[ .. 3 ] do @Match {' '}
                                                                                                         ($$ : nitf_lib.SecCtrlMarking) <- nitf_lib.SecCtrlMarking
                                                                                                         pure $$
                                                   nitf_lib._Spaces (11 - (2 + (3 * (Length rest))))
                                                   pure {first = first,
                                                         rest = rest}
 
nitf_lib.CtlHandling : Grammar (nitf_lib.OrBytes nitf_lib.SecCtrlMarking) =
  nitf_lib.DefaultSpaces nitf_lib.SecCtrlMarking 2 nitf_lib.SecCtrlMarking
 
nitf_lib.Release : Grammar [uint 8] =
  Many[20] Choose fair
             { nitf_lib.UpperCase
             | Match {' '}
             }
 
nitf_lib._Chunk ?a5 (n : uint 64) (_P : Grammar {}) : Grammar {} =
  do (cur : Stream) <- CurrentStream
     (this : Stream) <- StreamLen n cur
     (next : Stream) <- StreamOff n cur
     SetStream this
     _P
     SetStream next
 
nitf_lib._PadWSpaces ?a3 (n : uint 64) (_P : Grammar {}) : Grammar {} =
  nitf_lib._Chunk ?a3 n do _P
                           @Many[] @Match {' '}
                           END
 
nitf_lib.DeclassificationType : Grammar nitf_lib.DeclassificationType =
  Choose fair
    { {- date -} do (_703 : {}) <- @MatchBytes "DD"
                    pure {date: _703}
    | {- event -} do (_704 : {}) <- @MatchBytes "DE"
                     pure {event: _704}
    | {- datelv -} do (_705 : {}) <- @MatchBytes "GD"
                      pure {datelv: _705}
    | {- eventlv -} do (_706 : {}) <- @MatchBytes "GE"
                       pure {eventlv: _706}
    | {- oadr -} do (_707 : {}) <- nitf_lib._PadWSpaces [uint 8] 1 (@MatchBytes "O")
                    pure {oadr: _707}
    | {- exempt -} do (_708 : {}) <- nitf_lib._PadWSpaces [uint 8] 1 (@MatchBytes "X")
                      pure {exempt: _708}
    | {- none -} do (_709 : {}) <- nitf_lib._Spaces 2
                    pure {none: _709}
    }
 
nitf_lib.Declassification : Grammar nitf_lib.Declassification =
  do (dctp : nitf_lib.DeclassificationType) <- nitf_lib.DeclassificationType
     (dcdt : nitf_lib.Declassification0) <- Choose fair
                                              { {- decldate -} do (_713 : nitf_lib.Date) <- do Choose fair
                                                                                                 { case dctp is
                                                                                                     { {| date = _710 |} -> pure {}
                                                                                                     }
                                                                                                 | case dctp is
                                                                                                     { {| datelv = _711 |} -> pure {}
                                                                                                     }
                                                                                                 }
                                                                                               ($$ : nitf_lib.Date) <- nitf_lib.Date
                                                                                               pure $$
                                                                  pure {decldate: _713}
                                              | {- nodate -} do (_720 : [uint 8]) <- do Choose fair
                                                                                          { Choose fair
                                                                                              { Choose fair
                                                                                                  { Choose fair
                                                                                                      { case dctp is
                                                                                                          { {| event = _714 |} -> pure {}
                                                                                                          }
                                                                                                      | case dctp is
                                                                                                          { {| eventlv = _715 |} -> pure {}
                                                                                                          }
                                                                                                      }
                                                                                                  | case dctp is
                                                                                                      { {| oadr = _716 |} -> pure {}
                                                                                                      }
                                                                                                  }
                                                                                              | case dctp is
                                                                                                  { {| exempt = _717 |} -> pure {}
                                                                                                  }
                                                                                              }
                                                                                          | case dctp is
                                                                                              { {| none = _718 |} -> pure {}
                                                                                              }
                                                                                          }
                                                                                        ($$ : [uint 8]) <- nitf_lib.Spaces 8
                                                                                        pure $$
                                                                pure {nodate: _720}
                                              }
     (dxcm : nitf_lib.Declassification1) <- Choose fair
                                              { {- reason -} do (_724 : [int]) <- do case dctp is
                                                                                       { {| exempt = _721 |} -> pure {}
                                                                                       }
                                                                                     @Match {'X'}
                                                                                     ($$ : [int]) <- nitf_lib.PadWSpaces [int] 3 (Many[ .. 3 ] nitf_lib.Digit)
                                                                                     (v : int) <- pure (nitf_lib.numBase 10 $$)
                                                                                     Choose fair
                                                                                       { do nitf_lib._Guard (1 <= v)
                                                                                            nitf_lib._Guard (v <= 8)
                                                                                       | do nitf_lib._Guard (251 <= v)
                                                                                            nitf_lib._Guard (v <= 259)
                                                                                       }
                                                                                     pure $$
                                                                pure {reason: _724}
                                              | {- notexempt -} do (_732 : {}) <- do Choose fair
                                                                                       { Choose fair
                                                                                           { Choose fair
                                                                                               { Choose fair
                                                                                                   { Choose fair
                                                                                                       { case dctp is
                                                                                                           { {| date = _725 |} -> pure {}
                                                                                                           }
                                                                                                       | case dctp is
                                                                                                           { {| event = _726 |} -> pure {}
                                                                                                           }
                                                                                                       }
                                                                                                   | case dctp is
                                                                                                       { {| datelv = _727 |} -> pure {}
                                                                                                       }
                                                                                                   }
                                                                                               | case dctp is
                                                                                                   { {| eventlv = _728 |} -> pure {}
                                                                                                   }
                                                                                               }
                                                                                           | case dctp is
                                                                                               { {| oadr = _729 |} -> pure {}
                                                                                               }
                                                                                           }
                                                                                       | case dctp is
                                                                                           { {| none = _730 |} -> pure {}
                                                                                           }
                                                                                       }
                                                                                     nitf_lib._Spaces 4
                                                                   pure {notexempt: _732}
                                              }
     (dg : nitf_lib.Declassification3) <- Choose fair
                                            { {- actual -} do (_739 : nitf_lib.DefaultByte nitf_lib.Declassification2) <- do Choose fair
                                                                                                                               { case dctp is
                                                                                                                                   { {| datelv = _733 |} -> pure {}
                                                                                                                                   }
                                                                                                                               | case dctp is
                                                                                                                                   { {| eventlv = _734 |} -> pure {}
                                                                                                                                   }
                                                                                                                               }
                                                                                                                             ($$ : nitf_lib.DefaultByte nitf_lib.Declassification2) <- nitf_lib.DefaultSpace nitf_lib.Declassification2 Choose fair
                                                                                                                                                                                                                                          { {- secret -} do (_736 : {}) <- @Match {'S'}
                                                                                                                                                                                                                                                            pure {secret: _736}
                                                                                                                                                                                                                                          | {- confidential -} do (_737 : {}) <- @Match {'C'}
                                                                                                                                                                                                                                                                  pure {confidential: _737}
                                                                                                                                                                                                                                          | {- restricted -} do (_738 : {}) <- @Match {'R'}
                                                                                                                                                                                                                                                                pure {restricted: _738}
                                                                                                                                                                                                                                          }
                                                                                                                             pure $$
                                                              pure {actual: _739}
                                            | {- none -} do (_746 : {}) <- do Choose fair
                                                                                { Choose fair
                                                                                    { Choose fair
                                                                                        { Choose fair
                                                                                            { case dctp is
                                                                                                { {| date = _740 |} -> pure {}
                                                                                                }
                                                                                            | case dctp is
                                                                                                { {| event = _741 |} -> pure {}
                                                                                                }
                                                                                            }
                                                                                        | case dctp is
                                                                                            { {| oadr = _742 |} -> pure {}
                                                                                            }
                                                                                        }
                                                                                    | case dctp is
                                                                                        { {| exempt = _743 |} -> pure {}
                                                                                        }
                                                                                    }
                                                                                | case dctp is
                                                                                    { {| none = _744 |} -> pure {}
                                                                                    }
                                                                                }
                                                                              nitf_lib._Spaces 1
                                                            pure {none: _746}
                                            }
     (dgdt : nitf_lib.Declassification4) <- Choose fair
                                              { {- hasdgdt -} do (_749 : nitf_lib.Date) <- do case dctp is
                                                                                                { {| datelv = _747 |} -> pure {}
                                                                                                }
                                                                                              ($$ : nitf_lib.Date) <- nitf_lib.Date
                                                                                              pure $$
                                                                 pure {hasdgdt: _749}
                                              | {- nodgdt -} do (_757 : {}) <- do Choose fair
                                                                                    { Choose fair
                                                                                        { Choose fair
                                                                                            { Choose fair
                                                                                                { Choose fair
                                                                                                    { case dctp is
                                                                                                        { {| date = _750 |} -> pure {}
                                                                                                        }
                                                                                                    | case dctp is
                                                                                                        { {| event = _751 |} -> pure {}
                                                                                                        }
                                                                                                    }
                                                                                                | case dctp is
                                                                                                    { {| eventlv = _752 |} -> pure {}
                                                                                                    }
                                                                                                }
                                                                                            | case dctp is
                                                                                                { {| oadr = _753 |} -> pure {}
                                                                                                }
                                                                                            }
                                                                                        | case dctp is
                                                                                            { {| exempt = _754 |} -> pure {}
                                                                                            }
                                                                                        }
                                                                                    | case dctp is
                                                                                        { {| none = _755 |} -> pure {}
                                                                                        }
                                                                                    }
                                                                                  nitf_lib._Spaces 8
                                                                pure {nodgdt: _757}
                                              }
     (cltx : nitf_lib.Declassification5) <- Choose fair
                                              { {- hascltx -} do (_761 : [uint 8]) <- do Choose fair
                                                                                           { case dctp is
                                                                                               { {| datelv = _758 |} -> pure {}
                                                                                               }
                                                                                           | case dctp is
                                                                                               { {| eventlv = _759 |} -> pure {}
                                                                                               }
                                                                                           }
                                                                                         ($$ : [uint 8]) <- Many[43] nitf_lib.ECSA
                                                                                         pure $$
                                                                 pure {hascltx: _761}
                                              | {- nocltx -} do (_762 : [uint 8]) <- nitf_lib.Spaces 43
                                                                pure {nocltx: _762}
                                              }
     pure {dctp = dctp,
           dcdt = dcdt,
           dxcm = dxcm,
           dg = dg,
           dgdt = dgdt,
           cltx = cltx}
 
nitf_lib.ClassificationAuthority : Grammar nitf_lib.ClassificationAuthority =
  do (authtp : nitf_lib.DefaultByte nitf_lib.ClassificationAuthority0) <- nitf_lib.DefaultSpace nitf_lib.ClassificationAuthority0 Choose fair
                                                                                                                                    { {- original -} do (_763 : {}) <- @Match {'O'}
                                                                                                                                                        pure {original: _763}
                                                                                                                                    | {- derivative -} do (_764 : {}) <- @Match {'D'}
                                                                                                                                                          pure {derivative: _764}
                                                                                                                                    | {- multiple -} do (_765 : {}) <- @Match {'M'}
                                                                                                                                                        pure {multiple: _765}
                                                                                                                                    }
     (auth : [uint 8]) <- Many[40] nitf_lib.ECSA
     (crsn : nitf_lib.DefaultByte nitf_lib.ClassificationAuthority1) <- nitf_lib.DefaultSpace nitf_lib.ClassificationAuthority1 Choose fair
                                                                                                                                  { {- clsrsnA -} do (_766 : {}) <- @Match {'A'}
                                                                                                                                                     pure {clsrsnA: _766}
                                                                                                                                  | {- clsrsnB -} do (_767 : {}) <- @Match {'B'}
                                                                                                                                                     pure {clsrsnB: _767}
                                                                                                                                  | {- clsrsnC -} do (_768 : {}) <- @Match {'C'}
                                                                                                                                                     pure {clsrsnC: _768}
                                                                                                                                  | {- clsrsnD -} do (_769 : {}) <- @Match {'D'}
                                                                                                                                                     pure {clsrsnD: _769}
                                                                                                                                  | {- clsrsnE -} do (_770 : {}) <- @Match {'E'}
                                                                                                                                                     pure {clsrsnE: _770}
                                                                                                                                  | {- clsrsnF -} do (_771 : {}) <- @Match {'F'}
                                                                                                                                                     pure {clsrsnF: _771}
                                                                                                                                  | {- clsrsnG -} do (_772 : {}) <- @Match {'G'}
                                                                                                                                                     pure {clsrsnG: _772}
                                                                                                                                  }
     pure {authtp = authtp,
           auth = auth,
           crsn = crsn}
 
nitf_lib.Security : Grammar nitf_lib.Security =
  do (srdt : nitf_lib.OrBytes nitf_lib.Date) <- nitf_lib.DefaultSpaces nitf_lib.Date 8 nitf_lib.Date
     (ctln : nitf_lib.OrBytes [int]) <- nitf_lib.DefaultSpaces [int] 15 (Many[15] nitf_lib.Digit)
     pure {srdt = srdt,
           ctln = ctln}
 
nitf_lib.CommonSubheader : Grammar nitf_lib.CommonSubheader =
  do (clas : nitf_lib.SecClas) <- nitf_lib.SecClas
     (clsy : nitf_lib.OrBytes nitf_lib.ClSy0) <- nitf_lib.ClSy
     (code : nitf_lib.OrBytes nitf_lib.CodeWords0) <- nitf_lib.CodeWords
     (ctlh : nitf_lib.OrBytes nitf_lib.SecCtrlMarking) <- nitf_lib.CtlHandling
     (rel : [uint 8]) <- nitf_lib.Release
     (decl : nitf_lib.Declassification) <- nitf_lib.Declassification
     (clauth : nitf_lib.ClassificationAuthority) <- nitf_lib.ClassificationAuthority
     (sec : nitf_lib.Security) <- nitf_lib.Security
     pure {clas = clas,
           clsy = clsy,
           code = code,
           ctlh = ctlh,
           rel = rel,
           decl = decl,
           clauth = clauth,
           sec = sec}
 
nitf_lib.Encryp : Grammar (uint 8) =
  Match {'0'}
 
nitf_lib.AttachmentLvl : Grammar (uint 64) =
  nitf_lib.UpperBounded 3 998
 
nitf_lib.Location : Grammar nitf_lib.Location =
  do (row : nitf_lib.SignedNum) <- nitf_lib.SignedNum 4
     (col : nitf_lib.SignedNum) <- nitf_lib.SignedNum 4
     pure {row = row,
           col = col}
 
nitf_lib._MyFail ?a0 : Grammar {} =
  Commit
    Choose fair
      { }
 
nitf_lib._Etx : Grammar {} =
  @Match {'\EOT'}
 
nitf_lib._BCS : Grammar {} =
  @Match (((32 .. 126) | {'\f'}) | {'\r'})
 
nitf_lib._BCSA : Grammar {} =
  @Match (32 .. 126)
 
nitf_lib._BCSN : Grammar {} =
  @Match (((48 .. 57) | {'+'}) | {'-'})
 
nitf_lib._ECS : Grammar {} =
  nitf_lib._BCS
 
nitf_lib._ECSA : Grammar {} =
  nitf_lib._BCSA
 
nitf_lib._LowerCase : Grammar {} =
  @Match ('a' .. 'z')
 
nitf_lib._UpperCase : Grammar {} =
  @Match ('A' .. 'Z')
 
nitf_lib._Alpha : Grammar {} =
  Choose fair
    { nitf_lib._UpperCase
    | nitf_lib._LowerCase
    }
 
nitf_lib._Numeral : Grammar {} =
  @Match ('0' .. '9')
 
nitf_lib._Sign : Grammar {} =
  @Match ({'+'} | {'-'})
 
nitf_lib._Digit : Grammar {} =
  nitf_lib._Numeral
 
nitf_lib._DigitUInt : Grammar {} =
  nitf_lib._Numeral
 
nitf_lib._FixedPoint : Grammar {} =
  do @Many[] nitf_lib._Digit
     @Match {'.'}
     @Many[] nitf_lib._Digit
 
nitf_lib._UnsignedNum (digs : uint 64) : Grammar {} =
  @Many[digs] nitf_lib._Digit
 
nitf_lib._UnsignedNumUInt (digs : uint 64) : Grammar {} =
  @Many[digs] nitf_lib._DigitUInt
 
nitf_lib._NegNum (digs : uint 64) : Grammar {} =
  do @Match {'-'}
     nitf_lib._UnsignedNum digs
 
nitf_lib._SignedNum (digs : uint 64) : Grammar {} =
  Choose fair
    { {- pos -} nitf_lib._UnsignedNum (digs + 1)
    | {- neg -} nitf_lib._NegNum digs
    }
 
nitf_lib._BoundedNum (digs : uint 64) (lb : uint 64) (ub : uint 64) : Grammar {} =
  do ($$ : uint 64) <- nitf_lib.UnsignedNumUInt digs
     nitf_lib._Guard (lb <= $$)
     nitf_lib._Guard ($$ <= ub)
 
nitf_lib._PosNumber (digs : uint 64) : Grammar {} =
  do ($$ : uint 64) <- nitf_lib.UnsignedNumUInt digs
     nitf_lib._Guard (1 <= $$)
 
nitf_lib._IsNum (digs : uint 64) (v : uint 64) : Grammar {} =
  nitf_lib._BoundedNum digs v v
 
nitf_lib._BoundedDigit (lb : uint 64) (ub : uint 64) : Grammar {} =
  nitf_lib._BoundedNum 1 lb ub
 
nitf_lib._UpperBoundedDigit (ub : uint 64) : Grammar {} =
  nitf_lib._BoundedDigit 0 ub
 
nitf_lib._BoundedPos (digs : uint 64) (ub : uint 64) : Grammar {} =
  nitf_lib._BoundedNum digs 1 ub
 
nitf_lib._UpperBounded (digs : uint 64) (ub : uint 64) : Grammar {} =
  nitf_lib._BoundedNum digs 0 ub
 
nitf_lib._PosQuad : Grammar {} =
  nitf_lib._BoundedNum 4 1 9999
 
nitf_lib._LowerBoundedOrZero (digs : uint 64) (lb : uint 64) : Grammar {} =
  do ($$ : uint 64) <- nitf_lib.UnsignedNumUInt digs
     Choose fair
       { nitf_lib._Guard ($$ == 0)
       | nitf_lib._Guard (lb <= $$)
       }
 
nitf_lib._Pos : Grammar {} =
  @Match ('1' .. '9')
 
nitf_lib._AlphaNum : Grammar {} =
  Choose fair
    { nitf_lib._Alpha
    | nitf_lib._Numeral
    }
 
nitf_lib._Byte : Grammar {} =
  @Match (0 .. 255)
 
nitf_lib._DefaultByte ?a3 ?a7 (_D : Grammar {}) (_P : Grammar {}) : Grammar {} =
  Choose fair
    { {- actual -} _P
    | {- default -} _D
    }
 
nitf_lib._DefaultSpace ?a1 (_P : Grammar {}) : Grammar {} =
  nitf_lib._DefaultByte ?a1 (uint 8) (@Match {' '}) _P
 
nitf_lib._OrBytes ?a4 (n : uint 64) (b : [uint 8]) (_P : Grammar {}) : Grammar {} =
  Choose fair
    { {- actual -} _P
    | {- default -} @Many[n] @MatchBytes b
    }
 
nitf_lib._DefaultSpaces ?a2 (n : uint 64) (_P : Grammar {}) : Grammar {} =
  nitf_lib._OrBytes ?a2 n " " _P
 
nitf_lib._OrHyphens ?a2 (n : uint 64) (_P : Grammar {}) : Grammar {} =
  nitf_lib._OrBytes ?a2 n "-" _P
 
nitf_lib._Date : Grammar {} =
  do nitf_lib._UnsignedNum 2
     nitf_lib._UnsignedNum 2
     nitf_lib._BoundedPos 2 12
     nitf_lib._BoundedPos 2 31
 
nitf_lib._Epoch : Grammar {} =
  pure {}
 
nitf_lib._Today : Grammar {} =
  pure {}
 
nitf_lib._Time : Grammar {} =
  do nitf_lib._UpperBounded 2 23
     nitf_lib._UpperBounded 2 59
     nitf_lib._UpperBounded 2 59
 
nitf_lib._DateTime : Grammar {} =
  do nitf_lib._Date
     nitf_lib._Time
 
nitf_lib._PartialDate : Grammar {} =
  do nitf_lib._OrHyphens int 2 (nitf_lib._UnsignedNum 2)
     nitf_lib._OrHyphens int 2 (nitf_lib._UnsignedNum 2)
     nitf_lib._OrHyphens (uint 64) 2 (nitf_lib._BoundedPos 2 12)
     nitf_lib._OrHyphens (uint 64) 2 (nitf_lib._BoundedPos 2 31)
 
nitf_lib._LiftDate : Grammar {} =
  pure {}
 
nitf_lib._PartialTime : Grammar {} =
  do nitf_lib._OrHyphens (uint 64) 2 (nitf_lib._UpperBounded 2 23)
     nitf_lib._OrHyphens (uint 64) 2 (nitf_lib._UpperBounded 2 59)
     nitf_lib._OrHyphens (uint 64) 2 (nitf_lib._UpperBounded 2 59)
 
nitf_lib._LiftTime : Grammar {} =
  pure {}
 
nitf_lib._PartialDateTime : Grammar {} =
  do nitf_lib._PartialDate
     nitf_lib._PartialTime
 
nitf_lib._LiftDateTime : Grammar {} =
  do nitf_lib._LiftDate
     nitf_lib._LiftTime
 
nitf_lib._PartialOrdTime (t0 : nitf_lib.PartialTime) (t1 : nitf_lib.PartialTime) : Grammar {} =
  Choose fair
    { nitf_lib._PartialLt (uint 64) (t0.partHour) (t1.partHour)
    | do nitf_lib._PartialEq (uint 64) (t0.partHour) (t1.partHour)
         Choose fair
           { nitf_lib._PartialLt (uint 64) (t0.partMin) (t1.partMin)
           | do nitf_lib._PartialEq (uint 64) (t0.partMin) (t1.partMin)
                nitf_lib._PartialLeq (uint 64) (t0.partSecond) (t1.partSecond)
           }
    }
 
nitf_lib._PartialOrdDateTime (dt0 : nitf_lib.PartialDateTime) (dt1 : nitf_lib.PartialDateTime) : Grammar {} =
  do nitf_lib._PartialOrdDate (dt0.partDate) (dt1.partDate)
     nitf_lib._PartialOrdTime (dt0.partTime) (dt1.partTime)
 
nitf_lib._OrdDate (d0 : nitf_lib.Date) (d1 : nitf_lib.Date) : Grammar {} =
  do (d0val : nitf_lib.PartialDate) <- nitf_lib.LiftDate d0
     (d1val : nitf_lib.PartialDate) <- nitf_lib.LiftDate d1
     nitf_lib._PartialOrdDate d0val d1val
 
nitf_lib._SecClas : Grammar {} =
  Choose fair
    { {- topsecret -} @Match {'T'}
    | {- secret -} @Match {'S'}
    | {- confidential -} @Match {'C'}
    | {- restricted -} @Match {'R'}
    | {- unclassified -} @Match {'U'}
    }
 
nitf_lib._CountryCode : Grammar {} =
  @Many[2] nitf_lib._AlphaNum
 
nitf_lib._ClSy : Grammar {} =
  nitf_lib._DefaultSpaces nitf_lib.ClSy0 2 Choose fair
                                             { {- nato -} @MatchBytes "XN"
                                             | {- country -} nitf_lib._CountryCode
                                             }
 
nitf_lib._SecCtrlMarking : Grammar {} =
  Choose fair
    { {- atomal -} @MatchBytes "AT"
    | {- cndwdi -} @MatchBytes "CN"
    | {- copyright -} @MatchBytes "PX"
    | {- cosmic -} @MatchBytes "CS"
    | {- crypto -} @MatchBytes "CR"
    | {- efto -} @MatchBytes "TX"
    | {- formrestData -} @MatchBytes "RF"
    | {- fouo -} @MatchBytes "FO"
    | {- generalService -} @MatchBytes "GS"
    | {- limOffUse -} @MatchBytes "LU"
    | {- limdis -} @MatchBytes "DS"
    | {- nato -} @MatchBytes "NS"
    | {- noContract -} @MatchBytes "NC"
    | {- noncompartment -} @MatchBytes "NT"
    | {- orcon -} @MatchBytes "OR"
    | {- personalData -} @MatchBytes "IN"
    | {- propin -} @MatchBytes "PI"
    | {- restrictedData -} @MatchBytes "RD"
    | {- sao -} @MatchBytes "SA"
    | {- sao1 -} @MatchBytes "SL"
    | {- sao2 -} @MatchBytes "HA"
    | {- sao3 -} @MatchBytes "HB"
    | {- saoSi2 -} @MatchBytes "SK"
    | {- saoSi3 -} @MatchBytes "HC"
    | {- saoSi4 -} @MatchBytes "HD"
    | {- siop -} @MatchBytes "SH"
    | {- siopEsi -} @MatchBytes "SE"
    | {- specialControl -} @MatchBytes "SC"
    | {- specialIntel -} @MatchBytes "SI"
    | {- usOnly -} @MatchBytes "UO"
    | {- warningNotice -} @MatchBytes "WN"
    | {- wnintel -} @MatchBytes "WI"
    }
 
nitf_lib._CodeWords : Grammar {} =
  nitf_lib._DefaultSpaces nitf_lib.CodeWords0 11 do nitf_lib._SecCtrlMarking
                                                    (rest : [nitf_lib.SecCtrlMarking]) <- Many[ .. 3 ] do @Match {' '}
                                                                                                          ($$ : nitf_lib.SecCtrlMarking) <- nitf_lib.SecCtrlMarking
                                                                                                          pure $$
                                                    nitf_lib._Spaces (11 - (2 + (3 * (Length rest))))
 
nitf_lib._CtlHandling : Grammar {} =
  nitf_lib._DefaultSpaces nitf_lib.SecCtrlMarking 2 nitf_lib._SecCtrlMarking
 
nitf_lib._Release : Grammar {} =
  @Many[20] Choose fair
              { nitf_lib._UpperCase
              | @Match {' '}
              }
 
nitf_lib._DeclassificationType : Grammar {} =
  Choose fair
    { {- date -} @MatchBytes "DD"
    | {- event -} @MatchBytes "DE"
    | {- datelv -} @MatchBytes "GD"
    | {- eventlv -} @MatchBytes "GE"
    | {- oadr -} nitf_lib._PadWSpaces [uint 8] 1 (@MatchBytes "O")
    | {- exempt -} nitf_lib._PadWSpaces [uint 8] 1 (@MatchBytes "X")
    | {- none -} nitf_lib._Spaces 2
    }
 
nitf_lib._Declassification : Grammar {} =
  do (dctp : nitf_lib.DeclassificationType) <- nitf_lib.DeclassificationType
     Choose fair
       { {- decldate -} do Choose fair
                             { case dctp is
                                 { {| date = _710 |} -> pure {}
                                 }
                             | case dctp is
                                 { {| datelv = _711 |} -> pure {}
                                 }
                             }
                           nitf_lib._Date
       | {- nodate -} do Choose fair
                           { Choose fair
                               { Choose fair
                                   { Choose fair
                                       { case dctp is
                                           { {| event = _714 |} -> pure {}
                                           }
                                       | case dctp is
                                           { {| eventlv = _715 |} -> pure {}
                                           }
                                       }
                                   | case dctp is
                                       { {| oadr = _716 |} -> pure {}
                                       }
                                   }
                               | case dctp is
                                   { {| exempt = _717 |} -> pure {}
                                   }
                               }
                           | case dctp is
                               { {| none = _718 |} -> pure {}
                               }
                           }
                         nitf_lib._Spaces 8
       }
     Choose fair
       { {- reason -} do case dctp is
                           { {| exempt = _721 |} -> pure {}
                           }
                         @Match {'X'}
                         ($$ : [int]) <- nitf_lib.PadWSpaces [int] 3 (Many[ .. 3 ] nitf_lib.Digit)
                         (v : int) <- pure (nitf_lib.numBase 10 $$)
                         Choose fair
                           { do nitf_lib._Guard (1 <= v)
                                nitf_lib._Guard (v <= 8)
                           | do nitf_lib._Guard (251 <= v)
                                nitf_lib._Guard (v <= 259)
                           }
       | {- notexempt -} do Choose fair
                              { Choose fair
                                  { Choose fair
                                      { Choose fair
                                          { Choose fair
                                              { case dctp is
                                                  { {| date = _725 |} -> pure {}
                                                  }
                                              | case dctp is
                                                  { {| event = _726 |} -> pure {}
                                                  }
                                              }
                                          | case dctp is
                                              { {| datelv = _727 |} -> pure {}
                                              }
                                          }
                                      | case dctp is
                                          { {| eventlv = _728 |} -> pure {}
                                          }
                                      }
                                  | case dctp is
                                      { {| oadr = _729 |} -> pure {}
                                      }
                                  }
                              | case dctp is
                                  { {| none = _730 |} -> pure {}
                                  }
                              }
                            nitf_lib._Spaces 4
       }
     Choose fair
       { {- actual -} do Choose fair
                           { case dctp is
                               { {| datelv = _733 |} -> pure {}
                               }
                           | case dctp is
                               { {| eventlv = _734 |} -> pure {}
                               }
                           }
                         nitf_lib._DefaultSpace nitf_lib.Declassification2 Choose fair
                                                                             { {- secret -} @Match {'S'}
                                                                             | {- confidential -} @Match {'C'}
                                                                             | {- restricted -} @Match {'R'}
                                                                             }
       | {- none -} do Choose fair
                         { Choose fair
                             { Choose fair
                                 { Choose fair
                                     { case dctp is
                                         { {| date = _740 |} -> pure {}
                                         }
                                     | case dctp is
                                         { {| event = _741 |} -> pure {}
                                         }
                                     }
                                 | case dctp is
                                     { {| oadr = _742 |} -> pure {}
                                     }
                                 }
                             | case dctp is
                                 { {| exempt = _743 |} -> pure {}
                                 }
                             }
                         | case dctp is
                             { {| none = _744 |} -> pure {}
                             }
                         }
                       nitf_lib._Spaces 1
       }
     Choose fair
       { {- hasdgdt -} do case dctp is
                            { {| datelv = _747 |} -> pure {}
                            }
                          nitf_lib._Date
       | {- nodgdt -} do Choose fair
                           { Choose fair
                               { Choose fair
                                   { Choose fair
                                       { Choose fair
                                           { case dctp is
                                               { {| date = _750 |} -> pure {}
                                               }
                                           | case dctp is
                                               { {| event = _751 |} -> pure {}
                                               }
                                           }
                                       | case dctp is
                                           { {| eventlv = _752 |} -> pure {}
                                           }
                                       }
                                   | case dctp is
                                       { {| oadr = _753 |} -> pure {}
                                       }
                                   }
                               | case dctp is
                                   { {| exempt = _754 |} -> pure {}
                                   }
                               }
                           | case dctp is
                               { {| none = _755 |} -> pure {}
                               }
                           }
                         nitf_lib._Spaces 8
       }
     Choose fair
       { {- hascltx -} do Choose fair
                            { case dctp is
                                { {| datelv = _758 |} -> pure {}
                                }
                            | case dctp is
                                { {| eventlv = _759 |} -> pure {}
                                }
                            }
                          @Many[43] nitf_lib._ECSA
       | {- nocltx -} nitf_lib._Spaces 43
       }
 
nitf_lib._ClassificationAuthority : Grammar {} =
  do nitf_lib._DefaultSpace nitf_lib.ClassificationAuthority0 Choose fair
                                                                { {- original -} @Match {'O'}
                                                                | {- derivative -} @Match {'D'}
                                                                | {- multiple -} @Match {'M'}
                                                                }
     @Many[40] nitf_lib._ECSA
     nitf_lib._DefaultSpace nitf_lib.ClassificationAuthority1 Choose fair
                                                                { {- clsrsnA -} @Match {'A'}
                                                                | {- clsrsnB -} @Match {'B'}
                                                                | {- clsrsnC -} @Match {'C'}
                                                                | {- clsrsnD -} @Match {'D'}
                                                                | {- clsrsnE -} @Match {'E'}
                                                                | {- clsrsnF -} @Match {'F'}
                                                                | {- clsrsnG -} @Match {'G'}
                                                                }
 
nitf_lib._Security : Grammar {} =
  do nitf_lib._DefaultSpaces nitf_lib.Date 8 nitf_lib._Date
     nitf_lib._DefaultSpaces [int] 15 (@Many[15] nitf_lib._Digit)
 
nitf_lib._CommonSubheader : Grammar {} =
  do nitf_lib._SecClas
     nitf_lib._ClSy
     nitf_lib._CodeWords
     nitf_lib._CtlHandling
     nitf_lib._Release
     nitf_lib._Declassification
     nitf_lib._ClassificationAuthority
     nitf_lib._Security
 
nitf_lib._Encryp : Grammar {} =
  @Match {'0'}
 
nitf_lib._AttachmentLvl : Grammar {} =
  nitf_lib._UpperBounded 3 998
 
nitf_lib._Location : Grammar {} =
  do nitf_lib._SignedNum 4
     nitf_lib._SignedNum 4
module nitf_res_ext_subheader
 
--- Imports:
import nitf_lib
 
--- Type defs:
type nitf_res_ext_subheader.ResExtHeader = { resid: [uint 8]
                                           ; resver: uint 64
                                           ; common: nitf_lib.CommonSubheader
                                           ; resshl: uint 64
                                           ; resshf: [uint 8]
                                           }
 
--- Rules:
 
nitf_res_ext_subheader.ResExtHeader : Grammar nitf_res_ext_subheader.ResExtHeader =
  do @MatchBytes "RE"
     (resid : [uint 8]) <- Many[25] nitf_lib.BCSA
     (resver : uint 64) <- nitf_lib.PosNumber 2
     (common : nitf_lib.CommonSubheader) <- nitf_lib.CommonSubheader
     (resshl : uint 64) <- nitf_lib.UnsignedNumUInt 4
     (resshf : [uint 8]) <- Many[resshl] nitf_lib.BCSA
     @Many[] nitf_lib._Byte
     pure {resid = resid,
           resver = resver,
           common = common,
           resshl = resshl,
           resshf = resshf}
 
nitf_res_ext_subheader._ResExtHeader : Grammar {} =
  do @MatchBytes "RE"
     @Many[25] nitf_lib._BCSA
     nitf_lib._PosNumber 2
     nitf_lib._CommonSubheader
     (resshl : uint 64) <- nitf_lib.UnsignedNumUInt 4
     @Many[resshl] nitf_lib._BCSA
     @Many[] nitf_lib._Byte
module nitf_data_ext_subheader
 
--- Imports:
import nitf_lib
 
--- Type defs:
type nitf_data_ext_subheader.DataExtHeader0 = Choose { oflwIXSHD: {}
                                                     ; oflwSXSHD: {}
                                                     ; oflwTXSHD: {}
                                                     ; oflwUDHD: {}
                                                     ; oflwUDID: {}
                                                     ; oflwXHD: {}
                                                     }
 
type nitf_data_ext_subheader.DataExtHeader1 = Choose { nooflw: {}
                                                     ; present: nitf_data_ext_subheader.DataExtHeader0
                                                     }
 
type nitf_data_ext_subheader.DataExtHeader2 = Choose { omitted: {}
                                                     ; present: int
                                                     }
 
type nitf_data_ext_subheader.DataExtHeader = { desid: [uint 8]
                                             ; desver: uint 64
                                             ; common: nitf_lib.CommonSubheader
                                             ; desoflw: nitf_data_ext_subheader.DataExtHeader1
                                             ; dsitem: nitf_data_ext_subheader.DataExtHeader2
                                             ; desshl: uint 64
                                             }
 
--- Rules:
 
nitf_data_ext_subheader.DE : Grammar [uint 8] =
  MatchBytes "DE"
 
nitf_data_ext_subheader._DE : Grammar {} =
  @MatchBytes "DE"
 
nitf_data_ext_subheader.DataExtHeader : Grammar nitf_data_ext_subheader.DataExtHeader =
  do nitf_data_ext_subheader._DE
     (desid : [uint 8]) <- Many[25] nitf_lib.BCSA
     (desver : uint 64) <- nitf_lib.PosNumber 2
     (common : nitf_lib.CommonSubheader) <- nitf_lib.CommonSubheader
     (desoflw : nitf_data_ext_subheader.DataExtHeader1) <- Choose fair
                                                             { {- present -} do (_779 : nitf_data_ext_subheader.DataExtHeader0) <- Choose fair
                                                                                                                                     { {- oflwUDHD -} do (_773 : {}) <- nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "UDHD")
                                                                                                                                                         pure {oflwUDHD: _773}
                                                                                                                                     | {- oflwUDID -} do (_774 : {}) <- nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "UDID")
                                                                                                                                                         pure {oflwUDID: _774}
                                                                                                                                     | {- oflwXHD -} do (_775 : {}) <- nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "XHD")
                                                                                                                                                        pure {oflwXHD: _775}
                                                                                                                                     | {- oflwIXSHD -} do (_776 : {}) <- nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "IXSHD")
                                                                                                                                                          pure {oflwIXSHD: _776}
                                                                                                                                     | {- oflwSXSHD -} do (_777 : {}) <- nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "SXSHD")
                                                                                                                                                          pure {oflwSXSHD: _777}
                                                                                                                                     | {- oflwTXSHD -} do (_778 : {}) <- nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "TXSHD")
                                                                                                                                                          pure {oflwTXSHD: _778}
                                                                                                                                     }
                                                                                pure {present: _779}
                                                             | {- nooflw -} do (_780 : {}) <- pure {}
                                                                               pure {nooflw: _780}
                                                             }
     (dsitem : nitf_data_ext_subheader.DataExtHeader2) <- Choose fair
                                                            { {- present -} do (_783 : int) <- do case desoflw is
                                                                                                    { {| present = _781 |} -> pure {}
                                                                                                    }
                                                                                                  ($$ : int) <- nitf_lib.UnsignedNum 3
                                                                                                  pure $$
                                                                               pure {present: _783}
                                                            | {- omitted -} do (_785 : {}) <- case desoflw is
                                                                                                { {| nooflw = _784 |} -> pure _784
                                                                                                }
                                                                               pure {omitted: _785}
                                                            }
     (desshl : uint 64) <- nitf_lib.IsNum 4 0
     pure {desid = desid,
           desver = desver,
           common = common,
           desoflw = desoflw,
           dsitem = dsitem,
           desshl = desshl}
 
nitf_data_ext_subheader._DataExtHeader : Grammar {} =
  do nitf_data_ext_subheader._DE
     @Many[25] nitf_lib._BCSA
     nitf_lib._PosNumber 2
     nitf_lib._CommonSubheader
     (desoflw : nitf_data_ext_subheader.DataExtHeader1) <- Choose fair
                                                             { {- present -} do (_779 : nitf_data_ext_subheader.DataExtHeader0) <- Choose fair
                                                                                                                                     { {- oflwUDHD -} do (_773 : {}) <- nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "UDHD")
                                                                                                                                                         pure {oflwUDHD: _773}
                                                                                                                                     | {- oflwUDID -} do (_774 : {}) <- nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "UDID")
                                                                                                                                                         pure {oflwUDID: _774}
                                                                                                                                     | {- oflwXHD -} do (_775 : {}) <- nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "XHD")
                                                                                                                                                        pure {oflwXHD: _775}
                                                                                                                                     | {- oflwIXSHD -} do (_776 : {}) <- nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "IXSHD")
                                                                                                                                                          pure {oflwIXSHD: _776}
                                                                                                                                     | {- oflwSXSHD -} do (_777 : {}) <- nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "SXSHD")
                                                                                                                                                          pure {oflwSXSHD: _777}
                                                                                                                                     | {- oflwTXSHD -} do (_778 : {}) <- nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "TXSHD")
                                                                                                                                                          pure {oflwTXSHD: _778}
                                                                                                                                     }
                                                                                pure {present: _779}
                                                             | {- nooflw -} do (_780 : {}) <- pure {}
                                                                               pure {nooflw: _780}
                                                             }
     Choose fair
       { {- present -} do case desoflw is
                            { {| present = _781 |} -> pure {}
                            }
                          nitf_lib._UnsignedNum 3
       | {- omitted -} case desoflw is
                         { {| nooflw = _784 |} -> pure {}
                         }
       }
     nitf_lib._IsNum 4 0
module nitf_text_subheader
 
--- Imports:
import nitf_lib
 
--- Type defs:
type nitf_text_subheader.TextHeader0 = Choose { omitted: {}
                                              ; txsofl: int
                                              }
 
type nitf_text_subheader.TxtFmt = Choose { bcs: {}
                                         ; ecs: {}
                                         ; u8s: {}
                                         ; usmtf: {}
                                         }
 
type nitf_text_subheader.TextHeader = { textid: [uint 8]
                                      ; txtalvl: uint 64
                                      ; txtdt: nitf_lib.PartialDateTime
                                      ; txtitl: [uint 8]
                                      ; common: nitf_lib.CommonSubheader
                                      ; txtfmt: nitf_text_subheader.TxtFmt
                                      ; txshdl: uint 64
                                      ; txshd: [uint 8]
                                      }
 
--- Rules:
 
nitf_text_subheader.TE : Grammar [uint 8] =
  MatchBytes "TE"
 
nitf_text_subheader.TextId : Grammar [uint 8] =
  Many[7] Choose fair
            { nitf_lib.AlphaNum
            | Match {' '}
            }
 
nitf_text_subheader.TxTitl : Grammar [uint 8] =
  Many[80] nitf_lib.ECSA
 
nitf_text_subheader.TxtFmt : Grammar nitf_text_subheader.TxtFmt =
  Choose fair
    { {- usmtf -} do (_786 : {}) <- @MatchBytes "MTF"
                     pure {usmtf: _786}
    | {- bcs -} do (_787 : {}) <- @MatchBytes "STA"
                   pure {bcs: _787}
    | {- ecs -} do (_788 : {}) <- @MatchBytes "UT1"
                   pure {ecs: _788}
    | {- u8s -} do (_789 : {}) <- @MatchBytes "U8S"
                   pure {u8s: _789}
    }
 
nitf_text_subheader.TxShDL : Grammar (uint 64) =
  Choose fair
    { nitf_lib.IsNum 5 0
    | nitf_lib.BoundedNum 5 3 9717
    }
 
nitf_text_subheader._TE : Grammar {} =
  @MatchBytes "TE"
 
nitf_text_subheader.TextHeader : Grammar nitf_text_subheader.TextHeader =
  do nitf_text_subheader._TE
     (textid : [uint 8]) <- nitf_text_subheader.TextId
     (txtalvl : uint 64) <- nitf_lib.AttachmentLvl
     (txtdt : nitf_lib.PartialDateTime) <- nitf_lib.PartialDateTime
     (txtitl : [uint 8]) <- nitf_text_subheader.TxTitl
     (common : nitf_lib.CommonSubheader) <- nitf_lib.CommonSubheader
     nitf_lib._Encryp
     (txtfmt : nitf_text_subheader.TxtFmt) <- nitf_text_subheader.TxtFmt
     (txshdl : uint 64) <- nitf_text_subheader.TxShDL
     Choose fair
       { {- txsofl -} nitf_lib._UnsignedNum 3
       | {- omitted -} nitf_lib._Guard (txshdl == 0)
       }
     (txshd : [uint 8]) <- Many[txshdl - 3] nitf_lib.BCSA
     pure {textid = textid,
           txtalvl = txtalvl,
           txtdt = txtdt,
           txtitl = txtitl,
           common = common,
           txtfmt = txtfmt,
           txshdl = txshdl,
           txshd = txshd}
 
nitf_text_subheader._TextId : Grammar {} =
  @Many[7] Choose fair
             { nitf_lib._AlphaNum
             | @Match {' '}
             }
 
nitf_text_subheader._TxTitl : Grammar {} =
  @Many[80] nitf_lib._ECSA
 
nitf_text_subheader._TxtFmt : Grammar {} =
  Choose fair
    { {- usmtf -} @MatchBytes "MTF"
    | {- bcs -} @MatchBytes "STA"
    | {- ecs -} @MatchBytes "UT1"
    | {- u8s -} @MatchBytes "U8S"
    }
 
nitf_text_subheader._TxShDL : Grammar {} =
  Choose fair
    { nitf_lib._IsNum 5 0
    | nitf_lib._BoundedNum 5 3 9717
    }
 
nitf_text_subheader._TextHeader : Grammar {} =
  do nitf_text_subheader._TE
     nitf_text_subheader._TextId
     nitf_lib._AttachmentLvl
     nitf_lib._PartialDateTime
     nitf_text_subheader._TxTitl
     nitf_lib._CommonSubheader
     nitf_lib._Encryp
     nitf_text_subheader._TxtFmt
     (txshdl : uint 64) <- nitf_text_subheader.TxShDL
     Choose fair
       { {- txsofl -} nitf_lib._UnsignedNum 3
       | {- omitted -} nitf_lib._Guard (txshdl == 0)
       }
     @Many[txshdl - 3] nitf_lib._BCSA
module nitf_graphic_subheader
 
--- Imports:
import nitf_lib
 
--- Type defs:
type nitf_graphic_subheader.GraphicHeader0 = Choose { notre: {}
                                                    ; taggedrec: uint 64
                                                    }
 
type nitf_graphic_subheader.GraphicHeader1 = Choose { desseq: uint 64
                                                    ; nooverflow: uint 64
                                                    ; omitted: {}
                                                    }
 
type nitf_graphic_subheader.GraphicHeader2 = { seq: uint 64
                                             }
 
type nitf_graphic_subheader.GraphicHeader3 = Choose { ommitted: {}
                                                    ; tre: nitf_graphic_subheader.GraphicHeader2
                                                    }
 
type nitf_graphic_subheader.GraphicColor = Choose { color: uint 8
                                                  ; mono: uint 8
                                                  }
 
type nitf_graphic_subheader.GraphicHeader = { sid: [uint 8]
                                            ; sname: [uint 8]
                                            ; common: nitf_lib.CommonSubheader
                                            ; sstruct: int
                                            ; sdlvl: int
                                            ; salvl: uint 64
                                            ; sloc: nitf_lib.Location
                                            ; sbnd1: nitf_lib.Location
                                            ; scolor: nitf_graphic_subheader.GraphicColor
                                            ; sbnd2: nitf_lib.Location
                                            ; sres2: int
                                            ; sxshdl: nitf_graphic_subheader.GraphicHeader0
                                            ; xssofl: nitf_graphic_subheader.GraphicHeader1
                                            ; sxshd: nitf_graphic_subheader.GraphicHeader3
                                            }
 
--- Rules:
 
nitf_graphic_subheader.SY : Grammar [uint 8] =
  MatchBytes "SY"
 
nitf_graphic_subheader.SFmt : Grammar (uint 8) =
  Match {'C'}
 
nitf_graphic_subheader.GraphicColor : Grammar nitf_graphic_subheader.GraphicColor =
  Choose fair
    { {- color -} do (_793 : uint 8) <- Match {'C'}
                     pure {color: _793}
    | {- mono -} do (_794 : uint 8) <- Match {'M'}
                    pure {mono: _794}
    }
 
nitf_graphic_subheader._SY : Grammar {} =
  @MatchBytes "SY"
 
nitf_graphic_subheader._SFmt : Grammar {} =
  @Match {'C'}
 
nitf_graphic_subheader.GraphicHeader : Grammar nitf_graphic_subheader.GraphicHeader =
  do nitf_graphic_subheader._SY
     (sid : [uint 8]) <- Many[10] nitf_lib.BCSA
     (sname : [uint 8]) <- Many[20] nitf_lib.ECSA
     (common : nitf_lib.CommonSubheader) <- nitf_lib.CommonSubheader
     nitf_lib._Encryp
     nitf_graphic_subheader._SFmt
     (sstruct : int) <- nitf_lib.UnsignedNum 13
     (sdlvl : int) <- nitf_lib.UnsignedNum 3
     (salvl : uint 64) <- nitf_lib.AttachmentLvl
     (sloc : nitf_lib.Location) <- nitf_lib.Location
     (sbnd1 : nitf_lib.Location) <- nitf_lib.Location
     (scolor : nitf_graphic_subheader.GraphicColor) <- nitf_graphic_subheader.GraphicColor
     (sbnd2 : nitf_lib.Location) <- nitf_lib.Location
     (sres2 : int) <- nitf_lib.UnsignedNum 2
     (sxshdl : nitf_graphic_subheader.GraphicHeader0) <- Choose fair
                                                           { {- notre -} do (_795 : {}) <- nitf_lib._IsNum 5 0
                                                                            pure {notre: _795}
                                                           | {- taggedrec -} do (_796 : uint 64) <- nitf_lib.BoundedNum 5 3 9741
                                                                                pure {taggedrec: _796}
                                                           }
     (xssofl : nitf_graphic_subheader.GraphicHeader1) <- Choose fair
                                                           { {- nooverflow -} do (_797 : uint 64) <- nitf_lib.IsNum 3 0
                                                                                 pure {nooverflow: _797}
                                                           | {- desseq -} do (_798 : uint 64) <- nitf_lib.PosNumber 3
                                                                             pure {desseq: _798}
                                                           | {- omitted -} do (_800 : {}) <- case sxshdl is
                                                                                               { {| notre = _799 |} -> pure _799
                                                                                               }
                                                                              pure {omitted: _800}
                                                           }
     (sxshd : nitf_graphic_subheader.GraphicHeader3) <- Choose fair
                                                          { {- tre -} do (_802 : nitf_graphic_subheader.GraphicHeader2) <- do (seq : uint 64) <- case sxshdl is
                                                                                                                                                   { {| taggedrec = _801 |} -> pure _801
                                                                                                                                                   }
                                                                                                                              @Many[seq] nitf_lib._Byte
                                                                                                                              pure {seq = seq}
                                                                         pure {tre: _802}
                                                          | {- ommitted -} do (_804 : {}) <- case sxshdl is
                                                                                               { {| notre = _803 |} -> pure _803
                                                                                               }
                                                                              pure {ommitted: _804}
                                                          }
     pure {sid = sid,
           sname = sname,
           common = common,
           sstruct = sstruct,
           sdlvl = sdlvl,
           salvl = salvl,
           sloc = sloc,
           sbnd1 = sbnd1,
           scolor = scolor,
           sbnd2 = sbnd2,
           sres2 = sres2,
           sxshdl = sxshdl,
           xssofl = xssofl,
           sxshd = sxshd}
 
nitf_graphic_subheader._GraphicColor : Grammar {} =
  Choose fair
    { {- color -} @Match {'C'}
    | {- mono -} @Match {'M'}
    }
 
nitf_graphic_subheader._GraphicHeader : Grammar {} =
  do nitf_graphic_subheader._SY
     @Many[10] nitf_lib._BCSA
     @Many[20] nitf_lib._ECSA
     nitf_lib._CommonSubheader
     nitf_lib._Encryp
     nitf_graphic_subheader._SFmt
     nitf_lib._UnsignedNum 13
     nitf_lib._UnsignedNum 3
     nitf_lib._AttachmentLvl
     nitf_lib._Location
     nitf_lib._Location
     nitf_graphic_subheader._GraphicColor
     nitf_lib._Location
     nitf_lib._UnsignedNum 2
     (sxshdl : nitf_graphic_subheader.GraphicHeader0) <- Choose fair
                                                           { {- notre -} do (_795 : {}) <- nitf_lib._IsNum 5 0
                                                                            pure {notre: _795}
                                                           | {- taggedrec -} do (_796 : uint 64) <- nitf_lib.BoundedNum 5 3 9741
                                                                                pure {taggedrec: _796}
                                                           }
     Choose fair
       { {- nooverflow -} nitf_lib._IsNum 3 0
       | {- desseq -} nitf_lib._PosNumber 3
       | {- omitted -} case sxshdl is
                         { {| notre = _799 |} -> pure {}
                         }
       }
     Choose fair
       { {- tre -} do (seq : uint 64) <- case sxshdl is
                                           { {| taggedrec = _801 |} -> pure _801
                                           }
                      @Many[seq] nitf_lib._Byte
       | {- ommitted -} case sxshdl is
                          { {| notre = _803 |} -> pure {}
                          }
       }
module nitf_img_subheader
 
--- Imports:
import nitf_lib
 
--- Type defs:
type nitf_img_subheader.ICords0 = Choose { decimal: {}
                                         ; geographic: {}
                                         ; northernhemi: {}
                                         ; southernhemi: {}
                                         ; utm: {}
                                         }
 
type nitf_img_subheader.Latitude0 = Choose { north: {}
                                           ; south: {}
                                           }
 
type nitf_img_subheader.Longitude0 = Choose { east: {}
                                            ; west: {}
                                            }
 
type nitf_img_subheader.MGRS0 = { col_id: uint 8
                                ; row_id: uint 8
                                }
 
type nitf_img_subheader.LatDeg = { sign: uint 8
                                 ; whole: int
                                 ; frac: int
                                 }
 
type nitf_img_subheader.LongDeg = { sign: uint 8
                                  ; whole: int
                                  ; frac: int
                                  }
 
type nitf_img_subheader.IGeoLo0 = { lat0: nitf_img_subheader.LatDeg
                                  ; long0: nitf_img_subheader.LongDeg
                                  ; lat1: nitf_img_subheader.LatDeg
                                  ; long1: nitf_img_subheader.LongDeg
                                  ; lat2: nitf_img_subheader.LatDeg
                                  ; long2: nitf_img_subheader.LongDeg
                                  ; lat3: nitf_img_subheader.LatDeg
                                  ; long3: nitf_img_subheader.LongDeg
                                  }
 
type nitf_img_subheader.ComRat0 = Choose { oned: {}
                                         ; twodh: {}
                                         ; twods: {}
                                         }
 
type nitf_img_subheader.ComRat1 = { img_data_type: uint 64
                                  ; quality_level: uint 64
                                  }
 
type nitf_img_subheader.ComRat2 = { ones: int
                                  ; tenths: int
                                  ; hudredths: int
                                  }
 
type nitf_img_subheader.Latitude = { digs: [uint 8]
                                   ; hemi: nitf_img_subheader.Latitude0
                                   }
 
type nitf_img_subheader.Longitude = { digs: [uint 8]
                                    ; hemi: nitf_img_subheader.Longitude0
                                    }
 
type nitf_img_subheader.LatLong = { lat: nitf_img_subheader.Latitude
                                  ; long: nitf_img_subheader.Longitude
                                  }
 
type nitf_img_subheader.PlainUtm = { utm: [uint 8]
                                   ; easting: [uint 8]
                                   ; northing: [uint 8]
                                   }
 
type nitf_img_subheader.MGRS = { zone_num: [int]
                               ; zone_band: uint 8
                               ; sq_id: nitf_img_subheader.MGRS0
                               ; easting: [uint 8]
                               ; northing: [uint 8]
                               }
 
type nitf_img_subheader.IGeoLo = Choose { decimal_degs: nitf_img_subheader.IGeoLo0
                                        ; lat_long: [nitf_img_subheader.LatLong]
                                        ; mgrs: [nitf_img_subheader.MGRS]
                                        ; plain_utm: [nitf_img_subheader.PlainUtm]
                                        }
 
type nitf_img_subheader.ISHeader0 = Choose { empty: {}
                                           ; igeolo: nitf_img_subheader.IGeoLo
                                           }
 
type nitf_img_subheader.ComRat = Choose { bits_per_pixel: nitf_img_subheader.ComRat2
                                        ; dim_coding: nitf_img_subheader.ComRat0
                                        ; nominal: [uint 8]
                                        ; quant_tables: nitf_img_subheader.ComRat1
                                        }
 
type nitf_img_subheader.ISHeader1 = Choose { comrat: nitf_img_subheader.ComRat
                                           ; empty: {}
                                           }
 
type nitf_img_subheader.ISHeader2 = Choose { def_xband: uint 64
                                           ; no_xband: {}
                                           }
 
type nitf_img_subheader.ISHeader3 = { nelutn: uint 64
                                    ; lutd_nm: [uint 8]
                                    }
 
type nitf_img_subheader.ISHeader4 = Choose { luts: nitf_img_subheader.ISHeader3
                                           ; no_luts: {}
                                           }
 
type nitf_img_subheader.IRepBandN = Choose { bandM: {}
                                           ; blue: {}
                                           ; chrominanceBlue: {}
                                           ; chrominanceRed: {}
                                           ; default: {}
                                           ; green: {}
                                           ; luminance: {}
                                           ; lutBand: {}
                                           ; monoBand: {}
                                           ; red: {}
                                           }
 
type nitf_img_subheader.ISubCatN = Choose { default: {}
                                          ; direct: {}
                                          ; easting: {}
                                          ; inphase: {}
                                          ; latitude: {}
                                          ; longitude: {}
                                          ; magnitude: {}
                                          ; northing: {}
                                          ; phase: {}
                                          ; quadrature: {}
                                          ; speed: {}
                                          ; userdef: [uint 8]
                                          ; waveLength: int
                                          }
 
type nitf_img_subheader.ISHeader5 = { irepbandn: nitf_img_subheader.IRepBandN
                                    ; isubcatn: nitf_img_subheader.ISubCatN
                                    ; nlutsn: uint 64
                                    }
 
type nitf_img_subheader.ISHeader6 = { udofl: int
                                    ; udid: [uint 8]
                                    }
 
type nitf_img_subheader.ISHeader7 = Choose { empty: {}
                                           ; uds: nitf_img_subheader.ISHeader6
                                           }
 
type nitf_img_subheader.ISHeader8 = { ixsofl: int
                                    ; ixshd: [uint 8]
                                    }
 
type nitf_img_subheader.ISHeader9 = Choose { empty: {}
                                           ; ixs: nitf_img_subheader.ISHeader8
                                           }
 
type nitf_img_subheader.TgtId = { be: nitf_lib.OrBytes [uint 8]
                                ; osuffix: nitf_lib.OrBytes [uint 8]
                                ; country: nitf_lib.OrBytes [uint 8]
                                }
 
type nitf_img_subheader.PVType = Choose { bilevel: {}
                                        ; complex: {}
                                        ; integer: {}
                                        ; real: {}
                                        ; signed: {}
                                        }
 
type nitf_img_subheader.IRep = Choose { cartesian: {}
                                      ; itur: {}
                                      ; monochrome: {}
                                      ; multi: {}
                                      ; nodisplay: {}
                                      ; polar: {}
                                      ; rgb: {}
                                      ; rgblut: {}
                                      ; sar: {}
                                      }
 
type nitf_img_subheader.ICat = Choose { airWind: {}
                                      ; barometric: {}
                                      ; blackWhitePhoto: {}
                                      ; catScans: {}
                                      ; colorPatch: {}
                                      ; colorPhoto: {}
                                      ; electroOptical: {}
                                      ; elevationModel: {}
                                      ; fingerprints: {}
                                      ; forwardLooking: {}
                                      ; highResolution: {}
                                      ; hyperSpectral: {}
                                      ; infrared: {}
                                      ; legends: {}
                                      ; locationGrid: {}
                                      ; mri: {}
                                      ; multiSpectral: {}
                                      ; optical: {}
                                      ; otherMatrix: {}
                                      ; radar: {}
                                      ; rasterMap: {}
                                      ; sarRadioHologram: {}
                                      ; sideLooking: {}
                                      ; synthApertureRadar: {}
                                      ; thermalInfrared: {}
                                      ; video: {}
                                      ; visible: {}
                                      ; waterCurrent: {}
                                      ; waterDepth: {}
                                      ; xray: {}
                                      }
 
type nitf_img_subheader.PJust = Choose { leftJust: {}
                                       ; rightJust: {}
                                       }
 
type nitf_img_subheader.UtmZone = { zone: uint 64
                                  }
 
type nitf_img_subheader.IC = Choose { c1: {}
                                    ; c3: {}
                                    ; c4: {}
                                    ; c5: {}
                                    ; c6: {}
                                    ; c7: {}
                                    ; c8: {}
                                    ; i1: {}
                                    ; m1: {}
                                    ; m3: {}
                                    ; m4: {}
                                    ; m5: {}
                                    ; m6: {}
                                    ; m7: {}
                                    ; m8: {}
                                    ; nc: {}
                                    ; nm: {}
                                    }
 
type nitf_img_subheader.IMode = Choose { blockMode: {}
                                       ; pixel: {}
                                       ; row: {}
                                       ; seq: {}
                                       }
 
type nitf_img_subheader.IMag = Choose { fp: nitf_lib.FixedPoint
                                      ; frac: [int]
                                      }
 
type nitf_img_subheader.ISHeader = { iid1: [uint 8]
                                   ; idatim: nitf_lib.PartialDateTime
                                   ; tgt_id: nitf_img_subheader.TgtId
                                   ; iid2: [uint 8]
                                   ; common: nitf_lib.CommonSubheader
                                   ; i_sorce: nitf_lib.OrBytes [uint 8]
                                   ; n_rows: uint 64
                                   ; n_cols: uint 64
                                   ; pvtype: nitf_img_subheader.PVType
                                   ; irep: nitf_img_subheader.IRep
                                   ; icat: nitf_img_subheader.ICat
                                   ; abpp: uint 64
                                   ; p_just: nitf_img_subheader.PJust
                                   ; icords: nitf_lib.DefaultByte nitf_img_subheader.ICords0
                                   ; nicom: uint 64
                                   ; i_com_n: [[uint 8]]
                                   ; ic: nitf_img_subheader.IC
                                   ; nbands: uint 64
                                   ; xbands: nitf_img_subheader.ISHeader2
                                   ; bandinfo: [nitf_img_subheader.ISHeader5]
                                   ; imode: nitf_img_subheader.IMode
                                   ; nbpr: uint 64
                                   ; nbpc: uint 64
                                   ; nppbh: uint 64
                                   ; nppbv: uint 64
                                   ; nbpp: uint 64
                                   ; idlvl: uint 64
                                   ; ialvl: uint 64
                                   ; iloc: nitf_lib.Location
                                   ; imag: nitf_img_subheader.IMag
                                   ; udidl: uint 64
                                   ; ixshdl: uint 64
                                   }
 
--- Rules:
 
nitf_img_subheader.Maybe ?a4 (guard : [uint 8]) (P : Grammar ?a4) : Grammar (Maybe ?a4) =
  Choose biased
    { do @MatchBytes guard
         (v : ?a4) <- P
         ($$ : Maybe ?a4) <- pure (just v)
         pure $$
    | pure nothing
    }
 
nitf_img_subheader.DateDefaultSpaces : Grammar (nitf_lib.OrBytes nitf_lib.PartialDate) =
  nitf_lib.DefaultSpaces nitf_lib.PartialDate 8 nitf_lib.PartialDate
 
nitf_img_subheader.Im : Grammar [uint 8] =
  MatchBytes "IM"
 
nitf_img_subheader.IID1 : Grammar [uint 8] =
  Many[10] Choose fair
             { nitf_lib.AlphaNum
             | Match ({'_'} | {' '})
             }
 
nitf_img_subheader.IDaTim : Grammar nitf_lib.PartialDateTime =
  nitf_lib.PartialDateTime
 
nitf_img_subheader.BE : Grammar [uint 8] =
  Many[10] nitf_lib.AlphaNum
 
nitf_img_subheader.OSuffix : Grammar [uint 8] =
  Many[5] nitf_lib.AlphaNum
 
nitf_img_subheader.TgtId : Grammar nitf_img_subheader.TgtId =
  do (be : nitf_lib.OrBytes [uint 8]) <- nitf_lib.DefaultSpaces [uint 8] 10 nitf_img_subheader.BE
     (osuffix : nitf_lib.OrBytes [uint 8]) <- nitf_lib.DefaultSpaces [uint 8] 5 nitf_img_subheader.OSuffix
     (country : nitf_lib.OrBytes [uint 8]) <- nitf_lib.DefaultSpaces [uint 8] 2 nitf_lib.CountryCode
     pure {be = be,
           osuffix = osuffix,
           country = country}
 
nitf_img_subheader.IID2 : Grammar [uint 8] =
  Many[80] nitf_lib.Byte
 
nitf_img_subheader.ISorce : Grammar (nitf_lib.OrBytes [uint 8]) =
  nitf_lib.DefaultSpaces [uint 8] 42 (Many[42] nitf_lib.Byte)
 
nitf_img_subheader.NRows : Grammar (uint 64) =
  nitf_lib.PosNumber 8
 
nitf_img_subheader.NCols : Grammar (uint 64) =
  nitf_lib.PosNumber 8
 
nitf_img_subheader.PVType : Grammar nitf_img_subheader.PVType =
  Choose fair
    { {- integer -} do (_806 : {}) <- nitf_lib._PadWSpaces [uint 8] 3 (@MatchBytes "INT")
                       pure {integer: _806}
    | {- bilevel -} do (_807 : {}) <- nitf_lib._PadWSpaces [uint 8] 3 (@MatchBytes "B")
                       pure {bilevel: _807}
    | {- signed -} do (_808 : {}) <- nitf_lib._PadWSpaces [uint 8] 3 (@MatchBytes "SI")
                      pure {signed: _808}
    | {- real -} do (_809 : {}) <- nitf_lib._PadWSpaces [uint 8] 3 (@MatchBytes "R")
                    pure {real: _809}
    | {- complex -} do (_810 : {}) <- nitf_lib._PadWSpaces [uint 8] 3 (@MatchBytes "C")
                       pure {complex: _810}
    }
 
nitf_img_subheader.IRep : Grammar nitf_img_subheader.IRep =
  Choose fair
    { {- monochrome -} do (_811 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "MONO")
                          pure {monochrome: _811}
    | {- rgb -} do (_812 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "RGB")
                   pure {rgb: _812}
    | {- rgblut -} do (_813 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "RGB/LUT")
                      pure {rgblut: _813}
    | {- multi -} do (_814 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "MULTI")
                     pure {multi: _814}
    | {- nodisplay -} do (_815 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "NODISPLY")
                         pure {nodisplay: _815}
    | {- cartesian -} do (_816 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "NVECTOR")
                         pure {cartesian: _816}
    | {- polar -} do (_817 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "POLAR")
                     pure {polar: _817}
    | {- sar -} do (_818 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "VPH")
                   pure {sar: _818}
    | {- itur -} do (_819 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "YCbCr601")
                    pure {itur: _819}
    }
 
nitf_img_subheader.ICat : Grammar nitf_img_subheader.ICat =
  Choose fair
    { {- visible -} do (_820 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "VIS")
                       pure {visible: _820}
    | {- sideLooking -} do (_821 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "SL")
                           pure {sideLooking: _821}
    | {- thermalInfrared -} do (_822 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "TI")
                               pure {thermalInfrared: _822}
    | {- forwardLooking -} do (_823 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "FL")
                              pure {forwardLooking: _823}
    | {- radar -} do (_824 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "RD")
                     pure {radar: _824}
    | {- electroOptical -} do (_825 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "EO")
                              pure {electroOptical: _825}
    | {- optical -} do (_826 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "OP")
                       pure {optical: _826}
    | {- highResolution -} do (_827 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "HR")
                              pure {highResolution: _827}
    | {- hyperSpectral -} do (_828 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "HS")
                             pure {hyperSpectral: _828}
    | {- colorPhoto -} do (_829 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "CP")
                          pure {colorPhoto: _829}
    | {- blackWhitePhoto -} do (_830 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "BP")
                               pure {blackWhitePhoto: _830}
    | {- synthApertureRadar -} do (_831 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "SAR")
                                  pure {synthApertureRadar: _831}
    | {- sarRadioHologram -} do (_832 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "SARIQ")
                                pure {sarRadioHologram: _832}
    | {- infrared -} do (_833 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "IR")
                        pure {infrared: _833}
    | {- multiSpectral -} do (_834 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "MS")
                             pure {multiSpectral: _834}
    | {- fingerprints -} do (_835 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "FP")
                            pure {fingerprints: _835}
    | {- mri -} do (_836 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "MRI")
                   pure {mri: _836}
    | {- xray -} do (_837 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "XRAY")
                    pure {xray: _837}
    | {- catScans -} do (_838 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "CAT")
                        pure {catScans: _838}
    | {- video -} do (_839 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "VD")
                     pure {video: _839}
    | {- barometric -} do (_840 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "BARO")
                          pure {barometric: _840}
    | {- waterCurrent -} do (_841 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "CURRENT")
                            pure {waterCurrent: _841}
    | {- waterDepth -} do (_842 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "DEPTH")
                          pure {waterDepth: _842}
    | {- airWind -} do (_843 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "WIND")
                       pure {airWind: _843}
    | {- rasterMap -} do (_844 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "MAP")
                         pure {rasterMap: _844}
    | {- colorPatch -} do (_845 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "PAT")
                          pure {colorPatch: _845}
    | {- legends -} do (_846 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "LEG")
                       pure {legends: _846}
    | {- elevationModel -} do (_847 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "DTEM")
                              pure {elevationModel: _847}
    | {- otherMatrix -} do (_848 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "MATR")
                           pure {otherMatrix: _848}
    | {- locationGrid -} do (_849 : {}) <- nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "LOCG")
                            pure {locationGrid: _849}
    }
 
nitf_img_subheader.ABPP : Grammar (uint 64) =
  nitf_lib.BoundedNum 2 1 96
 
nitf_img_subheader.PJust : Grammar nitf_img_subheader.PJust =
  Choose fair
    { {- leftJust -} do (_850 : {}) <- @Match {'L'}
                        pure {leftJust: _850}
    | {- rightJust -} do (_851 : {}) <- @Match {'R'}
                         pure {rightJust: _851}
    }
 
nitf_img_subheader.ICords : Grammar (nitf_lib.DefaultByte nitf_img_subheader.ICords0) =
  nitf_lib.DefaultSpace nitf_img_subheader.ICords0 Choose fair
                                                     { {- utm -} do (_852 : {}) <- @Match {'U'}
                                                                    pure {utm: _852}
                                                     | {- northernhemi -} do (_853 : {}) <- @Match {'N'}
                                                                             pure {northernhemi: _853}
                                                     | {- southernhemi -} do (_854 : {}) <- @Match {'S'}
                                                                             pure {southernhemi: _854}
                                                     | {- geographic -} do (_855 : {}) <- @Match {'G'}
                                                                           pure {geographic: _855}
                                                     | {- decimal -} do (_856 : {}) <- @Match {'D'}
                                                                        pure {decimal: _856}
                                                     }
 
nitf_img_subheader.LatDeg : Grammar nitf_img_subheader.LatDeg =
  do (sign : uint 8) <- nitf_lib.Sign
     (whole_digs : [int]) <- Many[2] nitf_lib.Digit
     (whole : int) <- pure (nitf_lib.numBase 10 whole_digs)
     @Match {'.'}
     (frac_digs : [int]) <- Many[3] nitf_lib.Digit
     (frac : int) <- pure (nitf_lib.numBase 10 frac_digs)
     Choose fair
       { nitf_lib._Guard (whole < 90)
       | do nitf_lib._Guard (whole == 90)
            nitf_lib._Guard (frac == 0)
       }
     pure {sign = sign,
           whole = whole,
           frac = frac}
 
nitf_img_subheader.LongDeg : Grammar nitf_img_subheader.LongDeg =
  do (sign : uint 8) <- nitf_lib.Sign
     (whole_digs : [int]) <- Many[3] nitf_lib.Digit
     (whole : int) <- pure (nitf_lib.numBase 10 whole_digs)
     @Match {'.'}
     (frac_digs : [int]) <- Many[3] nitf_lib.Digit
     (frac : int) <- pure (nitf_lib.numBase 10 frac_digs)
     Choose fair
       { nitf_lib._Guard (whole < 180)
       | do nitf_lib._Guard (whole == 180)
            nitf_lib._Guard (frac == 0)
       }
     pure {sign = sign,
           whole = whole,
           frac = frac}
 
nitf_img_subheader.Latitude : Grammar nitf_img_subheader.Latitude =
  do (digs : [uint 8]) <- nitf_lib.PadWSpaces [uint 8] 6 (Many[ .. 6 ] nitf_lib.Numeral)
     (hemi : nitf_img_subheader.Latitude0) <- Choose fair
                                                { {- north -} do (_859 : {}) <- @Match {'N'}
                                                                 pure {north: _859}
                                                | {- south -} do (_860 : {}) <- @Match {'S'}
                                                                 pure {south: _860}
                                                }
     pure {digs = digs,
           hemi = hemi}
 
nitf_img_subheader.Longitude : Grammar nitf_img_subheader.Longitude =
  do (digs : [uint 8]) <- nitf_lib.PadWSpaces [uint 8] 7 (Many[ .. 7 ] nitf_lib.Numeral)
     (hemi : nitf_img_subheader.Longitude0) <- Choose fair
                                                 { {- east -} do (_861 : {}) <- @Match {'E'}
                                                                 pure {east: _861}
                                                 | {- west -} do (_862 : {}) <- @Match {'W'}
                                                                 pure {west: _862}
                                                 }
     pure {digs = digs,
           hemi = hemi}
 
nitf_img_subheader.LatLong : Grammar nitf_img_subheader.LatLong =
  do (lat : nitf_img_subheader.Latitude) <- nitf_img_subheader.Latitude
     (long : nitf_img_subheader.Longitude) <- nitf_img_subheader.Longitude
     pure {lat = lat,
           long = long}
 
nitf_img_subheader.UtmZone : Grammar nitf_img_subheader.UtmZone =
  do (zone : uint 64) <- nitf_lib.BoundedNum 2 1 60
     pure {zone = zone}
 
nitf_img_subheader.FiveDigitNum : Grammar int =
  do (v : [int]) <- Many[5] nitf_lib.Digit
     ($$ : int) <- pure (nitf_lib.numBase 10 v)
     pure $$
 
nitf_img_subheader.PlainUtm : Grammar nitf_img_subheader.PlainUtm =
  do (utm : [uint 8]) <- Many[2] nitf_lib.Numeral
     (easting : [uint 8]) <- Many[6] nitf_lib.Numeral
     (northing : [uint 8]) <- Many[7] nitf_lib.Numeral
     pure {utm = utm,
           easting = easting,
           northing = northing}
 
nitf_img_subheader.OmitIO (lb : uint 8) (ub : uint 8) : Grammar (uint 8) =
  Match (((lb .. 'H') | ('J' .. 'N')) | ('P' .. ub))
 
nitf_img_subheader.MGRS : Grammar nitf_img_subheader.MGRS =
  do (zone_num : [int]) <- Many[2] nitf_lib.Digit
     (zone_band : uint 8) <- nitf_img_subheader.OmitIO 'C' 'X'
     (sq_id : nitf_img_subheader.MGRS0) <- do (col_id : uint 8) <- nitf_img_subheader.OmitIO 'A' 'Z'
                                              (row_id : uint 8) <- nitf_img_subheader.OmitIO 'A' 'V'
                                              pure {col_id = col_id,
                                                    row_id = row_id}
     (easting : [uint 8]) <- Many[5] nitf_lib.Numeral
     (northing : [uint 8]) <- Many[5] nitf_lib.Numeral
     pure {zone_num = zone_num,
           zone_band = zone_band,
           sq_id = sq_id,
           easting = easting,
           northing = northing}
 
nitf_img_subheader.EqLat ?a0 ?a1 ?a3 ?a5 ?a7 (HasStruct ?a0 sign ?a3) (HasStruct ?a1 sign ?a3) (HasStruct ?a0 whole ?a5) (HasStruct ?a1 whole ?a5) (HasStruct ?a0 frac ?a7) (HasStruct ?a1 frac ?a7) (l0 : ?a0) (l1 : ?a1) : Grammar {} =
  do nitf_lib._Guard ((l0.sign) == (l1.sign))
     nitf_lib._Guard ((l0.whole) == (l1.whole))
     ($$ : {}) <- nitf_lib.Guard ((l0.frac) == (l1.frac))
     pure $$
 
nitf_img_subheader.OrdLong ?a0 ?a1 ?a9 ?a13 (HasStruct ?a0 sign uint 8) (HasStruct ?a1 sign uint 8) (HasStruct ?a1 whole ?a9) (HasStruct ?a0 whole ?a9) (HasStruct ?a1 frac ?a13) (HasStruct ?a0 frac ?a13) (left : ?a0) (right : ?a1) : Grammar {} =
  Choose fair
    { do nitf_lib._Guard ((left.sign) == '-')
         ($$ : {}) <- nitf_lib.Guard ((right.sign) == '+')
         pure $$
    | do nitf_lib._Guard ((left.sign) == (right.sign))
         ($$ : {}) <- Choose fair
                        { do nitf_lib._Guard ((left.sign) == '-')
                             ($$ : {}) <- Choose fair
                                            { nitf_lib.Guard ((right.whole) < (left.whole))
                                            | do nitf_lib._Guard ((left.whole) == (right.whole))
                                                 ($$ : {}) <- nitf_lib.Guard ((right.frac) <= (left.frac))
                                                 pure $$
                                            }
                             pure $$
                        | do nitf_lib._Guard ((left.sign) == '+')
                             ($$ : {}) <- Choose fair
                                            { nitf_lib.Guard ((left.whole) < (right.whole))
                                            | do nitf_lib._Guard ((left.whole) == (right.whole))
                                                 ($$ : {}) <- nitf_lib.Guard ((left.frac) <= (right.frac))
                                                 pure $$
                                            }
                             pure $$
                        }
         pure $$
    }
 
nitf_img_subheader._EqLat ?a0 ?a1 ?a3 ?a5 ?a7 (HasStruct ?a0 sign ?a3) (HasStruct ?a1 sign ?a3) (HasStruct ?a0 whole ?a5) (HasStruct ?a1 whole ?a5) (HasStruct ?a0 frac ?a7) (HasStruct ?a1 frac ?a7) (l0 : ?a0) (l1 : ?a1) : Grammar {} =
  do nitf_lib._Guard ((l0.sign) == (l1.sign))
     nitf_lib._Guard ((l0.whole) == (l1.whole))
     nitf_lib._Guard ((l0.frac) == (l1.frac))
 
nitf_img_subheader._OrdLong ?a0 ?a1 ?a9 ?a13 (HasStruct ?a0 sign uint 8) (HasStruct ?a1 sign uint 8) (HasStruct ?a1 whole ?a9) (HasStruct ?a0 whole ?a9) (HasStruct ?a1 frac ?a13) (HasStruct ?a0 frac ?a13) (left : ?a0) (right : ?a1) : Grammar {} =
  Choose fair
    { do nitf_lib._Guard ((left.sign) == '-')
         nitf_lib._Guard ((right.sign) == '+')
    | do nitf_lib._Guard ((left.sign) == (right.sign))
         Choose fair
           { do nitf_lib._Guard ((left.sign) == '-')
                Choose fair
                  { nitf_lib._Guard ((right.whole) < (left.whole))
                  | do nitf_lib._Guard ((left.whole) == (right.whole))
                       nitf_lib._Guard ((right.frac) <= (left.frac))
                  }
           | do nitf_lib._Guard ((left.sign) == '+')
                Choose fair
                  { nitf_lib._Guard ((left.whole) < (right.whole))
                  | do nitf_lib._Guard ((left.whole) == (right.whole))
                       nitf_lib._Guard ((left.frac) <= (right.frac))
                  }
           }
    }
 
nitf_img_subheader.IGeoLo : Grammar nitf_img_subheader.IGeoLo =
  Choose fair
    { {- decimal_degs -} do (_871 : nitf_img_subheader.IGeoLo0) <- do (lat0 : nitf_img_subheader.LatDeg) <- nitf_img_subheader.LatDeg
                                                                      (long0 : nitf_img_subheader.LongDeg) <- nitf_img_subheader.LongDeg
                                                                      (lat1 : nitf_img_subheader.LatDeg) <- nitf_img_subheader.LatDeg
                                                                      (long1 : nitf_img_subheader.LongDeg) <- nitf_img_subheader.LongDeg
                                                                      (lat2 : nitf_img_subheader.LatDeg) <- nitf_img_subheader.LatDeg
                                                                      (long2 : nitf_img_subheader.LongDeg) <- nitf_img_subheader.LongDeg
                                                                      (lat3 : nitf_img_subheader.LatDeg) <- nitf_img_subheader.LatDeg
                                                                      (long3 : nitf_img_subheader.LongDeg) <- nitf_img_subheader.LongDeg
                                                                      nitf_img_subheader._EqLat nitf_img_subheader.LatDeg nitf_img_subheader.LatDeg (uint 8) int int lat0 lat1
                                                                      nitf_img_subheader._EqLat nitf_img_subheader.LatDeg nitf_img_subheader.LatDeg (uint 8) int int lat2 lat3
                                                                      nitf_img_subheader._OrdLong nitf_img_subheader.LongDeg nitf_img_subheader.LongDeg int int long0 long1
                                                                      nitf_img_subheader._OrdLong nitf_img_subheader.LongDeg nitf_img_subheader.LongDeg int int long3 long2
                                                                      pure {lat0 = lat0,
                                                                            long0 = long0,
                                                                            lat1 = lat1,
                                                                            long1 = long1,
                                                                            lat2 = lat2,
                                                                            long2 = long2,
                                                                            lat3 = lat3,
                                                                            long3 = long3}
                            pure {decimal_degs: _871}
    | {- lat_long -} do (_872 : [nitf_img_subheader.LatLong]) <- Many[4] nitf_img_subheader.LatLong
                        pure {lat_long: _872}
    | {- mgrs -} do (_873 : [nitf_img_subheader.MGRS]) <- Many[4] nitf_img_subheader.MGRS
                    pure {mgrs: _873}
    | {- plain_utm -} do (_874 : [nitf_img_subheader.PlainUtm]) <- Many[4] nitf_img_subheader.PlainUtm
                         pure {plain_utm: _874}
    }
 
nitf_img_subheader.NICom : Grammar (uint 64) =
  nitf_lib.DigitUInt
 
nitf_img_subheader.IComn (n : uint 64) : Grammar [[uint 8]] =
  Many[n] Many[80] nitf_lib.Byte
 
nitf_img_subheader.IC : Grammar nitf_img_subheader.IC =
  Choose fair
    { {- c1 -} do (_875 : {}) <- @MatchBytes "C1"
                  pure {c1: _875}
    | {- c3 -} do (_876 : {}) <- @MatchBytes "C3"
                  pure {c3: _876}
    | {- c4 -} do (_877 : {}) <- @MatchBytes "C4"
                  pure {c4: _877}
    | {- c5 -} do (_878 : {}) <- @MatchBytes "C5"
                  pure {c5: _878}
    | {- c6 -} do (_879 : {}) <- @MatchBytes "C6"
                  pure {c6: _879}
    | {- c7 -} do (_880 : {}) <- @MatchBytes "C7"
                  pure {c7: _880}
    | {- c8 -} do (_881 : {}) <- @MatchBytes "C8"
                  pure {c8: _881}
    | {- i1 -} do (_882 : {}) <- @MatchBytes "I1"
                  pure {i1: _882}
    | {- m1 -} do (_883 : {}) <- @MatchBytes "M1"
                  pure {m1: _883}
    | {- m3 -} do (_884 : {}) <- @MatchBytes "M3"
                  pure {m3: _884}
    | {- m4 -} do (_885 : {}) <- @MatchBytes "M4"
                  pure {m4: _885}
    | {- m5 -} do (_886 : {}) <- @MatchBytes "M5"
                  pure {m5: _886}
    | {- m6 -} do (_887 : {}) <- @MatchBytes "M6"
                  pure {m6: _887}
    | {- m7 -} do (_888 : {}) <- @MatchBytes "M7"
                  pure {m7: _888}
    | {- m8 -} do (_889 : {}) <- @MatchBytes "M8"
                  pure {m8: _889}
    | {- nc -} do (_890 : {}) <- @MatchBytes "NC"
                  pure {nc: _890}
    | {- nm -} do (_891 : {}) <- @MatchBytes "NM"
                  pure {nm: _891}
    }
 
nitf_img_subheader.ComRat (ic : nitf_img_subheader.IC) : Grammar nitf_img_subheader.ComRat =
  Choose fair
    { {- dim_coding -} do (_898 : nitf_img_subheader.ComRat0) <- do Choose fair
                                                                      { case ic is
                                                                          { {| c1 = _892 |} -> pure {}
                                                                          }
                                                                      | case ic is
                                                                          { {| m1 = _893 |} -> pure {}
                                                                          }
                                                                      }
                                                                    ($$ : nitf_img_subheader.ComRat0) <- Choose fair
                                                                                                           { {- oned -} do (_895 : {}) <- nitf_lib._PadWSpaces [uint 8] 4 (@MatchBytes "1D")
                                                                                                                           pure {oned: _895}
                                                                                                           | {- twods -} do (_896 : {}) <- nitf_lib._PadWSpaces [uint 8] 4 (@MatchBytes "2DS")
                                                                                                                            pure {twods: _896}
                                                                                                           | {- twodh -} do (_897 : {}) <- nitf_lib._PadWSpaces [uint 8] 4 (@MatchBytes "2DH")
                                                                                                                            pure {twodh: _897}
                                                                                                           }
                                                                    pure $$
                          pure {dim_coding: _898}
    | {- quant_tables -} do (_911 : nitf_img_subheader.ComRat1) <- do Choose fair
                                                                        { Choose fair
                                                                            { Choose fair
                                                                                { Choose fair
                                                                                    { case ic is
                                                                                        { {| c3 = _899 |} -> pure {}
                                                                                        }
                                                                                    | case ic is
                                                                                        { {| c5 = _900 |} -> pure {}
                                                                                        }
                                                                                    }
                                                                                | case ic is
                                                                                    { {| i1 = _901 |} -> pure {}
                                                                                    }
                                                                                }
                                                                            | case ic is
                                                                                { {| m3 = _902 |} -> pure {}
                                                                                }
                                                                            }
                                                                        | case ic is
                                                                            { {| m5 = _903 |} -> pure {}
                                                                            }
                                                                        }
                                                                      @Match {'0'}
                                                                      (img_data_type : uint 64) <- nitf_lib.BoundedDigit 0 4
                                                                      @Match {'.'}
                                                                      (quality_level : uint 64) <- nitf_lib.BoundedDigit 0 5
                                                                      Choose fair
                                                                        { do Choose fair
                                                                               { case ic is
                                                                                   { {| c5 = _904 |} -> pure {}
                                                                                   }
                                                                               | case ic is
                                                                                   { {| m5 = _905 |} -> pure {}
                                                                                   }
                                                                               }
                                                                             nitf_lib._Guard (quality_level == 0)
                                                                        | Choose fair
                                                                            { Choose fair
                                                                                { case ic is
                                                                                    { {| c3 = _908 |} -> pure {}
                                                                                    }
                                                                                | case ic is
                                                                                    { {| i1 = _909 |} -> pure {}
                                                                                    }
                                                                                }
                                                                            | case ic is
                                                                                { {| m3 = _910 |} -> pure {}
                                                                                }
                                                                            }
                                                                        }
                                                                      pure {img_data_type = img_data_type,
                                                                            quality_level = quality_level}
                            pure {quant_tables: _911}
    | {- bits_per_pixel -} do (_914 : nitf_img_subheader.ComRat2) <- do Choose fair
                                                                          { case ic is
                                                                              { {| c4 = _912 |} -> pure {}
                                                                              }
                                                                          | case ic is
                                                                              { {| m4 = _913 |} -> pure {}
                                                                              }
                                                                          }
                                                                        (ones : int) <- nitf_lib.Digit
                                                                        @Match {'.'}
                                                                        (tenths : int) <- nitf_lib.Digit
                                                                        (hudredths : int) <- nitf_lib.Digit
                                                                        pure {ones = ones,
                                                                              tenths = tenths,
                                                                              hudredths = hudredths}
                              pure {bits_per_pixel: _914}
    | {- nominal -} do (_918 : [uint 8]) <- do Choose fair
                                                 { case ic is
                                                     { {| c8 = _915 |} -> pure {}
                                                     }
                                                 | case ic is
                                                     { {| m8 = _916 |} -> pure {}
                                                     }
                                                 }
                                               ($$ : [uint 8]) <- Many[4] nitf_lib.Byte
                                               pure $$
                       pure {nominal: _918}
    }
 
nitf_img_subheader.NBands (irep : nitf_img_subheader.IRep) : Grammar (uint 64) =
  Choose fair
    { Choose fair
        { Choose fair
            { Choose fair
                { Choose fair
                    { Choose fair
                        { Choose fair
                            { Choose fair
                                { Choose fair
                                    { do case irep is
                                           { {| nodisplay = _919 |} -> pure {}
                                           }
                                         ($$ : uint 64) <- nitf_lib.DigitUInt
                                         pure $$
                                    | do case irep is
                                           { {| monochrome = _921 |} -> pure {}
                                           }
                                         ($$ : uint 64) <- nitf_lib.IsNum 1 1
                                         pure $$
                                    }
                                | do case irep is
                                       { {| rgb = _923 |} -> pure {}
                                       }
                                     ($$ : uint 64) <- nitf_lib.IsNum 1 3
                                     pure $$
                                }
                            | do case irep is
                                   { {| rgblut = _925 |} -> pure {}
                                   }
                                 ($$ : uint 64) <- nitf_lib.IsNum 1 1
                                 pure $$
                            }
                        | do case irep is
                               { {| itur = _927 |} -> pure {}
                               }
                             ($$ : uint 64) <- nitf_lib.IsNum 3 3
                             pure $$
                        }
                    | do case irep is
                           { {| cartesian = _929 |} -> pure {}
                           }
                         ($$ : uint 64) <- nitf_lib.DigitUInt
                         pure $$
                    }
                | do case irep is
                       { {| polar = _931 |} -> pure {}
                       }
                     ($$ : uint 64) <- nitf_lib.IsNum 1 2
                     pure $$
                }
            | do case irep is
                   { {| sar = _933 |} -> pure {}
                   }
                 ($$ : uint 64) <- nitf_lib.IsNum 1 1
                 pure $$
            }
        | do case irep is
               { {| multi = _935 |} -> pure {}
               }
             ($$ : uint 64) <- Choose fair
                                 { nitf_lib.IsNum 1 0
                                 | nitf_lib.BoundedNum 1 2 9
                                 }
             pure $$
        }
    | nitf_lib.IsNum 1 0
    }
 
nitf_img_subheader.XBands ?a0 (n : ?a0) : Grammar (uint 64) =
  nitf_lib.BoundedNum 5 10 99999
 
nitf_img_subheader.IRepBandN : Grammar nitf_img_subheader.IRepBandN =
  Choose fair
    { {- bandM -} do (_937 : {}) <- nitf_lib._PadWSpaces [uint 8] 2 (@MatchBytes "M")
                     pure {bandM: _937}
    | {- lutBand -} do (_938 : {}) <- nitf_lib._PadWSpaces [uint 8] 2 (@MatchBytes "LU")
                       pure {lutBand: _938}
    | {- red -} do (_939 : {}) <- nitf_lib._PadWSpaces [uint 8] 2 (@MatchBytes "R")
                   pure {red: _939}
    | {- green -} do (_940 : {}) <- nitf_lib._PadWSpaces [uint 8] 2 (@MatchBytes "G")
                     pure {green: _940}
    | {- blue -} do (_941 : {}) <- nitf_lib._PadWSpaces [uint 8] 2 (@MatchBytes "B")
                    pure {blue: _941}
    | {- monoBand -} do (_942 : {}) <- nitf_lib._PadWSpaces [uint 8] 2 (@MatchBytes "M")
                        pure {monoBand: _942}
    | {- luminance -} do (_943 : {}) <- nitf_lib._PadWSpaces [uint 8] 2 (@MatchBytes "Y")
                         pure {luminance: _943}
    | {- chrominanceBlue -} do (_944 : {}) <- nitf_lib._PadWSpaces [uint 8] 2 (@MatchBytes "Cb")
                               pure {chrominanceBlue: _944}
    | {- chrominanceRed -} do (_945 : {}) <- nitf_lib._PadWSpaces [uint 8] 2 (@MatchBytes "Cr")
                              pure {chrominanceRed: _945}
    | {- default -} do (_946 : {}) <- nitf_lib._Spaces 2
                       pure {default: _946}
    }
 
nitf_img_subheader.ISubCatN : Grammar nitf_img_subheader.ISubCatN =
  Choose fair
    { {- inphase -} do (_947 : {}) <- nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "I")
                       pure {inphase: _947}
    | {- quadrature -} do (_948 : {}) <- nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "Q")
                          pure {quadrature: _948}
    | {- magnitude -} do (_949 : {}) <- nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "M")
                         pure {magnitude: _949}
    | {- phase -} do (_950 : {}) <- nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "P")
                     pure {phase: _950}
    | {- speed -} do (_951 : {}) <- nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "SPEED")
                     pure {speed: _951}
    | {- direct -} do (_952 : {}) <- nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "DIRECT")
                      pure {direct: _952}
    | {- easting -} do (_953 : {}) <- nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "CGX")
                       pure {easting: _953}
    | {- northing -} do (_954 : {}) <- nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "CGY")
                        pure {northing: _954}
    | {- longitude -} do (_955 : {}) <- nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "GGX")
                         pure {longitude: _955}
    | {- latitude -} do (_956 : {}) <- nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "GGY")
                        pure {latitude: _956}
    | {- waveLength -} do (_957 : int) <- nitf_lib.UnsignedNum 6
                          pure {waveLength: _957}
    | {- default -} do (_958 : {}) <- nitf_lib._Spaces 6
                       pure {default: _958}
    | {- userdef -} do (_959 : [uint 8]) <- Many[6] nitf_lib.BCSA
                       pure {userdef: _959}
    }
 
nitf_img_subheader.IFCN : Grammar (uint 8) =
  Match {'N'}
 
nitf_img_subheader.ImFltN : Grammar [uint 8] =
  nitf_lib.Spaces 3
 
nitf_img_subheader.NELutN : Grammar (uint 64) =
  nitf_lib.BoundedPos 5 65536
 
nitf_img_subheader.LutdNM (n : uint 64) : Grammar [uint 8] =
  Many[n] nitf_lib.Byte
 
nitf_img_subheader.ISync : Grammar (uint 8) =
  Match {'0'}
 
nitf_img_subheader.IMode ?a7 (Literal 1 ?a7) (nbands : ?a7) : Grammar nitf_img_subheader.IMode =
  do ($$ : nitf_img_subheader.IMode) <- Choose fair
                                          { {- blockMode -} do (_960 : {}) <- @Match {'B'}
                                                               pure {blockMode: _960}
                                          | {- pixel -} do (_961 : {}) <- @Match {'P'}
                                                           pure {pixel: _961}
                                          | {- row -} do (_962 : {}) <- @Match {'R'}
                                                         pure {row: _962}
                                          | {- seq -} do (_963 : {}) <- @Match {'S'}
                                                         pure {seq: _963}
                                          }
     Choose fair
       { nitf_lib._Guard (nbands != 1)
       | case $$ is
           { {| blockMode = _964 |} -> pure {}
           }
       }
     pure $$
 
nitf_img_subheader.NBPR : Grammar (uint 64) =
  nitf_lib.PosQuad
 
nitf_img_subheader.NBPC : Grammar (uint 64) =
  nitf_lib.PosQuad
 
nitf_img_subheader.NPPBH : Grammar (uint 64) =
  nitf_lib.UpperBounded 4 8192
 
nitf_img_subheader.NPPBV : Grammar (uint 64) =
  nitf_lib.UpperBounded 4 8192
 
nitf_img_subheader.NBPP (abpp : uint 64) (ic : nitf_img_subheader.IC) : Grammar (uint 64) =
  do ($$ : uint 64) <- nitf_lib.BoundedPos 2 96
     nitf_lib._Guard (abpp <= $$)
     Choose fair
       { Choose fair
           { Choose fair
               { do Choose fair
                      { Choose fair
                          { Choose fair
                              { Choose fair
                                  { case ic is
                                      { {| c3 = _965 |} -> pure {}
                                      }
                                  | case ic is
                                      { {| c5 = _966 |} -> pure {}
                                      }
                                  }
                              | case ic is
                                  { {| i1 = _967 |} -> pure {}
                                  }
                              }
                          | case ic is
                              { {| m3 = _968 |} -> pure {}
                              }
                          }
                      | case ic is
                          { {| m5 = _969 |} -> pure {}
                          }
                      }
                    Choose fair
                      { nitf_lib._Guard ($$ == 8)
                      | nitf_lib._Guard ($$ == 12)
                      }
               | do case ic is
                      { {| c1 = _971 |} -> pure {}
                      }
                    nitf_lib._Guard ($$ == 1)
               }
           | do Choose fair
                  { case ic is
                      { {| c1 = _973 |} -> pure {}
                      }
                  | case ic is
                      { {| m8 = _974 |} -> pure {}
                      }
                  }
                nitf_lib._Guard (1 <= $$)
                nitf_lib._Guard ($$ <= 38)
           }
       | Choose fair
           { Choose fair
               { Choose fair
                   { Choose fair
                       { Choose fair
                           { Choose fair
                               { Choose fair
                                   { Choose fair
                                       { Choose fair
                                           { case ic is
                                               { {| c4 = _977 |} -> pure {}
                                               }
                                           | case ic is
                                               { {| c6 = _978 |} -> pure {}
                                               }
                                           }
                                       | case ic is
                                           { {| c7 = _979 |} -> pure {}
                                           }
                                       }
                                   | case ic is
                                       { {| c8 = _980 |} -> pure {}
                                       }
                                   }
                               | case ic is
                                   { {| m1 = _981 |} -> pure {}
                                   }
                               }
                           | case ic is
                               { {| m4 = _982 |} -> pure {}
                               }
                           }
                       | case ic is
                           { {| m6 = _983 |} -> pure {}
                           }
                       }
                   | case ic is
                       { {| m7 = _984 |} -> pure {}
                       }
                   }
               | case ic is
                   { {| nc = _985 |} -> pure {}
                   }
               }
           | case ic is
               { {| nm = _986 |} -> pure {}
               }
           }
       }
     pure $$
 
nitf_img_subheader.IDLvl : Grammar (uint 64) =
  nitf_lib.BoundedNum 3 1 999
 
nitf_img_subheader.IALvl : Grammar (uint 64) =
  nitf_lib.AttachmentLvl
 
nitf_img_subheader.IMag : Grammar nitf_img_subheader.IMag =
  Choose fair
    { {- fp -} do (_987 : nitf_lib.FixedPoint) <- do ($$ : nitf_lib.FixedPoint) <- nitf_lib.FixedPoint
                                                     (fplen : uint 64) <- pure (((Length ($$.digs)) + 1) + (Length ($$.radix)))
                                                     nitf_lib._Guard (fplen <= 4)
                                                     nitf_lib._Spaces (4 - fplen)
                                                     pure $$
                  pure {fp: _987}
    | {- frac -} do (_988 : [int]) <- do @Match {'/'}
                                         ($$ : [int]) <- Many[ .. 3 ] nitf_lib.Digit
                                         (fplen : uint 64) <- pure ((Length $$) + 1)
                                         nitf_lib._Guard (fplen <= 4)
                                         nitf_lib._Spaces (4 - fplen)
                                         pure $$
                    pure {frac: _988}
    }
 
nitf_img_subheader.UDIDL : Grammar (uint 64) =
  nitf_lib.LowerBoundedOrZero 5 3
 
nitf_img_subheader.UDOfl : Grammar int =
  nitf_lib.UnsignedNum 3
 
nitf_img_subheader.UDID (n : uint 64) : Grammar [uint 8] =
  Many[n - 3] nitf_lib.Byte
 
nitf_img_subheader.IXShDL : Grammar (uint 64) =
  nitf_lib.LowerBoundedOrZero 5 3
 
nitf_img_subheader.IXSOfl : Grammar int =
  nitf_lib.UnsignedNum 3
 
nitf_img_subheader.IXShD (n : uint 64) : Grammar [uint 8] =
  Many[n - 3] nitf_lib.Byte
 
nitf_img_subheader.DispParams ?a123 ?a126 (Literal 1 ?a123) (Literal 9 ?a123) (Literal 0 ?a123) (Literal 0 ?a126) (Literal 2 ?a126) (Literal 3 ?a123) (Literal 3 ?a126) (Literal 2 ?a123) (irep : nitf_img_subheader.IRep) (irepband : nitf_img_subheader.IRepBandN) (nbands : ?a123) (pvtype : nitf_img_subheader.PVType) (nluts : ?a126) : Grammar {} =
  Choose fair
    { Choose fair
        { Choose fair
            { Choose fair
                { Choose fair
                    { Choose fair
                        { Choose fair
                            { Choose fair
                                { do case irep is
                                       { {| nodisplay = _989 |} -> pure {}
                                       }
                                     case irepband is
                                       { {| default = _990 |} -> pure {}
                                       }
                                     Choose fair
                                       { do nitf_lib._Guard (1 <= nbands)
                                            nitf_lib._Guard (nbands <= 9)
                                       | nitf_lib._Guard (nbands == 0)
                                       }
                                     Choose fair
                                       { Choose fair
                                           { Choose fair
                                               { Choose fair
                                                   { case pvtype is
                                                       { {| integer = _992 |} -> pure {}
                                                       }
                                                   | case pvtype is
                                                       { {| real = _993 |} -> pure {}
                                                       }
                                                   }
                                               | case pvtype is
                                                   { {| complex = _994 |} -> pure {}
                                                   }
                                               }
                                           | case pvtype is
                                               { {| bilevel = _995 |} -> pure {}
                                               }
                                           }
                                       | case pvtype is
                                           { {| signed = _996 |} -> pure {}
                                           }
                                       }
                                     ($$ : {}) <- nitf_lib.Guard (nluts == 0)
                                     pure $$
                                | do case irep is
                                       { {| monochrome = _998 |} -> pure {}
                                       }
                                     Choose fair
                                       { Choose fair
                                           { case irepband is
                                               { {| lutBand = _999 |} -> pure {}
                                               }
                                           | case irepband is
                                               { {| monoBand = _1000 |} -> pure {}
                                               }
                                           }
                                       | case irepband is
                                           { {| default = _1001 |} -> pure {}
                                           }
                                       }
                                     nitf_lib._Guard (nbands == 1)
                                     Choose fair
                                       { Choose fair
                                           { case pvtype is
                                               { {| integer = _1002 |} -> pure {}
                                               }
                                           | case pvtype is
                                               { {| real = _1003 |} -> pure {}
                                               }
                                           }
                                       | case pvtype is
                                           { {| bilevel = _1004 |} -> pure {}
                                           }
                                       }
                                     nitf_lib._Guard (0 <= nluts)
                                     ($$ : {}) <- nitf_lib.Guard (nluts <= 2)
                                     pure $$
                                }
                            | do case irep is
                                   { {| rgb = _1006 |} -> pure {}
                                   }
                                 Choose fair
                                   { Choose fair
                                       { case irepband is
                                           { {| red = _1007 |} -> pure {}
                                           }
                                       | case irepband is
                                           { {| green = _1008 |} -> pure {}
                                           }
                                       }
                                   | case irepband is
                                       { {| blue = _1009 |} -> pure {}
                                       }
                                   }
                                 nitf_lib._Guard (nbands == 3)
                                 Choose fair
                                   { case pvtype is
                                       { {| integer = _1010 |} -> pure {}
                                       }
                                   | case pvtype is
                                       { {| real = _1011 |} -> pure {}
                                       }
                                   }
                                 ($$ : {}) <- nitf_lib.Guard (nluts == 0)
                                 pure $$
                            }
                        | do case irep is
                               { {| rgblut = _1013 |} -> pure {}
                               }
                             case irepband is
                               { {| lutBand = _1014 |} -> pure {}
                               }
                             nitf_lib._Guard (nbands == 1)
                             Choose fair
                               { case pvtype is
                                   { {| integer = _1015 |} -> pure {}
                                   }
                               | case pvtype is
                                   { {| real = _1016 |} -> pure {}
                                   }
                               }
                             ($$ : {}) <- nitf_lib.Guard (nluts == 3)
                             pure $$
                        }
                    | do case irep is
                           { {| itur = _1018 |} -> pure {}
                           }
                         Choose fair
                           { Choose fair
                               { case irepband is
                                   { {| luminance = _1019 |} -> pure {}
                                   }
                               | case irepband is
                                   { {| chrominanceBlue = _1020 |} -> pure {}
                                   }
                               }
                           | case irepband is
                               { {| chrominanceRed = _1021 |} -> pure {}
                               }
                           }
                         nitf_lib._Guard (nbands == 3)
                         case pvtype is
                           { {| integer = _1022 |} -> pure {}
                           }
                         ($$ : {}) <- nitf_lib.Guard (nluts == 0)
                         pure $$
                    }
                | do case irep is
                       { {| cartesian = _1024 |} -> pure {}
                       }
                     case irepband is
                       { {| default = _1025 |} -> pure {}
                       }
                     Choose fair
                       { do nitf_lib._Guard (1 <= nbands)
                            nitf_lib._Guard (nbands <= 9)
                       | nitf_lib._Guard (nbands == 0)
                       }
                     Choose fair
                       { Choose fair
                           { case pvtype is
                               { {| integer = _1027 |} -> pure {}
                               }
                           | case pvtype is
                               { {| real = _1028 |} -> pure {}
                               }
                           }
                       | case pvtype is
                           { {| complex = _1029 |} -> pure {}
                           }
                       }
                     ($$ : {}) <- nitf_lib.Guard (nluts == 0)
                     pure $$
                }
            | do case irep is
                   { {| polar = _1031 |} -> pure {}
                   }
                 Choose fair
                   { case irepband is
                       { {| default = _1032 |} -> pure {}
                       }
                   | case irepband is
                       { {| monoBand = _1033 |} -> pure {}
                       }
                   }
                 nitf_lib._Guard (nbands == 2)
                 Choose fair
                   { Choose fair
                       { case pvtype is
                           { {| integer = _1034 |} -> pure {}
                           }
                       | case pvtype is
                           { {| real = _1035 |} -> pure {}
                           }
                       }
                   | case pvtype is
                       { {| complex = _1036 |} -> pure {}
                       }
                   }
                 ($$ : {}) <- nitf_lib.Guard (nluts == 0)
                 pure $$
            }
        | do case irep is
               { {| sar = _1038 |} -> pure {}
               }
             case irepband is
               { {| default = _1039 |} -> pure {}
               }
             nitf_lib._Guard (nbands == 2)
             Choose fair
               { Choose fair
                   { case pvtype is
                       { {| integer = _1040 |} -> pure {}
                       }
                   | case pvtype is
                       { {| real = _1041 |} -> pure {}
                       }
                   }
               | case pvtype is
                   { {| complex = _1042 |} -> pure {}
                   }
               }
             ($$ : {}) <- nitf_lib.Guard (nluts == 0)
             pure $$
        }
    | do case irep is
           { {| multi = _1044 |} -> pure {}
           }
         Choose fair
           { Choose fair
               { Choose fair
                   { Choose fair
                       { Choose fair
                           { case irepband is
                               { {| default = _1045 |} -> pure {}
                               }
                           | case irepband is
                               { {| monoBand = _1046 |} -> pure {}
                               }
                           }
                       | case irepband is
                           { {| red = _1047 |} -> pure {}
                           }
                       }
                   | case irepband is
                       { {| green = _1048 |} -> pure {}
                       }
                   }
               | case irepband is
                   { {| blue = _1049 |} -> pure {}
                   }
               }
           | case irepband is
               { {| lutBand = _1050 |} -> pure {}
               }
           }
         Choose fair
           { do nitf_lib._Guard (2 <= nbands)
                nitf_lib._Guard (nbands <= 9)
           | nitf_lib._Guard (nbands == 0)
           }
         nitf_lib._Guard (0 <= nluts)
         ($$ : {}) <- nitf_lib.Guard (nluts <= 3)
         pure $$
    }
 
nitf_img_subheader.CatIntLow ?a1 ?a4 (Literal 8 ?a4) (Literal 2 ?a1) (nbpp : ?a4) (abpp : ?a1) : Grammar {} =
  do nitf_lib._Guard (nbpp == 8)
     nitf_lib._Guard (2 <= abpp)
     ($$ : {}) <- nitf_lib.Guard (nbpp <= 8)
     pure $$
 
nitf_img_subheader.CatIntMid ?a1 ?a8 (Literal 12 ?a8) (Literal 8 ?a1) (Literal 16 ?a8) (Literal 9 ?a1) (nbpp : ?a8) (abpp : ?a1) : Grammar {} =
  Choose fair
    { do nitf_lib._Guard (nbpp == 12)
         nitf_lib._Guard (8 <= abpp)
         ($$ : {}) <- nitf_lib.Guard (nbpp <= 12)
         pure $$
    | do nitf_lib._Guard (nbpp == 16)
         nitf_lib._Guard (9 <= abpp)
         ($$ : {}) <- nitf_lib.Guard (nbpp <= 16)
         pure $$
    }
 
nitf_img_subheader.CatIntHigh ?a1 ?a8 (Literal 32 ?a8) (Literal 17 ?a1) (Literal 64 ?a8) (Literal 33 ?a1) (nbpp : ?a8) (abpp : ?a1) : Grammar {} =
  Choose fair
    { do nitf_lib._Guard (nbpp == 32)
         nitf_lib._Guard (17 <= abpp)
         ($$ : {}) <- nitf_lib.Guard (nbpp <= 32)
         pure $$
    | do nitf_lib._Guard (nbpp == 64)
         nitf_lib._Guard (33 <= abpp)
         ($$ : {}) <- nitf_lib.Guard (nbpp <= 64)
         pure $$
    }
 
nitf_img_subheader.CatIntEnds ?a0 ?a1 (Literal 8 ?a0) (Literal 2 ?a1) (Literal 32 ?a0) (Literal 17 ?a1) (Literal 64 ?a0) (Literal 33 ?a1) (nbpp : ?a0) (abpp : ?a1) : Grammar {} =
  Choose fair
    { nitf_img_subheader.CatIntLow ?a1 ?a0 nbpp abpp
    | nitf_img_subheader.CatIntHigh ?a1 ?a0 nbpp abpp
    }
 
nitf_img_subheader.CatIntFull ?a0 ?a1 (Literal 8 ?a0) (Literal 2 ?a1) (Literal 32 ?a0) (Literal 17 ?a1) (Literal 64 ?a0) (Literal 33 ?a1) (Literal 12 ?a0) (Literal 8 ?a1) (Literal 16 ?a0) (Literal 9 ?a1) (nbpp : ?a0) (abpp : ?a1) : Grammar {} =
  Choose fair
    { nitf_img_subheader.CatIntEnds ?a0 ?a1 nbpp abpp
    | nitf_img_subheader.CatIntMid ?a1 ?a0 nbpp abpp
    }
 
nitf_img_subheader.CatReals ?a5 ?a6 (Literal 32 ?a5) (Literal 32 ?a6) (Literal 64 ?a5) (Literal 64 ?a6) (nbpp : ?a5) (abpp : ?a6) : Grammar {} =
  Choose fair
    { do nitf_lib._Guard (nbpp == 32)
         ($$ : {}) <- nitf_lib.Guard (abpp == 32)
         pure $$
    | do nitf_lib._Guard (nbpp == 64)
         ($$ : {}) <- nitf_lib.Guard (abpp == 64)
         pure $$
    }
 
nitf_img_subheader.CatComplex ?a2 ?a3 (Literal 64 ?a2) (Literal 64 ?a3) (nbpp : ?a2) (abpp : ?a3) : Grammar {} =
  do nitf_lib._Guard (nbpp == 64)
     ($$ : {}) <- nitf_lib.Guard (abpp == 64)
     pure $$
 
nitf_img_subheader.CatParams ?a217 ?a219 ?a235 (Literal 1 ?a235) (Literal 1 ?a217) (Literal 1 ?a219) (Literal 3 ?a235) (Literal 8 ?a217) (Literal 2 ?a219) (Literal 32 ?a217) (Literal 17 ?a219) (Literal 64 ?a217) (Literal 33 ?a219) (Literal 12 ?a217) (Literal 8 ?a219) (Literal 16 ?a217) (Literal 9 ?a219) (Literal 32 ?a219) (Literal 64 ?a219) (Literal 2 ?a235) (Literal 9 ?a235) (Literal 0 ?a235) (icat : nitf_img_subheader.ICat) (isubcat : nitf_img_subheader.ISubCatN) (nbands : ?a235) (pvtype : nitf_img_subheader.PVType) (nbpp : ?a217) (abpp : ?a219) : Grammar {} =
  Choose fair
    { Choose fair
        { Choose fair
            { Choose fair
                { Choose fair
                    { Choose fair
                        { Choose fair
                            { Choose fair
                                { Choose fair
                                    { Choose fair
                                        { Choose fair
                                            { do Choose fair
                                                   { case icat is
                                                       { {| visible = _1061 |} -> pure {}
                                                       }
                                                   | case icat is
                                                       { {| optical = _1062 |} -> pure {}
                                                       }
                                                   }
                                                 Choose fair
                                                   { case isubcat is
                                                       { {| default = _1063 |} -> pure {}
                                                       }
                                                   | case isubcat is
                                                       { {| userdef = _1064 |} -> pure {}
                                                       }
                                                   }
                                                 ($$ : {}) <- Choose fair
                                                                { do nitf_lib._Guard (nbands == 1)
                                                                     case pvtype is
                                                                       { {| bilevel = _1066 |} -> pure {}
                                                                       }
                                                                     nitf_lib._Guard (nbpp == 1)
                                                                     ($$ : {}) <- nitf_lib.Guard (abpp == 1)
                                                                     pure $$
                                                                | do Choose fair
                                                                       { nitf_lib._Guard (nbands == 1)
                                                                       | nitf_lib._Guard (nbands == 3)
                                                                       }
                                                                     ($$ : {}) <- Choose fair
                                                                                    { do case pvtype is
                                                                                           { {| integer = _1069 |} -> pure {}
                                                                                           }
                                                                                         ($$ : {}) <- nitf_img_subheader.CatIntFull ?a217 ?a219 nbpp abpp
                                                                                         pure $$
                                                                                    | do case pvtype is
                                                                                           { {| real = _1071 |} -> pure {}
                                                                                           }
                                                                                         ($$ : {}) <- nitf_img_subheader.CatReals ?a217 ?a219 nbpp abpp
                                                                                         pure $$
                                                                                    }
                                                                     pure $$
                                                                }
                                                 pure $$
                                            | do Choose fair
                                                   { Choose fair
                                                       { Choose fair
                                                           { Choose fair
                                                               { Choose fair
                                                                   { Choose fair
                                                                       { Choose fair
                                                                           { Choose fair
                                                                               { Choose fair
                                                                                   { Choose fair
                                                                                       { Choose fair
                                                                                           { case icat is
                                                                                               { {| sideLooking = _1073 |} -> pure {}
                                                                                               }
                                                                                           | case icat is
                                                                                               { {| thermalInfrared = _1074 |} -> pure {}
                                                                                               }
                                                                                           }
                                                                                       | case icat is
                                                                                           { {| forwardLooking = _1075 |} -> pure {}
                                                                                           }
                                                                                       }
                                                                                   | case icat is
                                                                                       { {| radar = _1076 |} -> pure {}
                                                                                       }
                                                                                   }
                                                                               | case icat is
                                                                                   { {| electroOptical = _1077 |} -> pure {}
                                                                                   }
                                                                               }
                                                                           | case icat is
                                                                               { {| highResolution = _1078 |} -> pure {}
                                                                               }
                                                                           }
                                                                       | case icat is
                                                                           { {| blackWhitePhoto = _1079 |} -> pure {}
                                                                           }
                                                                       }
                                                                   | case icat is
                                                                       { {| fingerprints = _1080 |} -> pure {}
                                                                       }
                                                                   }
                                                               | case icat is
                                                                   { {| video = _1081 |} -> pure {}
                                                                   }
                                                               }
                                                           | case icat is
                                                               { {| catScans = _1082 |} -> pure {}
                                                               }
                                                           }
                                                       | case icat is
                                                           { {| mri = _1083 |} -> pure {}
                                                           }
                                                       }
                                                   | case icat is
                                                       { {| xray = _1084 |} -> pure {}
                                                       }
                                                   }
                                                 Choose fair
                                                   { case isubcat is
                                                       { {| default = _1085 |} -> pure {}
                                                       }
                                                   | case isubcat is
                                                       { {| userdef = _1086 |} -> pure {}
                                                       }
                                                   }
                                                 nitf_lib._Guard (nbands == 1)
                                                 ($$ : {}) <- Choose fair
                                                                { do case pvtype is
                                                                       { {| integer = _1088 |} -> pure {}
                                                                       }
                                                                     ($$ : {}) <- nitf_img_subheader.CatIntFull ?a217 ?a219 nbpp abpp
                                                                     pure $$
                                                                | do case pvtype is
                                                                       { {| real = _1090 |} -> pure {}
                                                                       }
                                                                     ($$ : {}) <- nitf_img_subheader.CatReals ?a217 ?a219 nbpp abpp
                                                                     pure $$
                                                                }
                                                 pure $$
                                            }
                                        | do case icat is
                                               { {| infrared = _1092 |} -> pure {}
                                               }
                                             nitf_lib._Guard (nbands == 1)
                                             ($$ : {}) <- Choose fair
                                                            { do case pvtype is
                                                                   { {| integer = _1094 |} -> pure {}
                                                                   }
                                                                 ($$ : {}) <- nitf_img_subheader.CatIntFull ?a217 ?a219 nbpp abpp
                                                                 pure $$
                                                            | do case pvtype is
                                                                   { {| real = _1096 |} -> pure {}
                                                                   }
                                                                 ($$ : {}) <- nitf_img_subheader.CatReals ?a217 ?a219 nbpp abpp
                                                                 pure $$
                                                            }
                                             pure $$
                                        }
                                    | do Choose fair
                                           { case icat is
                                               { {| colorPhoto = _1098 |} -> pure {}
                                               }
                                           | case icat is
                                               { {| colorPatch = _1099 |} -> pure {}
                                               }
                                           }
                                         Choose fair
                                           { case isubcat is
                                               { {| default = _1100 |} -> pure {}
                                               }
                                           | case isubcat is
                                               { {| userdef = _1101 |} -> pure {}
                                               }
                                           }
                                         nitf_lib._Guard (nbands == 3)
                                         case pvtype is
                                           { {| integer = _1102 |} -> pure {}
                                           }
                                         ($$ : {}) <- nitf_img_subheader.CatIntEnds ?a217 ?a219 nbpp abpp
                                         pure $$
                                    }
                                | do Choose fair
                                       { case icat is
                                           { {| rasterMap = _1104 |} -> pure {}
                                           }
                                       | case icat is
                                           { {| legends = _1105 |} -> pure {}
                                           }
                                       }
                                     Choose fair
                                       { case isubcat is
                                           { {| default = _1106 |} -> pure {}
                                           }
                                       | case isubcat is
                                           { {| userdef = _1107 |} -> pure {}
                                           }
                                       }
                                     Choose fair
                                       { nitf_lib._Guard (nbands == 1)
                                       | nitf_lib._Guard (nbands == 3)
                                       }
                                     case pvtype is
                                       { {| integer = _1108 |} -> pure {}
                                       }
                                     ($$ : {}) <- nitf_img_subheader.CatIntEnds ?a217 ?a219 nbpp abpp
                                     pure $$
                                }
                            | do case icat is
                                   { {| locationGrid = _1110 |} -> pure {}
                                   }
                                 Choose fair
                                   { Choose fair
                                       { Choose fair
                                           { case isubcat is
                                               { {| easting = _1111 |} -> pure {}
                                               }
                                           | case isubcat is
                                               { {| northing = _1112 |} -> pure {}
                                               }
                                           }
                                       | case isubcat is
                                           { {| longitude = _1113 |} -> pure {}
                                           }
                                       }
                                   | case isubcat is
                                       { {| latitude = _1114 |} -> pure {}
                                       }
                                   }
                                 nitf_lib._Guard (nbands == 2)
                                 ($$ : {}) <- Choose fair
                                                { do Choose fair
                                                       { case pvtype is
                                                           { {| integer = _1116 |} -> pure {}
                                                           }
                                                       | case pvtype is
                                                           { {| signed = _1117 |} -> pure {}
                                                           }
                                                       }
                                                     ($$ : {}) <- nitf_img_subheader.CatIntFull ?a217 ?a219 nbpp abpp
                                                     pure $$
                                                | do case pvtype is
                                                       { {| real = _1119 |} -> pure {}
                                                       }
                                                     ($$ : {}) <- nitf_img_subheader.CatReals ?a217 ?a219 nbpp abpp
                                                     pure $$
                                                }
                                 pure $$
                            }
                        | do case icat is
                               { {| otherMatrix = _1121 |} -> pure {}
                               }
                             case isubcat is
                               { {| userdef = _1122 |} -> pure {}
                               }
                             nitf_lib._Guard (1 <= nbands)
                             nitf_lib._Guard (nbands <= 9)
                             ($$ : {}) <- Choose fair
                                            { Choose fair
                                                { do case pvtype is
                                                       { {| complex = _1124 |} -> pure {}
                                                       }
                                                     ($$ : {}) <- nitf_img_subheader.CatComplex ?a217 ?a219 nbpp abpp
                                                     pure $$
                                                | do Choose fair
                                                       { case pvtype is
                                                           { {| integer = _1126 |} -> pure {}
                                                           }
                                                       | case pvtype is
                                                           { {| signed = _1127 |} -> pure {}
                                                           }
                                                       }
                                                     ($$ : {}) <- nitf_img_subheader.CatIntFull ?a217 ?a219 nbpp abpp
                                                     pure $$
                                                }
                                            | do case pvtype is
                                                   { {| real = _1129 |} -> pure {}
                                                   }
                                                 ($$ : {}) <- nitf_img_subheader.CatReals ?a217 ?a219 nbpp abpp
                                                 pure $$
                                            }
                             pure $$
                        }
                    | do Choose fair
                           { case icat is
                               { {| multiSpectral = _1131 |} -> pure {}
                               }
                           | case icat is
                               { {| hyperSpectral = _1132 |} -> pure {}
                               }
                           }
                         Choose fair
                           { case isubcat is
                               { {| waveLength = _1133 |} -> pure {}
                               }
                           | case isubcat is
                               { {| default = _1134 |} -> pure {}
                               }
                           }
                         Choose fair
                           { do nitf_lib._Guard (2 <= nbands)
                                nitf_lib._Guard (nbands <= 9)
                           | nitf_lib._Guard (nbands == 0)
                           }
                         ($$ : {}) <- Choose fair
                                        { do Choose fair
                                               { case pvtype is
                                                   { {| integer = _1137 |} -> pure {}
                                                   }
                                               | case pvtype is
                                                   { {| signed = _1138 |} -> pure {}
                                                   }
                                               }
                                             ($$ : {}) <- nitf_img_subheader.CatIntFull ?a217 ?a219 nbpp abpp
                                             pure $$
                                        | do case pvtype is
                                               { {| real = _1140 |} -> pure {}
                                               }
                                             ($$ : {}) <- nitf_img_subheader.CatReals ?a217 ?a219 nbpp abpp
                                             pure $$
                                        }
                         pure $$
                    }
                | do Choose fair
                       { case icat is
                           { {| synthApertureRadar = _1142 |} -> pure {}
                           }
                       | case icat is
                           { {| sarRadioHologram = _1143 |} -> pure {}
                           }
                       }
                     Choose fair
                       { Choose fair
                           { Choose fair
                               { Choose fair
                                   { case isubcat is
                                       { {| inphase = _1144 |} -> pure {}
                                       }
                                   | case isubcat is
                                       { {| quadrature = _1145 |} -> pure {}
                                       }
                                   }
                               | case isubcat is
                                   { {| magnitude = _1146 |} -> pure {}
                                   }
                               }
                           | case isubcat is
                               { {| phase = _1147 |} -> pure {}
                               }
                           }
                       | case isubcat is
                           { {| default = _1148 |} -> pure {}
                           }
                       }
                     ($$ : {}) <- Choose fair
                                    { do nitf_lib._Guard (nbands == 1)
                                         case pvtype is
                                           { {| complex = _1150 |} -> pure {}
                                           }
                                         ($$ : {}) <- nitf_img_subheader.CatComplex ?a217 ?a219 nbpp abpp
                                         pure $$
                                    | do Choose fair
                                           { nitf_lib._Guard (nbands == 1)
                                           | nitf_lib._Guard (nbands == 2)
                                           }
                                         ($$ : {}) <- Choose fair
                                                        { do Choose fair
                                                               { case pvtype is
                                                                   { {| integer = _1153 |} -> pure {}
                                                                   }
                                                               | case pvtype is
                                                                   { {| signed = _1154 |} -> pure {}
                                                                   }
                                                               }
                                                             ($$ : {}) <- nitf_img_subheader.CatIntFull ?a217 ?a219 nbpp abpp
                                                             pure $$
                                                        | do case pvtype is
                                                               { {| real = _1156 |} -> pure {}
                                                               }
                                                             ($$ : {}) <- nitf_img_subheader.CatReals ?a217 ?a219 nbpp abpp
                                                             pure $$
                                                        }
                                         pure $$
                                    }
                     pure $$
                }
            | do Choose fair
                   { case icat is
                       { {| airWind = _1158 |} -> pure {}
                       }
                   | case icat is
                       { {| waterCurrent = _1159 |} -> pure {}
                       }
                   }
                 Choose fair
                   { case isubcat is
                       { {| speed = _1160 |} -> pure {}
                       }
                   | case isubcat is
                       { {| direct = _1161 |} -> pure {}
                       }
                   }
                 nitf_lib._Guard (nbands == 2)
                 case pvtype is
                   { {| integer = _1162 |} -> pure {}
                   }
                 nitf_lib._Guard (nbpp == 8)
                 nitf_lib._Guard (2 <= abpp)
                 ($$ : {}) <- nitf_lib.Guard (abpp <= 8)
                 pure $$
            }
        | do Choose fair
               { case icat is
                   { {| barometric = _1164 |} -> pure {}
                   }
               | case icat is
                   { {| waterDepth = _1165 |} -> pure {}
                   }
               }
             nitf_lib._Guard (nbands == 1)
             case pvtype is
               { {| integer = _1166 |} -> pure {}
               }
             ($$ : {}) <- Choose fair
                            { nitf_img_subheader.CatIntLow ?a219 ?a217 nbpp abpp
                            | nitf_img_subheader.CatIntMid ?a219 ?a217 nbpp abpp
                            }
             pure $$
        }
    | do case icat is
           { {| elevationModel = _1168 |} -> pure {}
           }
         nitf_lib._Guard (nbands == 1)
         ($$ : {}) <- Choose fair
                        { do Choose fair
                               { case pvtype is
                                   { {| integer = _1170 |} -> pure {}
                                   }
                               | case pvtype is
                                   { {| signed = _1171 |} -> pure {}
                                   }
                               }
                             ($$ : {}) <- nitf_img_subheader.CatIntFull ?a217 ?a219 nbpp abpp
                             pure $$
                        | do case pvtype is
                               { {| real = _1173 |} -> pure {}
                               }
                             ($$ : {}) <- nitf_img_subheader.CatReals ?a217 ?a219 nbpp abpp
                             pure $$
                        }
         pure $$
    }
 
nitf_img_subheader._Im : Grammar {} =
  @MatchBytes "IM"
 
nitf_img_subheader._Latitude : Grammar {} =
  do nitf_lib._PadWSpaces [uint 8] 6 (@Many[ .. 6 ] nitf_lib._Numeral)
     Choose fair
       { {- north -} @Match {'N'}
       | {- south -} @Match {'S'}
       }
 
nitf_img_subheader._Longitude : Grammar {} =
  do nitf_lib._PadWSpaces [uint 8] 7 (@Many[ .. 7 ] nitf_lib._Numeral)
     Choose fair
       { {- east -} @Match {'E'}
       | {- west -} @Match {'W'}
       }
 
nitf_img_subheader._LatLong : Grammar {} =
  do nitf_img_subheader._Latitude
     nitf_img_subheader._Longitude
 
nitf_img_subheader._PlainUtm : Grammar {} =
  do @Many[2] nitf_lib._Numeral
     @Many[6] nitf_lib._Numeral
     @Many[7] nitf_lib._Numeral
 
nitf_img_subheader._OmitIO (lb : uint 8) (ub : uint 8) : Grammar {} =
  @Match (((lb .. 'H') | ('J' .. 'N')) | ('P' .. ub))
 
nitf_img_subheader._MGRS : Grammar {} =
  do @Many[2] nitf_lib._Digit
     nitf_img_subheader._OmitIO 'C' 'X'
     do nitf_img_subheader._OmitIO 'A' 'Z'
        nitf_img_subheader._OmitIO 'A' 'V'
     @Many[5] nitf_lib._Numeral
     @Many[5] nitf_lib._Numeral
 
nitf_img_subheader._IGeoLo : Grammar {} =
  Choose fair
    { {- decimal_degs -} do (lat0 : nitf_img_subheader.LatDeg) <- nitf_img_subheader.LatDeg
                            (long0 : nitf_img_subheader.LongDeg) <- nitf_img_subheader.LongDeg
                            (lat1 : nitf_img_subheader.LatDeg) <- nitf_img_subheader.LatDeg
                            (long1 : nitf_img_subheader.LongDeg) <- nitf_img_subheader.LongDeg
                            (lat2 : nitf_img_subheader.LatDeg) <- nitf_img_subheader.LatDeg
                            (long2 : nitf_img_subheader.LongDeg) <- nitf_img_subheader.LongDeg
                            (lat3 : nitf_img_subheader.LatDeg) <- nitf_img_subheader.LatDeg
                            (long3 : nitf_img_subheader.LongDeg) <- nitf_img_subheader.LongDeg
                            nitf_img_subheader._EqLat nitf_img_subheader.LatDeg nitf_img_subheader.LatDeg (uint 8) int int lat0 lat1
                            nitf_img_subheader._EqLat nitf_img_subheader.LatDeg nitf_img_subheader.LatDeg (uint 8) int int lat2 lat3
                            nitf_img_subheader._OrdLong nitf_img_subheader.LongDeg nitf_img_subheader.LongDeg int int long0 long1
                            nitf_img_subheader._OrdLong nitf_img_subheader.LongDeg nitf_img_subheader.LongDeg int int long3 long2
    | {- lat_long -} @Many[4] nitf_img_subheader._LatLong
    | {- mgrs -} @Many[4] nitf_img_subheader._MGRS
    | {- plain_utm -} @Many[4] nitf_img_subheader._PlainUtm
    }
 
nitf_img_subheader._ComRat (ic : nitf_img_subheader.IC) : Grammar {} =
  Choose fair
    { {- dim_coding -} do Choose fair
                            { case ic is
                                { {| c1 = _892 |} -> pure {}
                                }
                            | case ic is
                                { {| m1 = _893 |} -> pure {}
                                }
                            }
                          Choose fair
                            { {- oned -} nitf_lib._PadWSpaces [uint 8] 4 (@MatchBytes "1D")
                            | {- twods -} nitf_lib._PadWSpaces [uint 8] 4 (@MatchBytes "2DS")
                            | {- twodh -} nitf_lib._PadWSpaces [uint 8] 4 (@MatchBytes "2DH")
                            }
    | {- quant_tables -} do Choose fair
                              { Choose fair
                                  { Choose fair
                                      { Choose fair
                                          { case ic is
                                              { {| c3 = _899 |} -> pure {}
                                              }
                                          | case ic is
                                              { {| c5 = _900 |} -> pure {}
                                              }
                                          }
                                      | case ic is
                                          { {| i1 = _901 |} -> pure {}
                                          }
                                      }
                                  | case ic is
                                      { {| m3 = _902 |} -> pure {}
                                      }
                                  }
                              | case ic is
                                  { {| m5 = _903 |} -> pure {}
                                  }
                              }
                            @Match {'0'}
                            nitf_lib._BoundedDigit 0 4
                            @Match {'.'}
                            (quality_level : uint 64) <- nitf_lib.BoundedDigit 0 5
                            Choose fair
                              { do Choose fair
                                     { case ic is
                                         { {| c5 = _904 |} -> pure {}
                                         }
                                     | case ic is
                                         { {| m5 = _905 |} -> pure {}
                                         }
                                     }
                                   nitf_lib._Guard (quality_level == 0)
                              | Choose fair
                                  { Choose fair
                                      { case ic is
                                          { {| c3 = _908 |} -> pure {}
                                          }
                                      | case ic is
                                          { {| i1 = _909 |} -> pure {}
                                          }
                                      }
                                  | case ic is
                                      { {| m3 = _910 |} -> pure {}
                                      }
                                  }
                              }
    | {- bits_per_pixel -} do Choose fair
                                { case ic is
                                    { {| c4 = _912 |} -> pure {}
                                    }
                                | case ic is
                                    { {| m4 = _913 |} -> pure {}
                                    }
                                }
                              nitf_lib._Digit
                              @Match {'.'}
                              nitf_lib._Digit
                              nitf_lib._Digit
    | {- nominal -} do Choose fair
                         { case ic is
                             { {| c8 = _915 |} -> pure {}
                             }
                         | case ic is
                             { {| m8 = _916 |} -> pure {}
                             }
                         }
                       @Many[4] nitf_lib._Byte
    }
 
nitf_img_subheader._IFCN : Grammar {} =
  @Match {'N'}
 
nitf_img_subheader._ImFltN : Grammar {} =
  nitf_lib._Spaces 3
 
nitf_img_subheader._NELutN : Grammar {} =
  nitf_lib._BoundedPos 5 65536
 
nitf_img_subheader._LutdNM (n : uint 64) : Grammar {} =
  @Many[n] nitf_lib._Byte
 
nitf_img_subheader._ISync : Grammar {} =
  @Match {'0'}
 
nitf_img_subheader._UDOfl : Grammar {} =
  nitf_lib._UnsignedNum 3
 
nitf_img_subheader._UDID (n : uint 64) : Grammar {} =
  @Many[n - 3] nitf_lib._Byte
 
nitf_img_subheader._IXSOfl : Grammar {} =
  nitf_lib._UnsignedNum 3
 
nitf_img_subheader._IXShD (n : uint 64) : Grammar {} =
  @Many[n - 3] nitf_lib._Byte
 
nitf_img_subheader._DispParams ?a123 ?a126 (Literal 1 ?a123) (Literal 9 ?a123) (Literal 0 ?a123) (Literal 0 ?a126) (Literal 2 ?a126) (Literal 3 ?a123) (Literal 3 ?a126) (Literal 2 ?a123) (irep : nitf_img_subheader.IRep) (irepband : nitf_img_subheader.IRepBandN) (nbands : ?a123) (pvtype : nitf_img_subheader.PVType) (nluts : ?a126) : Grammar {} =
  Choose fair
    { Choose fair
        { Choose fair
            { Choose fair
                { Choose fair
                    { Choose fair
                        { Choose fair
                            { Choose fair
                                { do case irep is
                                       { {| nodisplay = _989 |} -> pure {}
                                       }
                                     case irepband is
                                       { {| default = _990 |} -> pure {}
                                       }
                                     Choose fair
                                       { do nitf_lib._Guard (1 <= nbands)
                                            nitf_lib._Guard (nbands <= 9)
                                       | nitf_lib._Guard (nbands == 0)
                                       }
                                     Choose fair
                                       { Choose fair
                                           { Choose fair
                                               { Choose fair
                                                   { case pvtype is
                                                       { {| integer = _992 |} -> pure {}
                                                       }
                                                   | case pvtype is
                                                       { {| real = _993 |} -> pure {}
                                                       }
                                                   }
                                               | case pvtype is
                                                   { {| complex = _994 |} -> pure {}
                                                   }
                                               }
                                           | case pvtype is
                                               { {| bilevel = _995 |} -> pure {}
                                               }
                                           }
                                       | case pvtype is
                                           { {| signed = _996 |} -> pure {}
                                           }
                                       }
                                     nitf_lib._Guard (nluts == 0)
                                | do case irep is
                                       { {| monochrome = _998 |} -> pure {}
                                       }
                                     Choose fair
                                       { Choose fair
                                           { case irepband is
                                               { {| lutBand = _999 |} -> pure {}
                                               }
                                           | case irepband is
                                               { {| monoBand = _1000 |} -> pure {}
                                               }
                                           }
                                       | case irepband is
                                           { {| default = _1001 |} -> pure {}
                                           }
                                       }
                                     nitf_lib._Guard (nbands == 1)
                                     Choose fair
                                       { Choose fair
                                           { case pvtype is
                                               { {| integer = _1002 |} -> pure {}
                                               }
                                           | case pvtype is
                                               { {| real = _1003 |} -> pure {}
                                               }
                                           }
                                       | case pvtype is
                                           { {| bilevel = _1004 |} -> pure {}
                                           }
                                       }
                                     nitf_lib._Guard (0 <= nluts)
                                     nitf_lib._Guard (nluts <= 2)
                                }
                            | do case irep is
                                   { {| rgb = _1006 |} -> pure {}
                                   }
                                 Choose fair
                                   { Choose fair
                                       { case irepband is
                                           { {| red = _1007 |} -> pure {}
                                           }
                                       | case irepband is
                                           { {| green = _1008 |} -> pure {}
                                           }
                                       }
                                   | case irepband is
                                       { {| blue = _1009 |} -> pure {}
                                       }
                                   }
                                 nitf_lib._Guard (nbands == 3)
                                 Choose fair
                                   { case pvtype is
                                       { {| integer = _1010 |} -> pure {}
                                       }
                                   | case pvtype is
                                       { {| real = _1011 |} -> pure {}
                                       }
                                   }
                                 nitf_lib._Guard (nluts == 0)
                            }
                        | do case irep is
                               { {| rgblut = _1013 |} -> pure {}
                               }
                             case irepband is
                               { {| lutBand = _1014 |} -> pure {}
                               }
                             nitf_lib._Guard (nbands == 1)
                             Choose fair
                               { case pvtype is
                                   { {| integer = _1015 |} -> pure {}
                                   }
                               | case pvtype is
                                   { {| real = _1016 |} -> pure {}
                                   }
                               }
                             nitf_lib._Guard (nluts == 3)
                        }
                    | do case irep is
                           { {| itur = _1018 |} -> pure {}
                           }
                         Choose fair
                           { Choose fair
                               { case irepband is
                                   { {| luminance = _1019 |} -> pure {}
                                   }
                               | case irepband is
                                   { {| chrominanceBlue = _1020 |} -> pure {}
                                   }
                               }
                           | case irepband is
                               { {| chrominanceRed = _1021 |} -> pure {}
                               }
                           }
                         nitf_lib._Guard (nbands == 3)
                         case pvtype is
                           { {| integer = _1022 |} -> pure {}
                           }
                         nitf_lib._Guard (nluts == 0)
                    }
                | do case irep is
                       { {| cartesian = _1024 |} -> pure {}
                       }
                     case irepband is
                       { {| default = _1025 |} -> pure {}
                       }
                     Choose fair
                       { do nitf_lib._Guard (1 <= nbands)
                            nitf_lib._Guard (nbands <= 9)
                       | nitf_lib._Guard (nbands == 0)
                       }
                     Choose fair
                       { Choose fair
                           { case pvtype is
                               { {| integer = _1027 |} -> pure {}
                               }
                           | case pvtype is
                               { {| real = _1028 |} -> pure {}
                               }
                           }
                       | case pvtype is
                           { {| complex = _1029 |} -> pure {}
                           }
                       }
                     nitf_lib._Guard (nluts == 0)
                }
            | do case irep is
                   { {| polar = _1031 |} -> pure {}
                   }
                 Choose fair
                   { case irepband is
                       { {| default = _1032 |} -> pure {}
                       }
                   | case irepband is
                       { {| monoBand = _1033 |} -> pure {}
                       }
                   }
                 nitf_lib._Guard (nbands == 2)
                 Choose fair
                   { Choose fair
                       { case pvtype is
                           { {| integer = _1034 |} -> pure {}
                           }
                       | case pvtype is
                           { {| real = _1035 |} -> pure {}
                           }
                       }
                   | case pvtype is
                       { {| complex = _1036 |} -> pure {}
                       }
                   }
                 nitf_lib._Guard (nluts == 0)
            }
        | do case irep is
               { {| sar = _1038 |} -> pure {}
               }
             case irepband is
               { {| default = _1039 |} -> pure {}
               }
             nitf_lib._Guard (nbands == 2)
             Choose fair
               { Choose fair
                   { case pvtype is
                       { {| integer = _1040 |} -> pure {}
                       }
                   | case pvtype is
                       { {| real = _1041 |} -> pure {}
                       }
                   }
               | case pvtype is
                   { {| complex = _1042 |} -> pure {}
                   }
               }
             nitf_lib._Guard (nluts == 0)
        }
    | do case irep is
           { {| multi = _1044 |} -> pure {}
           }
         Choose fair
           { Choose fair
               { Choose fair
                   { Choose fair
                       { Choose fair
                           { case irepband is
                               { {| default = _1045 |} -> pure {}
                               }
                           | case irepband is
                               { {| monoBand = _1046 |} -> pure {}
                               }
                           }
                       | case irepband is
                           { {| red = _1047 |} -> pure {}
                           }
                       }
                   | case irepband is
                       { {| green = _1048 |} -> pure {}
                       }
                   }
               | case irepband is
                   { {| blue = _1049 |} -> pure {}
                   }
               }
           | case irepband is
               { {| lutBand = _1050 |} -> pure {}
               }
           }
         Choose fair
           { do nitf_lib._Guard (2 <= nbands)
                nitf_lib._Guard (nbands <= 9)
           | nitf_lib._Guard (nbands == 0)
           }
         nitf_lib._Guard (0 <= nluts)
         nitf_lib._Guard (nluts <= 3)
    }
 
nitf_img_subheader.ISHeader : Grammar nitf_img_subheader.ISHeader =
  do nitf_img_subheader._Im
     (iid1 : [uint 8]) <- nitf_img_subheader.IID1
     (idatim : nitf_lib.PartialDateTime) <- nitf_img_subheader.IDaTim
     (tgt_id : nitf_img_subheader.TgtId) <- nitf_img_subheader.TgtId
     (iid2 : [uint 8]) <- nitf_img_subheader.IID2
     (common : nitf_lib.CommonSubheader) <- nitf_lib.CommonSubheader
     nitf_lib._Encryp
     (i_sorce : nitf_lib.OrBytes [uint 8]) <- nitf_img_subheader.ISorce
     (n_rows : uint 64) <- nitf_img_subheader.NRows
     (n_cols : uint 64) <- nitf_img_subheader.NCols
     (pvtype : nitf_img_subheader.PVType) <- nitf_img_subheader.PVType
     (irep : nitf_img_subheader.IRep) <- nitf_img_subheader.IRep
     (icat : nitf_img_subheader.ICat) <- nitf_img_subheader.ICat
     (abpp : uint 64) <- nitf_img_subheader.ABPP
     (p_just : nitf_img_subheader.PJust) <- nitf_img_subheader.PJust
     (icords : nitf_lib.DefaultByte nitf_img_subheader.ICords0) <- nitf_img_subheader.ICords
     Choose fair
       { {- igeolo -} do case icords is
                           { {| actual = _1175 |} -> pure {}
                           }
                         nitf_img_subheader._IGeoLo
       | {- empty -} case icords is
                       { {| default = _1178 |} -> pure {}
                       }
       }
     (nicom : uint 64) <- nitf_img_subheader.NICom
     (i_com_n : [[uint 8]]) <- nitf_img_subheader.IComn nicom
     (ic : nitf_img_subheader.IC) <- nitf_img_subheader.IC
     Choose fair
       { {- comrat -} do Choose fair
                           { Choose fair
                               { Choose fair
                                   { Choose fair
                                       { Choose fair
                                           { Choose fair
                                               { Choose fair
                                                   { Choose fair
                                                       { Choose fair
                                                           { Choose fair
                                                               { Choose fair
                                                                   { case ic is
                                                                       { {| c1 = _1180 |} -> pure {}
                                                                       }
                                                                   | case ic is
                                                                       { {| c3 = _1181 |} -> pure {}
                                                                       }
                                                                   }
                                                               | case ic is
                                                                   { {| c4 = _1182 |} -> pure {}
                                                                   }
                                                               }
                                                           | case ic is
                                                               { {| c5 = _1183 |} -> pure {}
                                                               }
                                                           }
                                                       | case ic is
                                                           { {| c6 = _1184 |} -> pure {}
                                                           }
                                                       }
                                                   | case ic is
                                                       { {| c8 = _1185 |} -> pure {}
                                                       }
                                                   }
                                               | case ic is
                                                   { {| m1 = _1186 |} -> pure {}
                                                   }
                                               }
                                           | case ic is
                                               { {| m3 = _1187 |} -> pure {}
                                               }
                                           }
                                       | case ic is
                                           { {| m4 = _1188 |} -> pure {}
                                           }
                                       }
                                   | case ic is
                                       { {| m5 = _1189 |} -> pure {}
                                       }
                                   }
                               | case ic is
                                   { {| m8 = _1190 |} -> pure {}
                                   }
                               }
                           | case ic is
                               { {| i1 = _1191 |} -> pure {}
                               }
                           }
                         nitf_img_subheader._ComRat ic
       | {- empty -} Choose fair
                       { case ic is
                           { {| nc = _1194 |} -> pure {}
                           }
                       | case ic is
                           { {| nm = _1195 |} -> pure {}
                           }
                       }
       }
     (nbands : uint 64) <- nitf_img_subheader.NBands irep
     (xbands : nitf_img_subheader.ISHeader2) <- Choose fair
                                                  { {- def_xband -} do (_1198 : uint 64) <- do nitf_lib._Guard (nbands == 0)
                                                                                               ($$ : uint 64) <- nitf_img_subheader.XBands (uint 64) nbands
                                                                                               pure $$
                                                                       pure {def_xband: _1198}
                                                  | {- no_xband -} do (_1199 : {}) <- nitf_lib.Guard (nbands != 0)
                                                                      pure {no_xband: _1199}
                                                  }
     (num_bands : uint 64) <- Choose fair
                                { do nitf_lib._Guard (nbands != 0)
                                     ($$ : uint 64) <- pure nbands
                                     pure $$
                                | do nitf_lib._Guard (nbands == 0)
                                     (bnds : uint 64) <- case xbands is
                                                           { {| def_xband = _1201 |} -> pure _1201
                                                           }
                                     ($$ : uint 64) <- pure bnds
                                     pure $$
                                }
     (bandinfo : [nitf_img_subheader.ISHeader5]) <- Many[num_bands] do (irepbandn : nitf_img_subheader.IRepBandN) <- nitf_img_subheader.IRepBandN
                                                                       (isubcatn : nitf_img_subheader.ISubCatN) <- nitf_img_subheader.ISubCatN
                                                                       nitf_img_subheader._IFCN
                                                                       nitf_img_subheader._ImFltN
                                                                       (nlutsn : uint 64) <- nitf_lib.UpperBoundedDigit 4
                                                                       nitf_img_subheader._DispParams (uint 64) (uint 64) irep irepbandn nbands pvtype nlutsn
                                                                       Choose fair
                                                                         { {- luts -} do nitf_lib._Guard (0 < nlutsn)
                                                                                         nitf_img_subheader._NELutN
                                                                                         nitf_img_subheader._LutdNM nlutsn
                                                                         | {- no_luts -} nitf_lib._Guard (nlutsn == 0)
                                                                         }
                                                                       pure {irepbandn = irepbandn,
                                                                             isubcatn = isubcatn,
                                                                             nlutsn = nlutsn}
     nitf_img_subheader._ISync
     (imode : nitf_img_subheader.IMode) <- nitf_img_subheader.IMode (uint 64) nbands
     (nbpr : uint 64) <- nitf_img_subheader.NBPR
     (nbpc : uint 64) <- nitf_img_subheader.NBPC
     Choose fair
       { Choose fair
           { nitf_lib._Guard (nbpr != 1)
           | nitf_lib._Guard (nbpc != 1)
           }
       | Choose fair
           { Choose fair
               { case imode is
                   { {| blockMode = _1205 |} -> pure {}
                   }
               | case imode is
                   { {| pixel = _1206 |} -> pure {}
                   }
               }
           | case imode is
               { {| row = _1207 |} -> pure {}
               }
           }
       }
     (nppbh : uint 64) <- nitf_img_subheader.NPPBH
     nitf_lib._Guard (n_cols <= (nbpr * nppbh))
     (nppbv : uint 64) <- nitf_img_subheader.NPPBV
     nitf_lib._Guard (n_rows <= (nbpc * nppbv))
     (nbpp : uint 64) <- nitf_img_subheader.NBPP abpp ic
     map ((bi : nitf_img_subheader.ISHeader5) in bandinfo)
       (nitf_img_subheader.CatParams (uint 64) (uint 64) (uint 64) icat (bi.isubcatn) nbands pvtype nbpp abpp)
     (idlvl : uint 64) <- nitf_img_subheader.IDLvl
     (ialvl : uint 64) <- nitf_img_subheader.IALvl
     (iloc : nitf_lib.Location) <- nitf_lib.Location
     (imag : nitf_img_subheader.IMag) <- nitf_img_subheader.IMag
     (udidl : uint 64) <- nitf_img_subheader.UDIDL
     Choose fair
       { {- uds -} do nitf_lib._Guard (0 < udidl)
                      nitf_img_subheader._UDOfl
                      nitf_img_subheader._UDID udidl
       | {- empty -} nitf_lib._Guard (udidl == 0)
       }
     (ixshdl : uint 64) <- nitf_img_subheader.IXShDL
     Choose fair
       { {- ixs -} do nitf_lib._Guard (0 < ixshdl)
                      nitf_img_subheader._IXSOfl
                      nitf_img_subheader._IXShD ixshdl
       | {- empty -} nitf_lib._Guard (ixshdl == 0)
       }
     pure {iid1 = iid1,
           idatim = idatim,
           tgt_id = tgt_id,
           iid2 = iid2,
           common = common,
           i_sorce = i_sorce,
           n_rows = n_rows,
           n_cols = n_cols,
           pvtype = pvtype,
           irep = irep,
           icat = icat,
           abpp = abpp,
           p_just = p_just,
           icords = icords,
           nicom = nicom,
           i_com_n = i_com_n,
           ic = ic,
           nbands = nbands,
           xbands = xbands,
           bandinfo = bandinfo,
           imode = imode,
           nbpr = nbpr,
           nbpc = nbpc,
           nppbh = nppbh,
           nppbv = nppbv,
           nbpp = nbpp,
           idlvl = idlvl,
           ialvl = ialvl,
           iloc = iloc,
           imag = imag,
           udidl = udidl,
           ixshdl = ixshdl}
 
nitf_img_subheader._Maybe ?a4 (guard : [uint 8]) (_P : Grammar {}) : Grammar {} =
  Choose biased
    { do @MatchBytes guard
         _P
    | pure {}
    }
 
nitf_img_subheader._DateDefaultSpaces : Grammar {} =
  nitf_lib._DefaultSpaces nitf_lib.PartialDate 8 nitf_lib._PartialDate
 
nitf_img_subheader._IID1 : Grammar {} =
  @Many[10] Choose fair
              { nitf_lib._AlphaNum
              | @Match ({'_'} | {' '})
              }
 
nitf_img_subheader._IDaTim : Grammar {} =
  nitf_lib._PartialDateTime
 
nitf_img_subheader._BE : Grammar {} =
  @Many[10] nitf_lib._AlphaNum
 
nitf_img_subheader._OSuffix : Grammar {} =
  @Many[5] nitf_lib._AlphaNum
 
nitf_img_subheader._TgtId : Grammar {} =
  do nitf_lib._DefaultSpaces [uint 8] 10 nitf_img_subheader._BE
     nitf_lib._DefaultSpaces [uint 8] 5 nitf_img_subheader._OSuffix
     nitf_lib._DefaultSpaces [uint 8] 2 nitf_lib._CountryCode
 
nitf_img_subheader._IID2 : Grammar {} =
  @Many[80] nitf_lib._Byte
 
nitf_img_subheader._ISorce : Grammar {} =
  nitf_lib._DefaultSpaces [uint 8] 42 (@Many[42] nitf_lib._Byte)
 
nitf_img_subheader._NRows : Grammar {} =
  nitf_lib._PosNumber 8
 
nitf_img_subheader._NCols : Grammar {} =
  nitf_lib._PosNumber 8
 
nitf_img_subheader._PVType : Grammar {} =
  Choose fair
    { {- integer -} nitf_lib._PadWSpaces [uint 8] 3 (@MatchBytes "INT")
    | {- bilevel -} nitf_lib._PadWSpaces [uint 8] 3 (@MatchBytes "B")
    | {- signed -} nitf_lib._PadWSpaces [uint 8] 3 (@MatchBytes "SI")
    | {- real -} nitf_lib._PadWSpaces [uint 8] 3 (@MatchBytes "R")
    | {- complex -} nitf_lib._PadWSpaces [uint 8] 3 (@MatchBytes "C")
    }
 
nitf_img_subheader._IRep : Grammar {} =
  Choose fair
    { {- monochrome -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "MONO")
    | {- rgb -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "RGB")
    | {- rgblut -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "RGB/LUT")
    | {- multi -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "MULTI")
    | {- nodisplay -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "NODISPLY")
    | {- cartesian -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "NVECTOR")
    | {- polar -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "POLAR")
    | {- sar -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "VPH")
    | {- itur -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "YCbCr601")
    }
 
nitf_img_subheader._ICat : Grammar {} =
  Choose fair
    { {- visible -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "VIS")
    | {- sideLooking -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "SL")
    | {- thermalInfrared -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "TI")
    | {- forwardLooking -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "FL")
    | {- radar -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "RD")
    | {- electroOptical -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "EO")
    | {- optical -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "OP")
    | {- highResolution -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "HR")
    | {- hyperSpectral -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "HS")
    | {- colorPhoto -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "CP")
    | {- blackWhitePhoto -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "BP")
    | {- synthApertureRadar -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "SAR")
    | {- sarRadioHologram -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "SARIQ")
    | {- infrared -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "IR")
    | {- multiSpectral -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "MS")
    | {- fingerprints -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "FP")
    | {- mri -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "MRI")
    | {- xray -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "XRAY")
    | {- catScans -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "CAT")
    | {- video -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "VD")
    | {- barometric -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "BARO")
    | {- waterCurrent -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "CURRENT")
    | {- waterDepth -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "DEPTH")
    | {- airWind -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "WIND")
    | {- rasterMap -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "MAP")
    | {- colorPatch -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "PAT")
    | {- legends -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "LEG")
    | {- elevationModel -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "DTEM")
    | {- otherMatrix -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "MATR")
    | {- locationGrid -} nitf_lib._PadWSpaces [uint 8] 8 (@MatchBytes "LOCG")
    }
 
nitf_img_subheader._ABPP : Grammar {} =
  nitf_lib._BoundedNum 2 1 96
 
nitf_img_subheader._PJust : Grammar {} =
  Choose fair
    { {- leftJust -} @Match {'L'}
    | {- rightJust -} @Match {'R'}
    }
 
nitf_img_subheader._ICords : Grammar {} =
  nitf_lib._DefaultSpace nitf_img_subheader.ICords0 Choose fair
                                                      { {- utm -} @Match {'U'}
                                                      | {- northernhemi -} @Match {'N'}
                                                      | {- southernhemi -} @Match {'S'}
                                                      | {- geographic -} @Match {'G'}
                                                      | {- decimal -} @Match {'D'}
                                                      }
 
nitf_img_subheader._LatDeg : Grammar {} =
  do nitf_lib._Sign
     (whole_digs : [int]) <- Many[2] nitf_lib.Digit
     (whole : int) <- pure (nitf_lib.numBase 10 whole_digs)
     @Match {'.'}
     (frac_digs : [int]) <- Many[3] nitf_lib.Digit
     (frac : int) <- pure (nitf_lib.numBase 10 frac_digs)
     Choose fair
       { nitf_lib._Guard (whole < 90)
       | do nitf_lib._Guard (whole == 90)
            nitf_lib._Guard (frac == 0)
       }
 
nitf_img_subheader._LongDeg : Grammar {} =
  do nitf_lib._Sign
     (whole_digs : [int]) <- Many[3] nitf_lib.Digit
     (whole : int) <- pure (nitf_lib.numBase 10 whole_digs)
     @Match {'.'}
     (frac_digs : [int]) <- Many[3] nitf_lib.Digit
     (frac : int) <- pure (nitf_lib.numBase 10 frac_digs)
     Choose fair
       { nitf_lib._Guard (whole < 180)
       | do nitf_lib._Guard (whole == 180)
            nitf_lib._Guard (frac == 0)
       }
 
nitf_img_subheader._UtmZone : Grammar {} =
  nitf_lib._BoundedNum 2 1 60
 
nitf_img_subheader._FiveDigitNum : Grammar {} =
  @Many[5] nitf_lib._Digit
 
nitf_img_subheader._NICom : Grammar {} =
  nitf_lib._DigitUInt
 
nitf_img_subheader._IComn (n : uint 64) : Grammar {} =
  @Many[n] @Many[80] nitf_lib._Byte
 
nitf_img_subheader._IC : Grammar {} =
  Choose fair
    { {- c1 -} @MatchBytes "C1"
    | {- c3 -} @MatchBytes "C3"
    | {- c4 -} @MatchBytes "C4"
    | {- c5 -} @MatchBytes "C5"
    | {- c6 -} @MatchBytes "C6"
    | {- c7 -} @MatchBytes "C7"
    | {- c8 -} @MatchBytes "C8"
    | {- i1 -} @MatchBytes "I1"
    | {- m1 -} @MatchBytes "M1"
    | {- m3 -} @MatchBytes "M3"
    | {- m4 -} @MatchBytes "M4"
    | {- m5 -} @MatchBytes "M5"
    | {- m6 -} @MatchBytes "M6"
    | {- m7 -} @MatchBytes "M7"
    | {- m8 -} @MatchBytes "M8"
    | {- nc -} @MatchBytes "NC"
    | {- nm -} @MatchBytes "NM"
    }
 
nitf_img_subheader._NBands (irep : nitf_img_subheader.IRep) : Grammar {} =
  Choose fair
    { Choose fair
        { Choose fair
            { Choose fair
                { Choose fair
                    { Choose fair
                        { Choose fair
                            { Choose fair
                                { Choose fair
                                    { do case irep is
                                           { {| nodisplay = _919 |} -> pure {}
                                           }
                                         nitf_lib._DigitUInt
                                    | do case irep is
                                           { {| monochrome = _921 |} -> pure {}
                                           }
                                         nitf_lib._IsNum 1 1
                                    }
                                | do case irep is
                                       { {| rgb = _923 |} -> pure {}
                                       }
                                     nitf_lib._IsNum 1 3
                                }
                            | do case irep is
                                   { {| rgblut = _925 |} -> pure {}
                                   }
                                 nitf_lib._IsNum 1 1
                            }
                        | do case irep is
                               { {| itur = _927 |} -> pure {}
                               }
                             nitf_lib._IsNum 3 3
                        }
                    | do case irep is
                           { {| cartesian = _929 |} -> pure {}
                           }
                         nitf_lib._DigitUInt
                    }
                | do case irep is
                       { {| polar = _931 |} -> pure {}
                       }
                     nitf_lib._IsNum 1 2
                }
            | do case irep is
                   { {| sar = _933 |} -> pure {}
                   }
                 nitf_lib._IsNum 1 1
            }
        | do case irep is
               { {| multi = _935 |} -> pure {}
               }
             Choose fair
               { nitf_lib._IsNum 1 0
               | nitf_lib._BoundedNum 1 2 9
               }
        }
    | nitf_lib._IsNum 1 0
    }
 
nitf_img_subheader._XBands ?a0 : Grammar {} =
  nitf_lib._BoundedNum 5 10 99999
 
nitf_img_subheader._IRepBandN : Grammar {} =
  Choose fair
    { {- bandM -} nitf_lib._PadWSpaces [uint 8] 2 (@MatchBytes "M")
    | {- lutBand -} nitf_lib._PadWSpaces [uint 8] 2 (@MatchBytes "LU")
    | {- red -} nitf_lib._PadWSpaces [uint 8] 2 (@MatchBytes "R")
    | {- green -} nitf_lib._PadWSpaces [uint 8] 2 (@MatchBytes "G")
    | {- blue -} nitf_lib._PadWSpaces [uint 8] 2 (@MatchBytes "B")
    | {- monoBand -} nitf_lib._PadWSpaces [uint 8] 2 (@MatchBytes "M")
    | {- luminance -} nitf_lib._PadWSpaces [uint 8] 2 (@MatchBytes "Y")
    | {- chrominanceBlue -} nitf_lib._PadWSpaces [uint 8] 2 (@MatchBytes "Cb")
    | {- chrominanceRed -} nitf_lib._PadWSpaces [uint 8] 2 (@MatchBytes "Cr")
    | {- default -} nitf_lib._Spaces 2
    }
 
nitf_img_subheader._ISubCatN : Grammar {} =
  Choose fair
    { {- inphase -} nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "I")
    | {- quadrature -} nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "Q")
    | {- magnitude -} nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "M")
    | {- phase -} nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "P")
    | {- speed -} nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "SPEED")
    | {- direct -} nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "DIRECT")
    | {- easting -} nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "CGX")
    | {- northing -} nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "CGY")
    | {- longitude -} nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "GGX")
    | {- latitude -} nitf_lib._PadWSpaces [uint 8] 6 (@MatchBytes "GGY")
    | {- waveLength -} nitf_lib._UnsignedNum 6
    | {- default -} nitf_lib._Spaces 6
    | {- userdef -} @Many[6] nitf_lib._BCSA
    }
 
nitf_img_subheader._IMode ?a7 (Literal 1 ?a7) (nbands : ?a7) : Grammar {} =
  do ($$ : nitf_img_subheader.IMode) <- Choose fair
                                          { {- blockMode -} do (_960 : {}) <- @Match {'B'}
                                                               pure {blockMode: _960}
                                          | {- pixel -} do (_961 : {}) <- @Match {'P'}
                                                           pure {pixel: _961}
                                          | {- row -} do (_962 : {}) <- @Match {'R'}
                                                         pure {row: _962}
                                          | {- seq -} do (_963 : {}) <- @Match {'S'}
                                                         pure {seq: _963}
                                          }
     Choose fair
       { nitf_lib._Guard (nbands != 1)
       | case $$ is
           { {| blockMode = _964 |} -> pure {}
           }
       }
 
nitf_img_subheader._NBPR : Grammar {} =
  nitf_lib._PosQuad
 
nitf_img_subheader._NBPC : Grammar {} =
  nitf_lib._PosQuad
 
nitf_img_subheader._NPPBH : Grammar {} =
  nitf_lib._UpperBounded 4 8192
 
nitf_img_subheader._NPPBV : Grammar {} =
  nitf_lib._UpperBounded 4 8192
 
nitf_img_subheader._NBPP (abpp : uint 64) (ic : nitf_img_subheader.IC) : Grammar {} =
  do ($$ : uint 64) <- nitf_lib.BoundedPos 2 96
     nitf_lib._Guard (abpp <= $$)
     Choose fair
       { Choose fair
           { Choose fair
               { do Choose fair
                      { Choose fair
                          { Choose fair
                              { Choose fair
                                  { case ic is
                                      { {| c3 = _965 |} -> pure {}
                                      }
                                  | case ic is
                                      { {| c5 = _966 |} -> pure {}
                                      }
                                  }
                              | case ic is
                                  { {| i1 = _967 |} -> pure {}
                                  }
                              }
                          | case ic is
                              { {| m3 = _968 |} -> pure {}
                              }
                          }
                      | case ic is
                          { {| m5 = _969 |} -> pure {}
                          }
                      }
                    Choose fair
                      { nitf_lib._Guard ($$ == 8)
                      | nitf_lib._Guard ($$ == 12)
                      }
               | do case ic is
                      { {| c1 = _971 |} -> pure {}
                      }
                    nitf_lib._Guard ($$ == 1)
               }
           | do Choose fair
                  { case ic is
                      { {| c1 = _973 |} -> pure {}
                      }
                  | case ic is
                      { {| m8 = _974 |} -> pure {}
                      }
                  }
                nitf_lib._Guard (1 <= $$)
                nitf_lib._Guard ($$ <= 38)
           }
       | Choose fair
           { Choose fair
               { Choose fair
                   { Choose fair
                       { Choose fair
                           { Choose fair
                               { Choose fair
                                   { Choose fair
                                       { Choose fair
                                           { case ic is
                                               { {| c4 = _977 |} -> pure {}
                                               }
                                           | case ic is
                                               { {| c6 = _978 |} -> pure {}
                                               }
                                           }
                                       | case ic is
                                           { {| c7 = _979 |} -> pure {}
                                           }
                                       }
                                   | case ic is
                                       { {| c8 = _980 |} -> pure {}
                                       }
                                   }
                               | case ic is
                                   { {| m1 = _981 |} -> pure {}
                                   }
                               }
                           | case ic is
                               { {| m4 = _982 |} -> pure {}
                               }
                           }
                       | case ic is
                           { {| m6 = _983 |} -> pure {}
                           }
                       }
                   | case ic is
                       { {| m7 = _984 |} -> pure {}
                       }
                   }
               | case ic is
                   { {| nc = _985 |} -> pure {}
                   }
               }
           | case ic is
               { {| nm = _986 |} -> pure {}
               }
           }
       }
 
nitf_img_subheader._IDLvl : Grammar {} =
  nitf_lib._BoundedNum 3 1 999
 
nitf_img_subheader._IALvl : Grammar {} =
  nitf_lib._AttachmentLvl
 
nitf_img_subheader._IMag : Grammar {} =
  Choose fair
    { {- fp -} do ($$ : nitf_lib.FixedPoint) <- nitf_lib.FixedPoint
                  (fplen : uint 64) <- pure (((Length ($$.digs)) + 1) + (Length ($$.radix)))
                  nitf_lib._Guard (fplen <= 4)
                  nitf_lib._Spaces (4 - fplen)
    | {- frac -} do @Match {'/'}
                    ($$ : [int]) <- Many[ .. 3 ] nitf_lib.Digit
                    (fplen : uint 64) <- pure ((Length $$) + 1)
                    nitf_lib._Guard (fplen <= 4)
                    nitf_lib._Spaces (4 - fplen)
    }
 
nitf_img_subheader._UDIDL : Grammar {} =
  nitf_lib._LowerBoundedOrZero 5 3
 
nitf_img_subheader._IXShDL : Grammar {} =
  nitf_lib._LowerBoundedOrZero 5 3
 
nitf_img_subheader._CatIntLow ?a1 ?a4 (Literal 8 ?a4) (Literal 2 ?a1) (nbpp : ?a4) (abpp : ?a1) : Grammar {} =
  do nitf_lib._Guard (nbpp == 8)
     nitf_lib._Guard (2 <= abpp)
     nitf_lib._Guard (nbpp <= 8)
 
nitf_img_subheader._CatIntMid ?a1 ?a8 (Literal 12 ?a8) (Literal 8 ?a1) (Literal 16 ?a8) (Literal 9 ?a1) (nbpp : ?a8) (abpp : ?a1) : Grammar {} =
  Choose fair
    { do nitf_lib._Guard (nbpp == 12)
         nitf_lib._Guard (8 <= abpp)
         nitf_lib._Guard (nbpp <= 12)
    | do nitf_lib._Guard (nbpp == 16)
         nitf_lib._Guard (9 <= abpp)
         nitf_lib._Guard (nbpp <= 16)
    }
 
nitf_img_subheader._CatIntHigh ?a1 ?a8 (Literal 32 ?a8) (Literal 17 ?a1) (Literal 64 ?a8) (Literal 33 ?a1) (nbpp : ?a8) (abpp : ?a1) : Grammar {} =
  Choose fair
    { do nitf_lib._Guard (nbpp == 32)
         nitf_lib._Guard (17 <= abpp)
         nitf_lib._Guard (nbpp <= 32)
    | do nitf_lib._Guard (nbpp == 64)
         nitf_lib._Guard (33 <= abpp)
         nitf_lib._Guard (nbpp <= 64)
    }
 
nitf_img_subheader._CatIntEnds ?a0 ?a1 (Literal 8 ?a0) (Literal 2 ?a1) (Literal 32 ?a0) (Literal 17 ?a1) (Literal 64 ?a0) (Literal 33 ?a1) (nbpp : ?a0) (abpp : ?a1) : Grammar {} =
  Choose fair
    { nitf_img_subheader._CatIntLow ?a1 ?a0 nbpp abpp
    | nitf_img_subheader._CatIntHigh ?a1 ?a0 nbpp abpp
    }
 
nitf_img_subheader._CatIntFull ?a0 ?a1 (Literal 8 ?a0) (Literal 2 ?a1) (Literal 32 ?a0) (Literal 17 ?a1) (Literal 64 ?a0) (Literal 33 ?a1) (Literal 12 ?a0) (Literal 8 ?a1) (Literal 16 ?a0) (Literal 9 ?a1) (nbpp : ?a0) (abpp : ?a1) : Grammar {} =
  Choose fair
    { nitf_img_subheader._CatIntEnds ?a0 ?a1 nbpp abpp
    | nitf_img_subheader._CatIntMid ?a1 ?a0 nbpp abpp
    }
 
nitf_img_subheader._CatReals ?a5 ?a6 (Literal 32 ?a5) (Literal 32 ?a6) (Literal 64 ?a5) (Literal 64 ?a6) (nbpp : ?a5) (abpp : ?a6) : Grammar {} =
  Choose fair
    { do nitf_lib._Guard (nbpp == 32)
         nitf_lib._Guard (abpp == 32)
    | do nitf_lib._Guard (nbpp == 64)
         nitf_lib._Guard (abpp == 64)
    }
 
nitf_img_subheader._CatComplex ?a2 ?a3 (Literal 64 ?a2) (Literal 64 ?a3) (nbpp : ?a2) (abpp : ?a3) : Grammar {} =
  do nitf_lib._Guard (nbpp == 64)
     nitf_lib._Guard (abpp == 64)
 
nitf_img_subheader._CatParams ?a217 ?a219 ?a235 (Literal 1 ?a235) (Literal 1 ?a217) (Literal 1 ?a219) (Literal 3 ?a235) (Literal 8 ?a217) (Literal 2 ?a219) (Literal 32 ?a217) (Literal 17 ?a219) (Literal 64 ?a217) (Literal 33 ?a219) (Literal 12 ?a217) (Literal 8 ?a219) (Literal 16 ?a217) (Literal 9 ?a219) (Literal 32 ?a219) (Literal 64 ?a219) (Literal 2 ?a235) (Literal 9 ?a235) (Literal 0 ?a235) (icat : nitf_img_subheader.ICat) (isubcat : nitf_img_subheader.ISubCatN) (nbands : ?a235) (pvtype : nitf_img_subheader.PVType) (nbpp : ?a217) (abpp : ?a219) : Grammar {} =
  Choose fair
    { Choose fair
        { Choose fair
            { Choose fair
                { Choose fair
                    { Choose fair
                        { Choose fair
                            { Choose fair
                                { Choose fair
                                    { Choose fair
                                        { Choose fair
                                            { do Choose fair
                                                   { case icat is
                                                       { {| visible = _1061 |} -> pure {}
                                                       }
                                                   | case icat is
                                                       { {| optical = _1062 |} -> pure {}
                                                       }
                                                   }
                                                 Choose fair
                                                   { case isubcat is
                                                       { {| default = _1063 |} -> pure {}
                                                       }
                                                   | case isubcat is
                                                       { {| userdef = _1064 |} -> pure {}
                                                       }
                                                   }
                                                 Choose fair
                                                   { do nitf_lib._Guard (nbands == 1)
                                                        case pvtype is
                                                          { {| bilevel = _1066 |} -> pure {}
                                                          }
                                                        nitf_lib._Guard (nbpp == 1)
                                                        nitf_lib._Guard (abpp == 1)
                                                   | do Choose fair
                                                          { nitf_lib._Guard (nbands == 1)
                                                          | nitf_lib._Guard (nbands == 3)
                                                          }
                                                        Choose fair
                                                          { do case pvtype is
                                                                 { {| integer = _1069 |} -> pure {}
                                                                 }
                                                               nitf_img_subheader._CatIntFull ?a217 ?a219 nbpp abpp
                                                          | do case pvtype is
                                                                 { {| real = _1071 |} -> pure {}
                                                                 }
                                                               nitf_img_subheader._CatReals ?a217 ?a219 nbpp abpp
                                                          }
                                                   }
                                            | do Choose fair
                                                   { Choose fair
                                                       { Choose fair
                                                           { Choose fair
                                                               { Choose fair
                                                                   { Choose fair
                                                                       { Choose fair
                                                                           { Choose fair
                                                                               { Choose fair
                                                                                   { Choose fair
                                                                                       { Choose fair
                                                                                           { case icat is
                                                                                               { {| sideLooking = _1073 |} -> pure {}
                                                                                               }
                                                                                           | case icat is
                                                                                               { {| thermalInfrared = _1074 |} -> pure {}
                                                                                               }
                                                                                           }
                                                                                       | case icat is
                                                                                           { {| forwardLooking = _1075 |} -> pure {}
                                                                                           }
                                                                                       }
                                                                                   | case icat is
                                                                                       { {| radar = _1076 |} -> pure {}
                                                                                       }
                                                                                   }
                                                                               | case icat is
                                                                                   { {| electroOptical = _1077 |} -> pure {}
                                                                                   }
                                                                               }
                                                                           | case icat is
                                                                               { {| highResolution = _1078 |} -> pure {}
                                                                               }
                                                                           }
                                                                       | case icat is
                                                                           { {| blackWhitePhoto = _1079 |} -> pure {}
                                                                           }
                                                                       }
                                                                   | case icat is
                                                                       { {| fingerprints = _1080 |} -> pure {}
                                                                       }
                                                                   }
                                                               | case icat is
                                                                   { {| video = _1081 |} -> pure {}
                                                                   }
                                                               }
                                                           | case icat is
                                                               { {| catScans = _1082 |} -> pure {}
                                                               }
                                                           }
                                                       | case icat is
                                                           { {| mri = _1083 |} -> pure {}
                                                           }
                                                       }
                                                   | case icat is
                                                       { {| xray = _1084 |} -> pure {}
                                                       }
                                                   }
                                                 Choose fair
                                                   { case isubcat is
                                                       { {| default = _1085 |} -> pure {}
                                                       }
                                                   | case isubcat is
                                                       { {| userdef = _1086 |} -> pure {}
                                                       }
                                                   }
                                                 nitf_lib._Guard (nbands == 1)
                                                 Choose fair
                                                   { do case pvtype is
                                                          { {| integer = _1088 |} -> pure {}
                                                          }
                                                        nitf_img_subheader._CatIntFull ?a217 ?a219 nbpp abpp
                                                   | do case pvtype is
                                                          { {| real = _1090 |} -> pure {}
                                                          }
                                                        nitf_img_subheader._CatReals ?a217 ?a219 nbpp abpp
                                                   }
                                            }
                                        | do case icat is
                                               { {| infrared = _1092 |} -> pure {}
                                               }
                                             nitf_lib._Guard (nbands == 1)
                                             Choose fair
                                               { do case pvtype is
                                                      { {| integer = _1094 |} -> pure {}
                                                      }
                                                    nitf_img_subheader._CatIntFull ?a217 ?a219 nbpp abpp
                                               | do case pvtype is
                                                      { {| real = _1096 |} -> pure {}
                                                      }
                                                    nitf_img_subheader._CatReals ?a217 ?a219 nbpp abpp
                                               }
                                        }
                                    | do Choose fair
                                           { case icat is
                                               { {| colorPhoto = _1098 |} -> pure {}
                                               }
                                           | case icat is
                                               { {| colorPatch = _1099 |} -> pure {}
                                               }
                                           }
                                         Choose fair
                                           { case isubcat is
                                               { {| default = _1100 |} -> pure {}
                                               }
                                           | case isubcat is
                                               { {| userdef = _1101 |} -> pure {}
                                               }
                                           }
                                         nitf_lib._Guard (nbands == 3)
                                         case pvtype is
                                           { {| integer = _1102 |} -> pure {}
                                           }
                                         nitf_img_subheader._CatIntEnds ?a217 ?a219 nbpp abpp
                                    }
                                | do Choose fair
                                       { case icat is
                                           { {| rasterMap = _1104 |} -> pure {}
                                           }
                                       | case icat is
                                           { {| legends = _1105 |} -> pure {}
                                           }
                                       }
                                     Choose fair
                                       { case isubcat is
                                           { {| default = _1106 |} -> pure {}
                                           }
                                       | case isubcat is
                                           { {| userdef = _1107 |} -> pure {}
                                           }
                                       }
                                     Choose fair
                                       { nitf_lib._Guard (nbands == 1)
                                       | nitf_lib._Guard (nbands == 3)
                                       }
                                     case pvtype is
                                       { {| integer = _1108 |} -> pure {}
                                       }
                                     nitf_img_subheader._CatIntEnds ?a217 ?a219 nbpp abpp
                                }
                            | do case icat is
                                   { {| locationGrid = _1110 |} -> pure {}
                                   }
                                 Choose fair
                                   { Choose fair
                                       { Choose fair
                                           { case isubcat is
                                               { {| easting = _1111 |} -> pure {}
                                               }
                                           | case isubcat is
                                               { {| northing = _1112 |} -> pure {}
                                               }
                                           }
                                       | case isubcat is
                                           { {| longitude = _1113 |} -> pure {}
                                           }
                                       }
                                   | case isubcat is
                                       { {| latitude = _1114 |} -> pure {}
                                       }
                                   }
                                 nitf_lib._Guard (nbands == 2)
                                 Choose fair
                                   { do Choose fair
                                          { case pvtype is
                                              { {| integer = _1116 |} -> pure {}
                                              }
                                          | case pvtype is
                                              { {| signed = _1117 |} -> pure {}
                                              }
                                          }
                                        nitf_img_subheader._CatIntFull ?a217 ?a219 nbpp abpp
                                   | do case pvtype is
                                          { {| real = _1119 |} -> pure {}
                                          }
                                        nitf_img_subheader._CatReals ?a217 ?a219 nbpp abpp
                                   }
                            }
                        | do case icat is
                               { {| otherMatrix = _1121 |} -> pure {}
                               }
                             case isubcat is
                               { {| userdef = _1122 |} -> pure {}
                               }
                             nitf_lib._Guard (1 <= nbands)
                             nitf_lib._Guard (nbands <= 9)
                             Choose fair
                               { Choose fair
                                   { do case pvtype is
                                          { {| complex = _1124 |} -> pure {}
                                          }
                                        nitf_img_subheader._CatComplex ?a217 ?a219 nbpp abpp
                                   | do Choose fair
                                          { case pvtype is
                                              { {| integer = _1126 |} -> pure {}
                                              }
                                          | case pvtype is
                                              { {| signed = _1127 |} -> pure {}
                                              }
                                          }
                                        nitf_img_subheader._CatIntFull ?a217 ?a219 nbpp abpp
                                   }
                               | do case pvtype is
                                      { {| real = _1129 |} -> pure {}
                                      }
                                    nitf_img_subheader._CatReals ?a217 ?a219 nbpp abpp
                               }
                        }
                    | do Choose fair
                           { case icat is
                               { {| multiSpectral = _1131 |} -> pure {}
                               }
                           | case icat is
                               { {| hyperSpectral = _1132 |} -> pure {}
                               }
                           }
                         Choose fair
                           { case isubcat is
                               { {| waveLength = _1133 |} -> pure {}
                               }
                           | case isubcat is
                               { {| default = _1134 |} -> pure {}
                               }
                           }
                         Choose fair
                           { do nitf_lib._Guard (2 <= nbands)
                                nitf_lib._Guard (nbands <= 9)
                           | nitf_lib._Guard (nbands == 0)
                           }
                         Choose fair
                           { do Choose fair
                                  { case pvtype is
                                      { {| integer = _1137 |} -> pure {}
                                      }
                                  | case pvtype is
                                      { {| signed = _1138 |} -> pure {}
                                      }
                                  }
                                nitf_img_subheader._CatIntFull ?a217 ?a219 nbpp abpp
                           | do case pvtype is
                                  { {| real = _1140 |} -> pure {}
                                  }
                                nitf_img_subheader._CatReals ?a217 ?a219 nbpp abpp
                           }
                    }
                | do Choose fair
                       { case icat is
                           { {| synthApertureRadar = _1142 |} -> pure {}
                           }
                       | case icat is
                           { {| sarRadioHologram = _1143 |} -> pure {}
                           }
                       }
                     Choose fair
                       { Choose fair
                           { Choose fair
                               { Choose fair
                                   { case isubcat is
                                       { {| inphase = _1144 |} -> pure {}
                                       }
                                   | case isubcat is
                                       { {| quadrature = _1145 |} -> pure {}
                                       }
                                   }
                               | case isubcat is
                                   { {| magnitude = _1146 |} -> pure {}
                                   }
                               }
                           | case isubcat is
                               { {| phase = _1147 |} -> pure {}
                               }
                           }
                       | case isubcat is
                           { {| default = _1148 |} -> pure {}
                           }
                       }
                     Choose fair
                       { do nitf_lib._Guard (nbands == 1)
                            case pvtype is
                              { {| complex = _1150 |} -> pure {}
                              }
                            nitf_img_subheader._CatComplex ?a217 ?a219 nbpp abpp
                       | do Choose fair
                              { nitf_lib._Guard (nbands == 1)
                              | nitf_lib._Guard (nbands == 2)
                              }
                            Choose fair
                              { do Choose fair
                                     { case pvtype is
                                         { {| integer = _1153 |} -> pure {}
                                         }
                                     | case pvtype is
                                         { {| signed = _1154 |} -> pure {}
                                         }
                                     }
                                   nitf_img_subheader._CatIntFull ?a217 ?a219 nbpp abpp
                              | do case pvtype is
                                     { {| real = _1156 |} -> pure {}
                                     }
                                   nitf_img_subheader._CatReals ?a217 ?a219 nbpp abpp
                              }
                       }
                }
            | do Choose fair
                   { case icat is
                       { {| airWind = _1158 |} -> pure {}
                       }
                   | case icat is
                       { {| waterCurrent = _1159 |} -> pure {}
                       }
                   }
                 Choose fair
                   { case isubcat is
                       { {| speed = _1160 |} -> pure {}
                       }
                   | case isubcat is
                       { {| direct = _1161 |} -> pure {}
                       }
                   }
                 nitf_lib._Guard (nbands == 2)
                 case pvtype is
                   { {| integer = _1162 |} -> pure {}
                   }
                 nitf_lib._Guard (nbpp == 8)
                 nitf_lib._Guard (2 <= abpp)
                 nitf_lib._Guard (abpp <= 8)
            }
        | do Choose fair
               { case icat is
                   { {| barometric = _1164 |} -> pure {}
                   }
               | case icat is
                   { {| waterDepth = _1165 |} -> pure {}
                   }
               }
             nitf_lib._Guard (nbands == 1)
             case pvtype is
               { {| integer = _1166 |} -> pure {}
               }
             Choose fair
               { nitf_img_subheader._CatIntLow ?a219 ?a217 nbpp abpp
               | nitf_img_subheader._CatIntMid ?a219 ?a217 nbpp abpp
               }
        }
    | do case icat is
           { {| elevationModel = _1168 |} -> pure {}
           }
         nitf_lib._Guard (nbands == 1)
         Choose fair
           { do Choose fair
                  { case pvtype is
                      { {| integer = _1170 |} -> pure {}
                      }
                  | case pvtype is
                      { {| signed = _1171 |} -> pure {}
                      }
                  }
                nitf_img_subheader._CatIntFull ?a217 ?a219 nbpp abpp
           | do case pvtype is
                  { {| real = _1173 |} -> pure {}
                  }
                nitf_img_subheader._CatReals ?a217 ?a219 nbpp abpp
           }
    }
 
nitf_img_subheader._ISHeader : Grammar {} =
  do nitf_img_subheader._Im
     nitf_img_subheader._IID1
     nitf_img_subheader._IDaTim
     nitf_img_subheader._TgtId
     nitf_img_subheader._IID2
     nitf_lib._CommonSubheader
     nitf_lib._Encryp
     nitf_img_subheader._ISorce
     (n_rows : uint 64) <- nitf_img_subheader.NRows
     (n_cols : uint 64) <- nitf_img_subheader.NCols
     (pvtype : nitf_img_subheader.PVType) <- nitf_img_subheader.PVType
     (irep : nitf_img_subheader.IRep) <- nitf_img_subheader.IRep
     (icat : nitf_img_subheader.ICat) <- nitf_img_subheader.ICat
     (abpp : uint 64) <- nitf_img_subheader.ABPP
     nitf_img_subheader._PJust
     (icords : nitf_lib.DefaultByte nitf_img_subheader.ICords0) <- nitf_img_subheader.ICords
     Choose fair
       { {- igeolo -} do case icords is
                           { {| actual = _1175 |} -> pure {}
                           }
                         nitf_img_subheader._IGeoLo
       | {- empty -} case icords is
                       { {| default = _1178 |} -> pure {}
                       }
       }
     (nicom : uint 64) <- nitf_img_subheader.NICom
     nitf_img_subheader._IComn nicom
     (ic : nitf_img_subheader.IC) <- nitf_img_subheader.IC
     Choose fair
       { {- comrat -} do Choose fair
                           { Choose fair
                               { Choose fair
                                   { Choose fair
                                       { Choose fair
                                           { Choose fair
                                               { Choose fair
                                                   { Choose fair
                                                       { Choose fair
                                                           { Choose fair
                                                               { Choose fair
                                                                   { case ic is
                                                                       { {| c1 = _1180 |} -> pure {}
                                                                       }
                                                                   | case ic is
                                                                       { {| c3 = _1181 |} -> pure {}
                                                                       }
                                                                   }
                                                               | case ic is
                                                                   { {| c4 = _1182 |} -> pure {}
                                                                   }
                                                               }
                                                           | case ic is
                                                               { {| c5 = _1183 |} -> pure {}
                                                               }
                                                           }
                                                       | case ic is
                                                           { {| c6 = _1184 |} -> pure {}
                                                           }
                                                       }
                                                   | case ic is
                                                       { {| c8 = _1185 |} -> pure {}
                                                       }
                                                   }
                                               | case ic is
                                                   { {| m1 = _1186 |} -> pure {}
                                                   }
                                               }
                                           | case ic is
                                               { {| m3 = _1187 |} -> pure {}
                                               }
                                           }
                                       | case ic is
                                           { {| m4 = _1188 |} -> pure {}
                                           }
                                       }
                                   | case ic is
                                       { {| m5 = _1189 |} -> pure {}
                                       }
                                   }
                               | case ic is
                                   { {| m8 = _1190 |} -> pure {}
                                   }
                               }
                           | case ic is
                               { {| i1 = _1191 |} -> pure {}
                               }
                           }
                         nitf_img_subheader._ComRat ic
       | {- empty -} Choose fair
                       { case ic is
                           { {| nc = _1194 |} -> pure {}
                           }
                       | case ic is
                           { {| nm = _1195 |} -> pure {}
                           }
                       }
       }
     (nbands : uint 64) <- nitf_img_subheader.NBands irep
     (xbands : nitf_img_subheader.ISHeader2) <- Choose fair
                                                  { {- def_xband -} do (_1198 : uint 64) <- do nitf_lib._Guard (nbands == 0)
                                                                                               ($$ : uint 64) <- nitf_img_subheader.XBands (uint 64) nbands
                                                                                               pure $$
                                                                       pure {def_xband: _1198}
                                                  | {- no_xband -} do (_1199 : {}) <- nitf_lib.Guard (nbands != 0)
                                                                      pure {no_xband: _1199}
                                                  }
     (num_bands : uint 64) <- Choose fair
                                { do nitf_lib._Guard (nbands != 0)
                                     ($$ : uint 64) <- pure nbands
                                     pure $$
                                | do nitf_lib._Guard (nbands == 0)
                                     (bnds : uint 64) <- case xbands is
                                                           { {| def_xband = _1201 |} -> pure _1201
                                                           }
                                     ($$ : uint 64) <- pure bnds
                                     pure $$
                                }
     (bandinfo : [nitf_img_subheader.ISHeader5]) <- Many[num_bands] do (irepbandn : nitf_img_subheader.IRepBandN) <- nitf_img_subheader.IRepBandN
                                                                       (isubcatn : nitf_img_subheader.ISubCatN) <- nitf_img_subheader.ISubCatN
                                                                       nitf_img_subheader._IFCN
                                                                       nitf_img_subheader._ImFltN
                                                                       (nlutsn : uint 64) <- nitf_lib.UpperBoundedDigit 4
                                                                       nitf_img_subheader._DispParams (uint 64) (uint 64) irep irepbandn nbands pvtype nlutsn
                                                                       Choose fair
                                                                         { {- luts -} do nitf_lib._Guard (0 < nlutsn)
                                                                                         nitf_img_subheader._NELutN
                                                                                         nitf_img_subheader._LutdNM nlutsn
                                                                         | {- no_luts -} nitf_lib._Guard (nlutsn == 0)
                                                                         }
                                                                       pure {irepbandn = irepbandn,
                                                                             isubcatn = isubcatn,
                                                                             nlutsn = nlutsn}
     nitf_img_subheader._ISync
     (imode : nitf_img_subheader.IMode) <- nitf_img_subheader.IMode (uint 64) nbands
     (nbpr : uint 64) <- nitf_img_subheader.NBPR
     (nbpc : uint 64) <- nitf_img_subheader.NBPC
     Choose fair
       { Choose fair
           { nitf_lib._Guard (nbpr != 1)
           | nitf_lib._Guard (nbpc != 1)
           }
       | Choose fair
           { Choose fair
               { case imode is
                   { {| blockMode = _1205 |} -> pure {}
                   }
               | case imode is
                   { {| pixel = _1206 |} -> pure {}
                   }
               }
           | case imode is
               { {| row = _1207 |} -> pure {}
               }
           }
       }
     (nppbh : uint 64) <- nitf_img_subheader.NPPBH
     nitf_lib._Guard (n_cols <= (nbpr * nppbh))
     (nppbv : uint 64) <- nitf_img_subheader.NPPBV
     nitf_lib._Guard (n_rows <= (nbpc * nppbv))
     (nbpp : uint 64) <- nitf_img_subheader.NBPP abpp ic
     map ((bi : nitf_img_subheader.ISHeader5) in bandinfo)
       (nitf_img_subheader.CatParams (uint 64) (uint 64) (uint 64) icat (bi.isubcatn) nbands pvtype nbpp abpp)
     nitf_img_subheader._IDLvl
     nitf_img_subheader._IALvl
     nitf_lib._Location
     nitf_img_subheader._IMag
     (udidl : uint 64) <- nitf_img_subheader.UDIDL
     Choose fair
       { {- uds -} do nitf_lib._Guard (0 < udidl)
                      nitf_img_subheader._UDOfl
                      nitf_img_subheader._UDID udidl
       | {- empty -} nitf_lib._Guard (udidl == 0)
       }
     (ixshdl : uint 64) <- nitf_img_subheader.IXShDL
     Choose fair
       { {- ixs -} do nitf_lib._Guard (0 < ixshdl)
                      nitf_img_subheader._IXSOfl
                      nitf_img_subheader._IXShD ixshdl
       | {- empty -} nitf_lib._Guard (ixshdl == 0)
       }
module nitf_header
 
--- Imports:
import nitf_lib
 
--- Type defs:
type nitf_header.FSC_auth0 = { type: uint 8
                             ; auth: [uint 8]
                             }
 
type nitf_header.UserData0 = { overflow: [uint 8]
                             ; data: [uint 8]
                             }
 
type nitf_header.FSDCTP = Choose { dd: [uint 8]
                                 ; de: [uint 8]
                                 ; gd: [uint 8]
                                 ; ge: [uint 8]
                                 ; none: [uint 8]
                                 ; o: [uint 8]
                                 ; x: [uint 8]
                                 }
 
type nitf_header.FS_declass = { declass_type: nitf_header.FSDCTP
                              ; fsdcdt: Maybe [uint 8]
                              ; fsdcxm: Maybe [uint 8]
                              ; fsdg: Maybe (uint 8)
                              ; fsdgdt: Maybe [uint 8]
                              ; fscltx: Maybe {}
                              }
 
type nitf_header.FBKGC = Choose { nonstandard_utf8: [uint 8]
                                ; normal: [uint 8]
                                }
 
type nitf_header.FL = Choose { file_length: int
                             ; unknown_length: [uint 8]
                             }
 
type nitf_header.ImgLens = { lish: uint 64
                           ; li: uint 64
                           }
 
type nitf_header.GraphLens = { lssh: uint 64
                             ; seglen: uint 64
                             }
 
type nitf_header.TextLens = { ltsh: uint 64
                            ; lt: uint 64
                            }
 
type nitf_header.DataExtLens = { ldsh: uint 64
                               ; ld: uint 64
                               }
 
type nitf_header.ResExtLens = { lresh: uint 64
                              ; lre: uint 64
                              }
 
type nitf_header.UserData = Choose { none: {}
                                   ; udhd: nitf_header.UserData0
                                   }
 
type nitf_header.Header = { fver: [uint 8]
                          ; clevel: int
                          ; ostaid: [uint 8]
                          ; fdt: nitf_lib.DateTime
                          ; ftitle: [uint 8]
                          ; fsclas: uint 8
                          ; fsclsy: [uint 8]
                          ; fscode: Maybe [[uint 8]]
                          ; fsctlh: [uint 8]
                          ; fsrel: Maybe [[uint 8]]
                          ; fs_declass: nitf_header.FS_declass
                          ; fsc_auth: Maybe nitf_header.FSC_auth0
                          ; fscrsn: uint 8
                          ; fssrdt: [uint 8]
                          ; fsctln: [uint 8]
                          ; fscop: [uint 8]
                          ; fscpys: [uint 8]
                          ; encryp: uint 8
                          ; fbkgc: nitf_header.FBKGC
                          ; oname: [uint 8]
                          ; ophone: [uint 8]
                          ; fl: nitf_header.FL
                          ; hl: int
                          ; numi: uint 64
                          ; li: [nitf_header.ImgLens]
                          ; nums: uint 64
                          ; graphlens: [nitf_header.GraphLens]
                          ; textlens: [nitf_header.TextLens]
                          ; dataextlens: [nitf_header.DataExtLens]
                          ; resextlens: [nitf_header.ResExtLens]
                          ; lre: [[[uint 8]]]
                          ; udhd: nitf_header.UserData
                          ; xhd: nitf_header.UserData
                          }
 
--- Rules:
 
nitf_header.CallMeMaybe ?a1 (P : Grammar ?a1) : Grammar (Maybe ?a1) =
  do (r : ?a1) <- P
     ($$ : Maybe ?a1) <- pure (just r)
     pure $$
 
nitf_header.FHDR : Grammar [uint 8] =
  MatchBytes "NITF"
 
nitf_header.FVER : Grammar [uint 8] =
  MatchBytes "02.10"
 
nitf_header.CLEVEL : Grammar int =
  do (l : int) <- nitf_lib.UnsignedNum 2
     nitf_lib._Guard (l != 0)
     ($$ : int) <- pure l
     pure $$
 
nitf_header.STYPE : Grammar [uint 8] =
  MatchBytes "BF01"
 
nitf_header.OSTAID : Grammar [uint 8] =
  Choose biased
    { do @MatchBytes "0000000000"
         ($$ : [uint 8]) <- nitf_lib.MyFail [uint 8]
         pure $$
    | Many[10] nitf_lib.BCSA
    }
 
nitf_header.FDT : Grammar nitf_lib.DateTime =
  nitf_lib.DateTime
 
nitf_header.FTITLE : Grammar [uint 8] =
  Many[80] nitf_lib.ECSA
 
nitf_header.FSCLAS : Grammar (uint 8) =
  Match (((({'T'} | {'S'}) | {'C'}) | {'R'}) | {'U'})
 
nitf_header.Digraph : Grammar [uint 8] =
  Many[ 1 .. ] Match ('A' .. 'Z')
 
nitf_header.FSCLSY : Grammar [uint 8] =
  Choose fair
    { nitf_header.Digraph
    | MatchBytes "  "
    }
 
nitf_header.DigraphSeq : Grammar (Maybe [[uint 8]]) =
  Choose biased
    { do (d : [uint 8]) <- nitf_header.Digraph
         (ds : [[uint 8]]) <- Many[] do @Match {' '}
                                        ($$ : [uint 8]) <- nitf_header.Digraph
                                        pure $$
         @Many[] @Match {' '}
         END
         ($$ : Maybe [[uint 8]]) <- pure (just (concat [[d],
                                                        ds]))
         pure $$
    | do @Many[] @Match {' '}
         END
         ($$ : Maybe [[uint 8]]) <- pure nothing
         pure $$
    }
 
nitf_header.FSCODE : Grammar (Maybe [[uint 8]]) =
  nitf_lib.Chunk (Maybe [[uint 8]]) 11 nitf_header.DigraphSeq
 
nitf_header.FSCTLH : Grammar [uint 8] =
  Choose fair
    { nitf_header.Digraph
    | MatchBytes "  "
    }
 
nitf_header.FSREL : Grammar (Maybe [[uint 8]]) =
  nitf_lib.Chunk (Maybe [[uint 8]]) 20 nitf_header.DigraphSeq
 
nitf_header.FSDCTP : Grammar nitf_header.FSDCTP =
  Choose fair
    { {- dd -} do (_1217 : [uint 8]) <- MatchBytes "DD"
                  pure {dd: _1217}
    | {- de -} do (_1218 : [uint 8]) <- MatchBytes "DE"
                  pure {de: _1218}
    | {- gd -} do (_1219 : [uint 8]) <- MatchBytes "GD"
                  pure {gd: _1219}
    | {- ge -} do (_1220 : [uint 8]) <- MatchBytes "GE"
                  pure {ge: _1220}
    | {- o -} do (_1221 : [uint 8]) <- MatchBytes "O "
                 pure {o: _1221}
    | {- x -} do (_1222 : [uint 8]) <- MatchBytes "X "
                 pure {x: _1222}
    | {- none -} do (_1223 : [uint 8]) <- MatchBytes "  "
                    pure {none: _1223}
    }
 
nitf_header.Date2 : Grammar [uint 8] =
  Many[8] nitf_lib.ECSA
 
nitf_header.FSDCXM : Grammar [uint 8] =
  Choose fair
    { Choose fair
        { do (_1224 : uint 8) <- Match {' '}
             (_1225 : uint 8) <- Match {' '}
             (_1226 : uint 8) <- Match {'X'}
             (_1227 : uint 8) <- Match ('1' .. '8')
             pure [_1224,
                   _1225,
                   _1226,
                   _1227]
        | do (_1228 : uint 8) <- Match {'X'}
             (_1229 : uint 8) <- Match ('1' .. '8')
             (_1230 : uint 8) <- Match {' '}
             (_1231 : uint 8) <- Match {' '}
             pure [_1228,
                   _1229,
                   _1230,
                   _1231]
        }
    | do (_1232 : uint 8) <- Match {'X'}
         (_1233 : uint 8) <- Match {'2'}
         (_1234 : uint 8) <- Match {'5'}
         (_1235 : uint 8) <- Match ('1' .. '9')
         pure [_1232,
               _1233,
               _1234,
               _1235]
    }
 
nitf_header.FSDG : Grammar (uint 8) =
  Match (({'S'} | {'C'}) | {'R'})
 
nitf_header.FSDGDT : Grammar [uint 8] =
  Many[8] nitf_lib.ECSA
 
nitf_header.FSCLTX : Grammar [uint 8] =
  Many[43] nitf_lib.ECSA
 
nitf_header.FS_declass : Grammar nitf_header.FS_declass =
  do (declass_type : nitf_header.FSDCTP) <- nitf_header.FSDCTP
     (fsdcdt : Maybe [uint 8]) <- Choose biased
                                    { do case declass_type is
                                           { {| dd = _1236 |} -> pure {}
                                           }
                                         ($$ : Maybe [uint 8]) <- nitf_header.CallMeMaybe [uint 8] nitf_header.Date2
                                         pure $$
                                    | do @Many[8] @Match {' '}
                                         ($$ : Maybe [uint 8]) <- pure nothing
                                         pure $$
                                    }
     (fsdcxm : Maybe [uint 8]) <- Choose biased
                                    { do case declass_type is
                                           { {| x = _1239 |} -> pure {}
                                           }
                                         (f : [uint 8]) <- nitf_header.FSDCXM
                                         ($$ : Maybe [uint 8]) <- pure (just f)
                                         pure $$
                                    | do @Many[4] @Match {' '}
                                         ($$ : Maybe [uint 8]) <- pure nothing
                                         pure $$
                                    }
     (fsdg : Maybe (uint 8)) <- Choose biased
                                  { do Choose fair
                                         { case declass_type is
                                             { {| gd = _1242 |} -> pure {}
                                             }
                                         | case declass_type is
                                             { {| ge = _1243 |} -> pure {}
                                             }
                                         }
                                       (f : uint 8) <- nitf_header.FSDG
                                       ($$ : Maybe (uint 8)) <- pure (just f)
                                       pure $$
                                  | do @Match {' '}
                                       ($$ : Maybe (uint 8)) <- pure nothing
                                       pure $$
                                  }
     (fsdgdt : Maybe [uint 8]) <- Choose biased
                                    { do case declass_type is
                                           { {| gd = _1246 |} -> pure {}
                                           }
                                         (d : [uint 8]) <- nitf_header.Date2
                                         ($$ : Maybe [uint 8]) <- pure (just d)
                                         pure $$
                                    | do @Many[8] @Match {' '}
                                         ($$ : Maybe [uint 8]) <- pure nothing
                                         pure $$
                                    }
     (fscltx : Maybe {}) <- Choose biased
                              { do Choose fair
                                     { case declass_type is
                                         { {| de = _1249 |} -> pure {}
                                         }
                                     | case declass_type is
                                         { {| ge = _1250 |} -> pure {}
                                         }
                                     }
                                   ($$ : Maybe {}) <- nitf_header.CallMeMaybe {} (@Many[43] nitf_lib._ECSA)
                                   pure $$
                              | do @Many[43] @Match {' '}
                                   ($$ : Maybe {}) <- pure nothing
                                   pure $$
                              }
     pure {declass_type = declass_type,
           fsdcdt = fsdcdt,
           fsdcxm = fsdcxm,
           fsdg = fsdg,
           fsdgdt = fsdgdt,
           fscltx = fscltx}
 
nitf_header.FSC_auth : Grammar (Maybe nitf_header.FSC_auth0) =
  Choose biased
    { do ($$ : Maybe nitf_header.FSC_auth0) <- nitf_header.CallMeMaybe nitf_header.FSC_auth0 do (type : uint 8) <- Match (({'O'}
                                                                                                                           |
                                                                                                                           {'D'})
                                                                                                                          |
                                                                                                                          {'M'})
                                                                                                (auth : [uint 8]) <- Many[40] nitf_lib.ECSA
                                                                                                pure {type = type,
                                                                                                      auth = auth}
         pure $$
    | do @Match {' '}
         @Many[40] nitf_lib._ECSA
         ($$ : Maybe nitf_header.FSC_auth0) <- pure nothing
         pure $$
    }
 
nitf_header.FSCRSN : Grammar (uint 8) =
  Match (('A' .. 'G') | {' '})
 
nitf_header.FSSRDT : Grammar [uint 8] =
  Many[8] nitf_lib.ECSA
 
nitf_header.FSCTLN : Grammar [uint 8] =
  Many[15] nitf_lib.ECSA
 
nitf_header.FSCOP : Grammar [uint 8] =
  Many[5] nitf_lib.BCSN
 
nitf_header.FSCPYS : Grammar [uint 8] =
  Many[5] nitf_lib.BCSN
 
nitf_header.ENCRYP : Grammar (uint 8) =
  nitf_lib.BCSN
 
nitf_header.FBKGC : Grammar nitf_header.FBKGC =
  Choose biased
    { {- nonstandard_utf8 -} do (_1256 : [uint 8]) <- Many[3] do @MatchBytes [239,
                                                                              191,
                                                                              189]
                                                                 ($$ : uint 8) <- pure 189
                                                                 pure $$
                                pure {nonstandard_utf8: _1256}
    | {- normal -} do (_1257 : [uint 8]) <- Many[3] Match (0 .. 255)
                      pure {normal: _1257}
    }
 
nitf_header.ONAME : Grammar [uint 8] =
  Many[24] nitf_lib.ECSA
 
nitf_header.OPHONE : Grammar [uint 8] =
  Many[18] nitf_lib.ECSA
 
nitf_header.FL : Grammar nitf_header.FL =
  Choose biased
    { {- unknown_length -} do (_1258 : [uint 8]) <- Many[12] Match {'9'}
                              pure {unknown_length: _1258}
    | {- file_length -} do (_1259 : int) <- nitf_lib.UnsignedNum 12
                           pure {file_length: _1259}
    }
 
nitf_header.HL : Grammar int =
  nitf_lib.UnsignedNum 6
 
nitf_header.ImgLens : Grammar nitf_header.ImgLens =
  do (lish : uint 64) <- nitf_lib.BoundedNum 6 439 999998
     (li : uint 64) <- nitf_lib.BoundedPos 10 9999999999
     pure {lish = lish,
           li = li}
 
nitf_header.GraphLens : Grammar nitf_header.GraphLens =
  do (lssh : uint 64) <- nitf_lib.BoundedNum 4 258 9999
     (seglen : uint 64) <- nitf_lib.BoundedPos 6 999999
     pure {lssh = lssh,
           seglen = seglen}
 
nitf_header.NUMX : Grammar [uint 8] =
  MatchBytes "000"
 
nitf_header.LTSH : Grammar [uint 8] =
  Many[4] nitf_lib.BCSN
 
nitf_header.LT : Grammar [uint 8] =
  Many[5] nitf_lib.BCSN
 
nitf_header.TextLens : Grammar nitf_header.TextLens =
  do (ltsh : uint 64) <- nitf_lib.BoundedNum 4 282 9999
     (lt : uint 64) <- nitf_lib.BoundedPos 5 999999
     pure {ltsh = ltsh,
           lt = lt}
 
nitf_header.DataExtLens : Grammar nitf_header.DataExtLens =
  do (ldsh : uint 64) <- nitf_lib.BoundedNum 4 200 9999
     (ld : uint 64) <- nitf_lib.BoundedPos 9 999999999
     pure {ldsh = ldsh,
           ld = ld}
 
nitf_header.LRESH : Grammar [uint 8] =
  Many[4] nitf_lib.BCSN
 
nitf_header.LRE : Grammar [uint 8] =
  Many[7] nitf_lib.BCSN
 
nitf_header.ResExtLens : Grammar nitf_header.ResExtLens =
  do (lresh : uint 64) <- nitf_lib.BoundedNum 4 200 9999
     (lre : uint 64) <- nitf_lib.BoundedPos 7 9999999
     pure {lresh = lresh,
           lre = lre}
 
nitf_header.UDHDL : Grammar [uint 8] =
  Many[5] nitf_lib.BCSN
 
nitf_header.UserData : Grammar nitf_header.UserData =
  Choose biased
    { {- none -} do (_1261 : {}) <- do @MatchBytes "00000"
                                       ($$ : {}) <- pure {}
                                       pure $$
                    pure {none: _1261}
    | {- udhd -} do (_1262 : nitf_header.UserData0) <- do (l : uint 64) <- nitf_lib.UnsignedNumUInt 5
                                                          (overflow : [uint 8]) <- Many[3] nitf_lib.BCSN
                                                          (data : [uint 8]) <- Many[l - 3] GetByte
                                                          pure {overflow = overflow,
                                                                data = data}
                    pure {udhd: _1262}
    }
 
nitf_header._FHDR : Grammar {} =
  @MatchBytes "NITF"
 
nitf_header._STYPE : Grammar {} =
  @MatchBytes "BF01"
 
nitf_header._NUMX : Grammar {} =
  @MatchBytes "000"
 
nitf_header.Header : Grammar nitf_header.Header =
  do nitf_header._FHDR
     (fver : [uint 8]) <- nitf_header.FVER
     (clevel : int) <- nitf_header.CLEVEL
     nitf_header._STYPE
     (ostaid : [uint 8]) <- nitf_header.OSTAID
     (fdt : nitf_lib.DateTime) <- nitf_header.FDT
     (ep : nitf_lib.Date) <- nitf_lib.Epoch
     nitf_lib._OrdDate ep (fdt.date)
     (today : nitf_lib.Date) <- nitf_lib.Today
     nitf_lib._OrdDate (fdt.date) today
     (ftitle : [uint 8]) <- nitf_header.FTITLE
     (fsclas : uint 8) <- nitf_header.FSCLAS
     (fsclsy : [uint 8]) <- nitf_header.FSCLSY
     (fscode : Maybe [[uint 8]]) <- nitf_header.FSCODE
     (fsctlh : [uint 8]) <- nitf_header.FSCTLH
     (fsrel : Maybe [[uint 8]]) <- nitf_header.FSREL
     (fs_declass : nitf_header.FS_declass) <- nitf_header.FS_declass
     (fsc_auth : Maybe nitf_header.FSC_auth0) <- nitf_header.FSC_auth
     (fscrsn : uint 8) <- nitf_header.FSCRSN
     (fssrdt : [uint 8]) <- nitf_header.FSSRDT
     (fsctln : [uint 8]) <- nitf_header.FSCTLN
     (fscop : [uint 8]) <- nitf_header.FSCOP
     (fscpys : [uint 8]) <- nitf_header.FSCPYS
     (encryp : uint 8) <- nitf_header.ENCRYP
     (fbkgc : nitf_header.FBKGC) <- nitf_header.FBKGC
     (oname : [uint 8]) <- nitf_header.ONAME
     (ophone : [uint 8]) <- nitf_header.OPHONE
     (fl : nitf_header.FL) <- nitf_header.FL
     (hl : int) <- nitf_header.HL
     (numi : uint 64) <- nitf_lib.UnsignedNumUInt 3
     (li : [nitf_header.ImgLens]) <- Many[numi] nitf_header.ImgLens
     (nums : uint 64) <- nitf_lib.UnsignedNumUInt 3
     (graphlens : [nitf_header.GraphLens]) <- Many[nums] nitf_header.GraphLens
     nitf_header._NUMX
     (numt : uint 64) <- nitf_lib.UnsignedNumUInt 3
     (textlens : [nitf_header.TextLens]) <- Many[numt] nitf_header.TextLens
     (numdes : uint 64) <- nitf_lib.UnsignedNumUInt 3
     (dataextlens : [nitf_header.DataExtLens]) <- Many[numdes] nitf_header.DataExtLens
     (numres : uint 64) <- nitf_lib.UnsignedNumUInt 3
     (resextlens : [nitf_header.ResExtLens]) <- Many[numres] nitf_header.ResExtLens
     (lre : [[[uint 8]]]) <- Many[numres] do (_1263 : [uint 8]) <- nitf_header.LRESH
                                             (_1264 : [uint 8]) <- nitf_header.LRE
                                             pure [_1263,
                                                   _1264]
     (udhd : nitf_header.UserData) <- nitf_header.UserData
     (xhd : nitf_header.UserData) <- nitf_header.UserData
     pure {fver = fver,
           clevel = clevel,
           ostaid = ostaid,
           fdt = fdt,
           ftitle = ftitle,
           fsclas = fsclas,
           fsclsy = fsclsy,
           fscode = fscode,
           fsctlh = fsctlh,
           fsrel = fsrel,
           fs_declass = fs_declass,
           fsc_auth = fsc_auth,
           fscrsn = fscrsn,
           fssrdt = fssrdt,
           fsctln = fsctln,
           fscop = fscop,
           fscpys = fscpys,
           encryp = encryp,
           fbkgc = fbkgc,
           oname = oname,
           ophone = ophone,
           fl = fl,
           hl = hl,
           numi = numi,
           li = li,
           nums = nums,
           graphlens = graphlens,
           textlens = textlens,
           dataextlens = dataextlens,
           resextlens = resextlens,
           lre = lre,
           udhd = udhd,
           xhd = xhd}
 
nitf_header._CallMeMaybe ?a1 (_P : Grammar {}) : Grammar {} =
  _P
 
nitf_header._FVER : Grammar {} =
  @MatchBytes "02.10"
 
nitf_header._CLEVEL : Grammar {} =
  do (l : int) <- nitf_lib.UnsignedNum 2
     nitf_lib._Guard (l != 0)
 
nitf_header._OSTAID : Grammar {} =
  Choose biased
    { do @MatchBytes "0000000000"
         nitf_lib._MyFail [uint 8]
    | @Many[10] nitf_lib._BCSA
    }
 
nitf_header._FDT : Grammar {} =
  nitf_lib._DateTime
 
nitf_header._FTITLE : Grammar {} =
  @Many[80] nitf_lib._ECSA
 
nitf_header._FSCLAS : Grammar {} =
  @Match (((({'T'} | {'S'}) | {'C'}) | {'R'}) | {'U'})
 
nitf_header._Digraph : Grammar {} =
  @Many[ 1 .. ] @Match ('A' .. 'Z')
 
nitf_header._FSCLSY : Grammar {} =
  Choose fair
    { nitf_header._Digraph
    | @MatchBytes "  "
    }
 
nitf_header._DigraphSeq : Grammar {} =
  Choose biased
    { do nitf_header._Digraph
         @Many[] do @Match {' '}
                    nitf_header._Digraph
         @Many[] @Match {' '}
         END
    | do @Many[] @Match {' '}
         END
    }
 
nitf_header._FSCODE : Grammar {} =
  nitf_lib._Chunk (Maybe [[uint 8]]) 11 nitf_header._DigraphSeq
 
nitf_header._FSCTLH : Grammar {} =
  Choose fair
    { nitf_header._Digraph
    | @MatchBytes "  "
    }
 
nitf_header._FSREL : Grammar {} =
  nitf_lib._Chunk (Maybe [[uint 8]]) 20 nitf_header._DigraphSeq
 
nitf_header._FSDCTP : Grammar {} =
  Choose fair
    { {- dd -} @MatchBytes "DD"
    | {- de -} @MatchBytes "DE"
    | {- gd -} @MatchBytes "GD"
    | {- ge -} @MatchBytes "GE"
    | {- o -} @MatchBytes "O "
    | {- x -} @MatchBytes "X "
    | {- none -} @MatchBytes "  "
    }
 
nitf_header._Date2 : Grammar {} =
  @Many[8] nitf_lib._ECSA
 
nitf_header._FSDCXM : Grammar {} =
  Choose fair
    { Choose fair
        { do @Match {' '}
             @Match {' '}
             @Match {'X'}
             @Match ('1' .. '8')
        | do @Match {'X'}
             @Match ('1' .. '8')
             @Match {' '}
             @Match {' '}
        }
    | do @Match {'X'}
         @Match {'2'}
         @Match {'5'}
         @Match ('1' .. '9')
    }
 
nitf_header._FSDG : Grammar {} =
  @Match (({'S'} | {'C'}) | {'R'})
 
nitf_header._FSDGDT : Grammar {} =
  @Many[8] nitf_lib._ECSA
 
nitf_header._FSCLTX : Grammar {} =
  @Many[43] nitf_lib._ECSA
 
nitf_header._FS_declass : Grammar {} =
  do (declass_type : nitf_header.FSDCTP) <- nitf_header.FSDCTP
     Choose biased
       { do case declass_type is
              { {| dd = _1236 |} -> pure {}
              }
            nitf_header._CallMeMaybe [uint 8] nitf_header._Date2
       | @Many[8] @Match {' '}
       }
     Choose biased
       { do case declass_type is
              { {| x = _1239 |} -> pure {}
              }
            nitf_header._FSDCXM
       | @Many[4] @Match {' '}
       }
     Choose biased
       { do Choose fair
              { case declass_type is
                  { {| gd = _1242 |} -> pure {}
                  }
              | case declass_type is
                  { {| ge = _1243 |} -> pure {}
                  }
              }
            nitf_header._FSDG
       | @Match {' '}
       }
     Choose biased
       { do case declass_type is
              { {| gd = _1246 |} -> pure {}
              }
            nitf_header._Date2
       | @Many[8] @Match {' '}
       }
     Choose biased
       { do Choose fair
              { case declass_type is
                  { {| de = _1249 |} -> pure {}
                  }
              | case declass_type is
                  { {| ge = _1250 |} -> pure {}
                  }
              }
            nitf_header._CallMeMaybe {} (@Many[43] nitf_lib._ECSA)
       | @Many[43] @Match {' '}
       }
 
nitf_header._FSC_auth : Grammar {} =
  Choose biased
    { nitf_header._CallMeMaybe nitf_header.FSC_auth0 do @Match (({'O'}
                                                                 | {'D'})
                                                                | {'M'})
                                                        @Many[40] nitf_lib._ECSA
    | do @Match {' '}
         @Many[40] nitf_lib._ECSA
    }
 
nitf_header._FSCRSN : Grammar {} =
  @Match (('A' .. 'G') | {' '})
 
nitf_header._FSSRDT : Grammar {} =
  @Many[8] nitf_lib._ECSA
 
nitf_header._FSCTLN : Grammar {} =
  @Many[15] nitf_lib._ECSA
 
nitf_header._FSCOP : Grammar {} =
  @Many[5] nitf_lib._BCSN
 
nitf_header._FSCPYS : Grammar {} =
  @Many[5] nitf_lib._BCSN
 
nitf_header._ENCRYP : Grammar {} =
  nitf_lib._BCSN
 
nitf_header._FBKGC : Grammar {} =
  Choose biased
    { {- nonstandard_utf8 -} @Many[3] @MatchBytes [239,
                                                   191,
                                                   189]
    | {- normal -} @Many[3] @Match (0 .. 255)
    }
 
nitf_header._ONAME : Grammar {} =
  @Many[24] nitf_lib._ECSA
 
nitf_header._OPHONE : Grammar {} =
  @Many[18] nitf_lib._ECSA
 
nitf_header._FL : Grammar {} =
  Choose biased
    { {- unknown_length -} @Many[12] @Match {'9'}
    | {- file_length -} nitf_lib._UnsignedNum 12
    }
 
nitf_header._HL : Grammar {} =
  nitf_lib._UnsignedNum 6
 
nitf_header._ImgLens : Grammar {} =
  do nitf_lib._BoundedNum 6 439 999998
     nitf_lib._BoundedPos 10 9999999999
 
nitf_header._GraphLens : Grammar {} =
  do nitf_lib._BoundedNum 4 258 9999
     nitf_lib._BoundedPos 6 999999
 
nitf_header._LTSH : Grammar {} =
  @Many[4] nitf_lib._BCSN
 
nitf_header._LT : Grammar {} =
  @Many[5] nitf_lib._BCSN
 
nitf_header._TextLens : Grammar {} =
  do nitf_lib._BoundedNum 4 282 9999
     nitf_lib._BoundedPos 5 999999
 
nitf_header._DataExtLens : Grammar {} =
  do nitf_lib._BoundedNum 4 200 9999
     nitf_lib._BoundedPos 9 999999999
 
nitf_header._LRESH : Grammar {} =
  @Many[4] nitf_lib._BCSN
 
nitf_header._LRE : Grammar {} =
  @Many[7] nitf_lib._BCSN
 
nitf_header._ResExtLens : Grammar {} =
  do nitf_lib._BoundedNum 4 200 9999
     nitf_lib._BoundedPos 7 9999999
 
nitf_header._UDHDL : Grammar {} =
  @Many[5] nitf_lib._BCSN
 
nitf_header._UserData : Grammar {} =
  Choose biased
    { {- none -} @MatchBytes "00000"
    | {- udhd -} do (l : uint 64) <- nitf_lib.UnsignedNumUInt 5
                    @Many[3] nitf_lib._BCSN
                    @Many[l - 3] @GetByte
    }
 
nitf_header._Header : Grammar {} =
  do nitf_header._FHDR
     nitf_header._FVER
     nitf_header._CLEVEL
     nitf_header._STYPE
     nitf_header._OSTAID
     (fdt : nitf_lib.DateTime) <- nitf_header.FDT
     (ep : nitf_lib.Date) <- nitf_lib.Epoch
     nitf_lib._OrdDate ep (fdt.date)
     (today : nitf_lib.Date) <- nitf_lib.Today
     nitf_lib._OrdDate (fdt.date) today
     nitf_header._FTITLE
     nitf_header._FSCLAS
     nitf_header._FSCLSY
     nitf_header._FSCODE
     nitf_header._FSCTLH
     nitf_header._FSREL
     nitf_header._FS_declass
     nitf_header._FSC_auth
     nitf_header._FSCRSN
     nitf_header._FSSRDT
     nitf_header._FSCTLN
     nitf_header._FSCOP
     nitf_header._FSCPYS
     nitf_header._ENCRYP
     nitf_header._FBKGC
     nitf_header._ONAME
     nitf_header._OPHONE
     nitf_header._FL
     nitf_header._HL
     (numi : uint 64) <- nitf_lib.UnsignedNumUInt 3
     @Many[numi] nitf_header._ImgLens
     (nums : uint 64) <- nitf_lib.UnsignedNumUInt 3
     @Many[nums] nitf_header._GraphLens
     nitf_header._NUMX
     (numt : uint 64) <- nitf_lib.UnsignedNumUInt 3
     @Many[numt] nitf_header._TextLens
     (numdes : uint 64) <- nitf_lib.UnsignedNumUInt 3
     @Many[numdes] nitf_header._DataExtLens
     (numres : uint 64) <- nitf_lib.UnsignedNumUInt 3
     @Many[numres] nitf_header._ResExtLens
     @Many[numres] do nitf_header._LRESH
                      nitf_header._LRE
     nitf_header._UserData
     nitf_header._UserData
module nitf_main
 
--- Imports:
import nitf_res_ext_subheader
import nitf_data_ext_subheader
import nitf_text_subheader
import nitf_graphic_subheader
import nitf_img_subheader
import nitf_header
import nitf_lib
 
--- Type defs:
type nitf_main.Main0 = { imgHeader: nitf_img_subheader.ISHeader
                       }
 
type nitf_main.Main1 = { graphHeader: nitf_graphic_subheader.GraphicHeader
                       ; graphData: [uint 8]
                       }
 
type nitf_main.Main2 = { txtHeader: nitf_text_subheader.TextHeader
                       ; txtData: [uint 8]
                       }
 
type nitf_main.Main3 = { dataExtHeader: nitf_data_ext_subheader.DataExtHeader
                       ; dataExtData: [uint 8]
                       }
 
type nitf_main.Main4 = { resExtHeader: nitf_res_ext_subheader.ResExtHeader
                       ; resExtData: [uint 8]
                       }
 
type nitf_main.Main = { h: nitf_header.Header
                      ; img_segments: [nitf_main.Main0]
                      ; graph_segments: [nitf_main.Main1]
                      ; txt_segments: [nitf_main.Main2]
                      ; dataExt_segments: [nitf_main.Main3]
                      ; reservedExt_segments: [nitf_main.Main4]
                      }
 
--- Rules:
 
nitf_main.CheckDateTime (fdt : nitf_lib.PartialDateTime) (dt : nitf_lib.PartialDateTime) : Grammar {} =
  do (ep : nitf_lib.Date) <- nitf_lib.Epoch
     (lep : nitf_lib.PartialDate) <- nitf_lib.LiftDate ep
     nitf_lib._PartialOrdDate lep (dt.partDate)
     (today : nitf_lib.Date) <- nitf_lib.Today
     (ltoday : nitf_lib.PartialDate) <- nitf_lib.LiftDate today
     nitf_lib._PartialOrdDate (dt.partDate) ltoday
     nitf_lib._PartialOrdDateTime dt fdt
 
nitf_main._CheckDateTime (fdt : nitf_lib.PartialDateTime) (dt : nitf_lib.PartialDateTime) : Grammar {} =
  do (ep : nitf_lib.Date) <- nitf_lib.Epoch
     (lep : nitf_lib.PartialDate) <- nitf_lib.LiftDate ep
     nitf_lib._PartialOrdDate lep (dt.partDate)
     (today : nitf_lib.Date) <- nitf_lib.Today
     (ltoday : nitf_lib.PartialDate) <- nitf_lib.LiftDate today
     nitf_lib._PartialOrdDate (dt.partDate) ltoday
     nitf_lib._PartialOrdDateTime dt fdt
 
nitf_main.Main : Grammar nitf_main.Main =
  do (h : nitf_header.Header) <- nitf_header.Header
     (ldt : nitf_lib.PartialDateTime) <- nitf_lib.LiftDateTime (h.fdt)
     (img_segments : [nitf_main.Main0]) <- map ((imglens : nitf_header.ImgLens) in h.li)
                                             do (imgHeader : nitf_img_subheader.ISHeader) <- nitf_img_subheader.ISHeader
                                                nitf_main._CheckDateTime ldt (imgHeader.idatim)
                                                pure {imgHeader = imgHeader}
     (graph_segments : [nitf_main.Main1]) <- map ((gls : nitf_header.GraphLens) in h.graphlens)
                                               do (graphHeader : nitf_graphic_subheader.GraphicHeader) <- nitf_graphic_subheader.GraphicHeader
                                                  (graphData : [uint 8]) <- Many[gls.seglen] nitf_lib.Byte
                                                  pure {graphHeader = graphHeader,
                                                        graphData = graphData}
     (txt_segments : [nitf_main.Main2]) <- map ((textls : nitf_header.TextLens) in h.textlens)
                                             do (txtHeader : nitf_text_subheader.TextHeader) <- nitf_text_subheader.TextHeader
                                                nitf_main._CheckDateTime ldt (txtHeader.txtdt)
                                                (txtData : [uint 8]) <- Many[textls.lt] nitf_lib.Byte
                                                pure {txtHeader = txtHeader,
                                                      txtData = txtData}
     (dataExt_segments : [nitf_main.Main3]) <- map ((dataextls : nitf_header.DataExtLens) in h.dataextlens)
                                                 do (dataExtHeader : nitf_data_ext_subheader.DataExtHeader) <- nitf_data_ext_subheader.DataExtHeader
                                                    (dataExtData : [uint 8]) <- Many[dataextls.ld] nitf_lib.Byte
                                                    pure {dataExtHeader = dataExtHeader,
                                                          dataExtData = dataExtData}
     (reservedExt_segments : [nitf_main.Main4]) <- map ((resextls : nitf_header.ResExtLens) in h.resextlens)
                                                     do (resExtHeader : nitf_res_ext_subheader.ResExtHeader) <- nitf_res_ext_subheader.ResExtHeader
                                                        (resExtData : [uint 8]) <- Many[resextls.lre] nitf_lib.Byte
                                                        pure {resExtHeader = resExtHeader,
                                                              resExtData = resExtData}
     pure {h = h,
           img_segments = img_segments,
           graph_segments = graph_segments,
           txt_segments = txt_segments,
           dataExt_segments = dataExt_segments,
           reservedExt_segments = reservedExt_segments}
 
nitf_main._Main : Grammar {} =
  do (h : nitf_header.Header) <- nitf_header.Header
     (ldt : nitf_lib.PartialDateTime) <- nitf_lib.LiftDateTime (h.fdt)
     map ((imglens : nitf_header.ImgLens) in h.li)
       do (imgHeader : nitf_img_subheader.ISHeader) <- nitf_img_subheader.ISHeader
          nitf_main._CheckDateTime ldt (imgHeader.idatim)
          pure {imgHeader = imgHeader}
     map ((gls : nitf_header.GraphLens) in h.graphlens)
       do (graphHeader : nitf_graphic_subheader.GraphicHeader) <- nitf_graphic_subheader.GraphicHeader
          (graphData : [uint 8]) <- Many[gls.seglen] nitf_lib.Byte
          pure {graphHeader = graphHeader,
                graphData = graphData}
     map ((textls : nitf_header.TextLens) in h.textlens)
       do (txtHeader : nitf_text_subheader.TextHeader) <- nitf_text_subheader.TextHeader
          nitf_main._CheckDateTime ldt (txtHeader.txtdt)
          (txtData : [uint 8]) <- Many[textls.lt] nitf_lib.Byte
          pure {txtHeader = txtHeader,
                txtData = txtData}
     map ((dataextls : nitf_header.DataExtLens) in h.dataextlens)
       do (dataExtHeader : nitf_data_ext_subheader.DataExtHeader) <- nitf_data_ext_subheader.DataExtHeader
          (dataExtData : [uint 8]) <- Many[dataextls.ld] nitf_lib.Byte
          pure {dataExtHeader = dataExtHeader,
                dataExtData = dataExtData}
     map ((resextls : nitf_header.ResExtLens) in h.resextlens)
       do (resExtHeader : nitf_res_ext_subheader.ResExtHeader) <- nitf_res_ext_subheader.ResExtHeader
          (resExtData : [uint 8]) <- Many[resextls.lre] nitf_lib.Byte
          pure {resExtHeader = resExtHeader,
                resExtData = resExtData}
     pure {}
