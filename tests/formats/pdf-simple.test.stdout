module PdfValue
 
--- Imports:
 
--- Type defs:
type PdfValue.Number = { num: int
                       ; exp: int
                       }
 
type PdfValue.Ref = { obj: int
                    ; gen: int
                    }
 
rec
  type PdfValue.Value = Choose { array: [PdfValue.Value]
                               ; bool: bool
                               ; dict: Map [uint 8] PdfValue.Value
                               ; name: [uint 8]
                               ; null: {}
                               ; number: PdfValue.Number
                               ; ref: PdfValue.Ref
                               ; string: [uint 8]
                               }
 
type PdfValue.Dict0 = { key: [uint 8]
                      ; value: PdfValue.Value
                      }
 
type PdfValue.Sign = Choose { pos: {}
                            ; neg: {}
                            }
 
--- Rules:
 
PdfValue.$lf : ByteClass =
  {10}
 
PdfValue.$cr : ByteClass =
  {13}
 
PdfValue.$simpleWS : ByteClass =
  (({0} | {9}) | {12}) | {32}
 
PdfValue.SimpleEOL : Grammar (uint 8) =
  Choose biased
    { do @Match PdfValue.$cr
         ($$ : uint 8) <- Match PdfValue.$lf
         pure $$
    | Match PdfValue.$lf
    }
 
PdfValue.EOL : Grammar (uint 8) =
  Choose biased
    { PdfValue.SimpleEOL
    | Match PdfValue.$cr
    }
 
PdfValue.Comment : Grammar (uint 8) =
  do @MatchBytes "%"
     @Many[] @Match (!(PdfValue.$lf | PdfValue.$cr))
     ($$ : uint 8) <- PdfValue.EOL
     pure $$
 
PdfValue.AnyWS : Grammar (uint 8) =
  Choose biased
    { Choose biased
        { Match PdfValue.$simpleWS
        | PdfValue.Comment
        }
    | PdfValue.EOL
    }
 
PdfValue.SimpleEOL_219 : Grammar {} =
  Choose biased
    { do @Match PdfValue.$cr
         @Match PdfValue.$lf
    | @Match PdfValue.$lf
    }
 
PdfValue.EOL_220 : Grammar {} =
  Choose biased
    { PdfValue.SimpleEOL_219
    | @Match PdfValue.$cr
    }
 
PdfValue.Comment_221 : Grammar {} =
  do @MatchBytes "%"
     @Many[] @Match (!(PdfValue.$lf | PdfValue.$cr))
     PdfValue.EOL_220
 
PdfValue.AnyWS_222 : Grammar {} =
  Choose biased
    { Choose biased
        { @Match PdfValue.$simpleWS
        | PdfValue.Comment_221
        }
    | PdfValue.EOL_220
    }
 
PdfValue.Token ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do ($$ : ?a0) <- P
     @Many[] PdfValue.AnyWS_222
     pure $$
 
PdfValue.Token_223 ?a0 (P : Grammar {}) : Grammar {} =
  do P
     @Many[] PdfValue.AnyWS_222
 
PdfValue.KW (x : [uint 8]) : Grammar {} =
  PdfValue.Token_223 [uint 8] (@MatchBytes x)
 
PdfValue.KW_226 (x : [uint 8]) : Grammar {} =
  PdfValue.Token_223 [uint 8] (@MatchBytes x)
 
PdfValue.Between ?a0 (open : [uint 8]) (close : [uint 8]) (P : Grammar ?a0) : Grammar ?a0 =
  do PdfValue.KW_226 open
     ($$ : ?a0) <- P
     PdfValue.KW_226 close
     pure $$
 
PdfValue.numBase ?a0 ?a1 ?a2 (Literal 0 ?a2) (HasKey ?a0 ?a1) (HasElement ?a0 ?a2) (Traversable ?a0) (Arith ?a2) (base : ?a2) (ds : ?a0) : ?a2 =
  for ((val : ?a2) = 0; (d : ?a2) in ds)
    ((val * base) + d)
 
PdfValue.Only ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do ($$ : ?a0) <- P
     END
     pure $$
 
PdfValue.When ?a0 ?a1 (P : Grammar ?a1) (x : ?a0) : Grammar ?a0 =
  do do P
        pure {}
     ($$ : ?a0) <- pure x
     pure $$
 
PdfValue.Guard (p : bool) : Grammar {} =
  case p is
    { true -> pure {}
    }
 
PdfValue.Bool : Grammar bool =
  Choose biased
    { PdfValue.When bool {} (PdfValue.KW "true") true
    | PdfValue.When bool {} (PdfValue.KW "false") false
    }
 
PdfValue.Sign : Grammar PdfValue.Sign =
  Choose biased
    { {- neg -} do (_154 : {}) <- @MatchBytes "-"
                   pure {neg: _154}
    | {- pos -} do (_155 : {}) <- @MatchBytes "+"
                   pure {pos: _155}
    | {- pos -} do (_156 : {}) <- pure {}
                   pure {pos: _156}
    }
 
PdfValue.Digit : Grammar int =
  do (_158 : uint 8) <- do (_157 : uint 8) <- Match ('0' .. '9')
                           pure (_157 - '0')
     pure (_158 as int)
 
PdfValue.Natural : Grammar int =
  do (_159 : [int]) <- Many[ 1 .. ] PdfValue.Digit
     pure (PdfValue.numBase [int] (uint 64) int 10 _159)
 
PdfValue.Frac (n : uint 64) (w : PdfValue.Number) : Grammar PdfValue.Number =
  do @MatchBytes "."
     (ds : [int]) <- Many[ n .. ] PdfValue.Digit
     ($$ : PdfValue.Number) <- pure (for ((val : PdfValue.Number) = w; (d : int) in ds)
                                       let num = (10 * (val.num)) + d in
                                       let exp = (val.exp) - 1 in
                                       {num = num,
                                        exp = exp})
     pure $$
 
PdfValue.UnsignedLeadDigits : Grammar PdfValue.Number =
  do (n : int) <- PdfValue.Natural
     (val : PdfValue.Number) <- pure let num = n in
                                     let exp = 0 in
                                     {num = num,
                                      exp = exp}
     ($$ : PdfValue.Number) <- Choose biased
                                 { PdfValue.Frac 0 val
                                 | pure val
                                 }
     pure $$
 
PdfValue.UnsignedNumber : Grammar PdfValue.Number =
  Choose biased
    { PdfValue.UnsignedLeadDigits
    | PdfValue.Frac 1 let num = 0 in
                      let exp = 0 in
                      {num = num,
                       exp = exp}
    }
 
PdfValue.Number : Grammar PdfValue.Number =
  PdfValue.Token PdfValue.Number do (sign : PdfValue.Sign) <- PdfValue.Sign
                                    (n : PdfValue.Number) <- PdfValue.UnsignedNumber
                                    ($$ : PdfValue.Number) <- case sign is
                                                                { {| pos = _ |} -> {- case branch  {| pos = _ |} -} pure n
                                                                ; {| neg = _ |} -> {- case branch  {| neg = _ |} -} do (num : int) <- pure (0 - (n.num))
                                                                                                                       (exp : int) <- pure (n.exp)
                                                                                                                       pure {num = num,
                                                                                                                             exp = exp}
                                                                }
                                    pure $$
 
PdfValue.OctDigit : Grammar int =
  do (_164 : uint 8) <- do (_163 : uint 8) <- Match ('0' .. '7')
                           pure (_163 - '0')
     pure (_164 as int)
 
PdfValue.HexDigit : Grammar int =
  Choose biased
    { PdfValue.Digit
    | Choose biased
        { do (_167 : uint 8) <- do (_166 : uint 8) <- do (_165 : uint 8) <- Match ('a' .. 'f')
                                                         pure (10 + _165)
                                   pure (_166 - 'a')
             pure (_167 as int)
        | do (_170 : uint 8) <- do (_169 : uint 8) <- do (_168 : uint 8) <- Match ('A' .. 'F')
                                                         pure (10 + _168)
                                   pure (_169 - 'A')
             pure (_170 as int)
        }
    }
 
PdfValue.Guard_239 (p : bool) : Grammar {} =
  case p is
    { true -> pure {}
    }
 
PdfValue.NumberAsNat (x : PdfValue.Number) : Grammar int =
  do PdfValue.Guard_239 (if (0 <= (x.num)) then (x.exp) == 0 else false)
     ($$ : int) <- pure (x.num)
     pure $$
 
PdfValue.StringNumEsc : Grammar [uint 8] =
  do (_174 : uint 8) <- do (_173 : int) <- do (_172 : [int]) <- Many[ 1 .. 3 ] PdfValue.OctDigit
                                              pure (PdfValue.numBase [int] (uint 64) int 8 _172)
                           pure (_173 as uint 8)
     pure [_174]
 
PdfValue.StringEsc : Grammar [uint 8] =
  do @MatchBytes "\\"
     ($$ : [uint 8]) <- Choose biased
                          { PdfValue.When [uint 8] [uint 8] (MatchBytes "n") "\n"
                          | Choose biased
                              { PdfValue.When [uint 8] [uint 8] (MatchBytes "r") "\r"
                              | Choose biased
                                  { PdfValue.When [uint 8] [uint 8] (MatchBytes "t") "\t"
                                  | Choose biased
                                      { PdfValue.When [uint 8] [uint 8] (MatchBytes "b") "\b"
                                      | Choose biased
                                          { PdfValue.When [uint 8] [uint 8] (MatchBytes "f") "\f"
                                          | Choose biased
                                              { PdfValue.When [uint 8] [uint 8] (MatchBytes "(") "("
                                              | Choose biased
                                                  { PdfValue.When [uint 8] [uint 8] (MatchBytes ")") ")"
                                                  | Choose biased
                                                      { PdfValue.When [uint 8] [uint 8] (MatchBytes "\\") "\\"
                                                      | Choose biased
                                                          { PdfValue.When [uint 8] (uint 8) PdfValue.EOL ""
                                                          | PdfValue.StringNumEsc
                                                          }
                                                      }
                                                  }
                                              }
                                          }
                                      }
                                  }
                              }
                          }
     pure $$
 
rec value
  PdfValue.StringChars (lim : uint 64) : Grammar [uint 8] =
    do (_176 : [[uint 8]]) <- Many[] PdfValue.StringChunk lim
       pure (concat _176)
   
  PdfValue.StringInParens (lim : uint 64) : Grammar [uint 8] =
    if (lim == 0) then Fail "String nesting limit exceeded" else do (_180 : [[uint 8]]) <- do (_177 : [uint 8]) <- MatchBytes "("
                                                                                              (_178 : [uint 8]) <- PdfValue.StringChars (lim - 1)
                                                                                              (_179 : [uint 8]) <- MatchBytes ")"
                                                                                              pure [_177,
                                                                                                    _178,
                                                                                                    _179]
                                                                    pure (concat _180)
   
  PdfValue.StringChunk (lim : uint 64) : Grammar [uint 8] =
    Choose biased
      { Choose biased
          { PdfValue.StringInParens lim
          | PdfValue.StringEsc
          }
      | Many[ 1 .. ] Match (!"\\()")
      }
 
PdfValue.String : Grammar [uint 8] =
  do @Match {'('}
     ($$ : [uint 8]) <- PdfValue.StringChars 16
     @Match {')'}
     @Many[] PdfValue.AnyWS_222
     pure $$
 
PdfValue.HexStringNum2 : Grammar (uint 8) =
  do (_182 : int) <- do (_181 : [int]) <- Many[2] PdfValue.Token int PdfValue.HexDigit
                        pure (PdfValue.numBase [int] (uint 64) int 16 _181)
     pure (_182 as uint 8)
 
PdfValue.HexStringNum1 : Grammar (uint 8) =
  do (_184 : int) <- do (_183 : int) <- PdfValue.Token int PdfValue.HexDigit
                        pure (16 * _183)
     pure (_184 as uint 8)
 
PdfValue.HexString : Grammar [uint 8] =
  PdfValue.Between [uint 8] "<" ">" do (front : [uint 8]) <- Many[] PdfValue.HexStringNum2
                                       ($$ : [uint 8]) <- Choose biased
                                                            { do (_188 : [[uint 8]]) <- do (_187 : [uint 8]) <- do (_186 : uint 8) <- PdfValue.HexStringNum1
                                                                                                                   pure [_186]
                                                                                           pure [front,
                                                                                                 _187]
                                                                 pure (concat _188)
                                                            | pure front
                                                            }
                                       pure $$
 
PdfValue.NameEsc : Grammar (uint 8) =
  do @MatchBytes "#"
     ($$ : uint 8) <- do (_190 : int) <- do (_189 : [int]) <- Many[2] PdfValue.HexDigit
                                            pure (PdfValue.numBase [int] (uint 64) int 16 _189)
                         pure (_190 as uint 8)
     PdfValue.Guard_239 (0 < $$)
     pure $$
 
PdfValue.NameChar : Grammar (uint 8) =
  Choose biased
    { Match (!"\NUL\t\n\f\r ()<>[]{}/%#")
    | PdfValue.NameEsc
    }
 
PdfValue.Name : Grammar [uint 8] =
  PdfValue.Token [uint 8] do @MatchBytes "/"
                             ($$ : [uint 8]) <- Many[] PdfValue.NameChar
                             pure $$
 
PdfValue.Null : Grammar {} =
  PdfValue.KW "null"
 
PdfValue.Ref : Grammar PdfValue.Ref =
  do (obj : int) <- PdfValue.Token int PdfValue.Natural
     (gen : int) <- PdfValue.Token int PdfValue.Natural
     PdfValue.KW_226 "R"
     pure {obj = obj,
           gen = gen}
 
rec value
  PdfValue.Array (lim : uint 64) : Grammar [PdfValue.Value] =
    PdfValue.Between [PdfValue.Value] "[" "]" (Many[] PdfValue.Value lim)
   
  PdfValue.Dict (lim : uint 64) : Grammar (Map [uint 8] PdfValue.Value) =
    do (ents : [PdfValue.Dict0]) <- PdfValue.Between [PdfValue.Dict0] "<<" ">>" (Many[] do (key : [uint 8]) <- PdfValue.Name
                                                                                           (value : PdfValue.Value) <- PdfValue.Value lim
                                                                                           pure {key = key,
                                                                                                 value = value})
       ($$ : Map [uint 8] PdfValue.Value) <- for ((d : Map [uint 8] PdfValue.Value) = empty; (e : PdfValue.Dict0) in ents)
                                               (Insert (e.key) (e.value) d)
       pure $$
   
  PdfValue.Value (lim : uint 64) : Grammar PdfValue.Value =
    if (lim == 0) then Fail "Exceeded value nesting depth" else Choose biased
                                                                  { {- null -} do (_193 : {}) <- PdfValue.Null
                                                                                  pure {null: _193}
                                                                  | {- bool -} do (_194 : bool) <- PdfValue.Bool
                                                                                  pure {bool: _194}
                                                                  | {- ref -} do (_195 : PdfValue.Ref) <- PdfValue.Ref
                                                                                 pure {ref: _195}
                                                                  | {- name -} do (_196 : [uint 8]) <- PdfValue.Name
                                                                                  pure {name: _196}
                                                                  | {- string -} do (_197 : [uint 8]) <- PdfValue.String
                                                                                    pure {string: _197}
                                                                  | {- string -} do (_198 : [uint 8]) <- PdfValue.HexString
                                                                                    pure {string: _198}
                                                                  | {- number -} do (_199 : PdfValue.Number) <- PdfValue.Number
                                                                                    pure {number: _199}
                                                                  | {- array -} do (_200 : [PdfValue.Value]) <- PdfValue.Array (lim - 1)
                                                                                   pure {array: _200}
                                                                  | {- dict -} do (_201 : Map [uint 8] PdfValue.Value) <- PdfValue.Dict (lim - 1)
                                                                                  pure {dict: _201}
                                                                  }
 
PdfValue.PdfDict : Grammar (Map [uint 8] PdfValue.Value) =
  PdfValue.Dict 32
 
PdfValue.PdfValue : Grammar PdfValue.Value =
  PdfValue.Value 32
 
PdfValue.NatValue (v : PdfValue.Value) : Grammar int =
  do (n : PdfValue.Number) <- case v is
                                { {| number = _202 |} -> pure _202
                                }
     ($$ : int) <- PdfValue.NumberAsNat n
     pure $$
 
PdfValue.nullValue : PdfValue.Value =
  {null: {}}
 
PdfValue.Between_228 ?a0 (open : [uint 8]) (close : [uint 8]) (P : Grammar {}) : Grammar {} =
  do PdfValue.KW_226 open
     P
     PdfValue.KW_226 close
 
PdfValue.Only_233 ?a0 (P : Grammar {}) : Grammar {} =
  do P
     END
 
PdfValue.When_236 ?a0 ?a1 (P : Grammar {}) : Grammar {} =
  P
 
PdfValue.Bool_241 : Grammar {} =
  Choose biased
    { PdfValue.When_236 bool {} (PdfValue.KW_226 "true")
    | PdfValue.When_236 bool {} (PdfValue.KW_226 "false")
    }
 
PdfValue.Sign_242 : Grammar {} =
  Choose biased
    { {- neg -} @MatchBytes "-"
    | {- pos -} @MatchBytes "+"
    | {- pos -} pure {}
    }
 
PdfValue.Digit_243 : Grammar {} =
  @Match ('0' .. '9')
 
PdfValue.Natural_244 : Grammar {} =
  @Many[ 1 .. ] PdfValue.Digit_243
 
PdfValue.Number_245 : Grammar {} =
  PdfValue.Token_223 PdfValue.Number do (sign : PdfValue.Sign) <- PdfValue.Sign
                                        do PdfValue.UnsignedNumber
                                           pure {}
                                        case sign is
                                          { {| pos = _ |} -> {- case branch  {| pos = _ |} -} pure {}
                                          ; {| neg = _ |} -> {- case branch  {| neg = _ |} -} pure {}
                                          }
 
PdfValue.Frac_247 (n : uint 64) : Grammar {} =
  do @MatchBytes "."
     @Many[ n .. ] PdfValue.Digit_243
 
PdfValue.UnsignedLeadDigits_249 : Grammar {} =
  do PdfValue.Natural_244
     Choose biased
       { PdfValue.Frac_247 0
       | pure {}
       }
 
PdfValue.UnsignedNumber_250 : Grammar {} =
  Choose biased
    { PdfValue.UnsignedLeadDigits_249
    | PdfValue.Frac_247 1
    }
 
PdfValue.OctDigit_251 : Grammar {} =
  @Match ('0' .. '7')
 
PdfValue.HexDigit_252 : Grammar {} =
  Choose biased
    { PdfValue.Digit_243
    | Choose biased
        { @Match ('a' .. 'f')
        | @Match ('A' .. 'F')
        }
    }
 
PdfValue.NumberAsNat_253 (x : PdfValue.Number) : Grammar {} =
  PdfValue.Guard_239 (if (0 <= (x.num)) then (x.exp) == 0 else false)
 
PdfValue.StringNumEsc_255 : Grammar {} =
  @Many[ 1 .. 3 ] PdfValue.OctDigit_251
 
PdfValue.StringEsc_256 : Grammar {} =
  do @MatchBytes "\\"
     Choose biased
       { PdfValue.When_236 [uint 8] [uint 8] (@MatchBytes "n")
       | Choose biased
           { PdfValue.When_236 [uint 8] [uint 8] (@MatchBytes "r")
           | Choose biased
               { PdfValue.When_236 [uint 8] [uint 8] (@MatchBytes "t")
               | Choose biased
                   { PdfValue.When_236 [uint 8] [uint 8] (@MatchBytes "b")
                   | Choose biased
                       { PdfValue.When_236 [uint 8] [uint 8] (@MatchBytes "f")
                       | Choose biased
                           { PdfValue.When_236 [uint 8] [uint 8] (@MatchBytes "(")
                           | Choose biased
                               { PdfValue.When_236 [uint 8] [uint 8] (@MatchBytes ")")
                               | Choose biased
                                   { PdfValue.When_236 [uint 8] [uint 8] (@MatchBytes "\\")
                                   | Choose biased
                                       { PdfValue.When_236 [uint 8] (uint 8) PdfValue.EOL_220
                                       | PdfValue.StringNumEsc_255
                                       }
                                   }
                               }
                           }
                       }
                   }
               }
           }
       }
 
PdfValue.StringChars_257 (lim : uint 64) : Grammar {} =
  @Many[] do PdfValue.StringChunk lim
             pure {}
 
PdfValue.StringInParens_259 (lim : uint 64) : Grammar {} =
  if (lim == 0) then Fail "String nesting limit exceeded" else do @MatchBytes "("
                                                                  PdfValue.StringChars_257 (lim - 1)
                                                                  @MatchBytes ")"
 
PdfValue.StringChunk_261 (lim : uint 64) : Grammar {} =
  Choose biased
    { Choose biased
        { PdfValue.StringInParens_259 lim
        | PdfValue.StringEsc_256
        }
    | @Many[ 1 .. ] @Match (!"\\()")
    }
 
PdfValue.String_263 : Grammar {} =
  do @Match {'('}
     PdfValue.StringChars_257 16
     @Match {')'}
     @Many[] PdfValue.AnyWS_222
 
PdfValue.HexStringNum2_264 : Grammar {} =
  @Many[2] PdfValue.Token_223 int PdfValue.HexDigit_252
 
PdfValue.HexStringNum1_265 : Grammar {} =
  PdfValue.Token_223 int PdfValue.HexDigit_252
 
PdfValue.HexString_266 : Grammar {} =
  PdfValue.Between_228 [uint 8] "<" ">" do @Many[] PdfValue.HexStringNum2_264
                                           Choose biased
                                             { PdfValue.HexStringNum1_265
                                             | pure {}
                                             }
 
PdfValue.NameEsc_267 : Grammar {} =
  do @MatchBytes "#"
     ($$ : uint 8) <- do (_190 : int) <- do (_189 : [int]) <- Many[2] PdfValue.HexDigit
                                            pure (PdfValue.numBase [int] (uint 64) int 16 _189)
                         pure (_190 as uint 8)
     PdfValue.Guard_239 (0 < $$)
 
PdfValue.NameChar_271 : Grammar {} =
  Choose biased
    { @Match (!"\NUL\t\n\f\r ()<>[]{}/%#")
    | PdfValue.NameEsc_267
    }
 
PdfValue.Name_272 : Grammar {} =
  PdfValue.Token_223 [uint 8] do @MatchBytes "/"
                                 @Many[] PdfValue.NameChar_271
 
PdfValue.Null_273 : Grammar {} =
  PdfValue.KW_226 "null"
 
PdfValue.Ref_274 : Grammar {} =
  do PdfValue.Token_223 int PdfValue.Natural_244
     PdfValue.Token_223 int PdfValue.Natural_244
     PdfValue.KW_226 "R"
 
PdfValue.Array_275 (lim : uint 64) : Grammar {} =
  PdfValue.Between_228 [PdfValue.Value] "[" "]" (@Many[] do PdfValue.Value lim
                                                            pure {})
 
PdfValue.Dict_277 (lim : uint 64) : Grammar {} =
  do (ents : [PdfValue.Dict0]) <- PdfValue.Between [PdfValue.Dict0] "<<" ">>" (Many[] do (key : [uint 8]) <- PdfValue.Name
                                                                                         (value : PdfValue.Value) <- PdfValue.Value lim
                                                                                         pure {key = key,
                                                                                               value = value})
     for ((d : Map [uint 8] PdfValue.Value) = empty; (e : PdfValue.Dict0) in ents)
       (Insert (e.key) (e.value) d)
     pure {}
 
PdfValue.Value_284 (lim : uint 64) : Grammar {} =
  if (lim == 0) then Fail "Exceeded value nesting depth" else Choose biased
                                                                { {- null -} PdfValue.Null_273
                                                                | {- bool -} PdfValue.Bool_241
                                                                | {- ref -} PdfValue.Ref_274
                                                                | {- name -} PdfValue.Name_272
                                                                | {- string -} PdfValue.String_263
                                                                | {- string -} PdfValue.HexString_266
                                                                | {- number -} PdfValue.Number_245
                                                                | {- array -} PdfValue.Array_275 (lim - 1)
                                                                | {- dict -} PdfValue.Dict_277 (lim - 1)
                                                                }
 
PdfValue.PdfDict_286 : Grammar {} =
  PdfValue.Dict_277 32
 
PdfValue.PdfValue_287 : Grammar {} =
  PdfValue.Value_284 32
 
PdfValue.NatValue_288 (v : PdfValue.Value) : Grammar {} =
  do (n : PdfValue.Number) <- case v is
                                { {| number = _202 |} -> pure _202
                                }
     PdfValue.NumberAsNat_253 n
module Pdf
 
--- Imports:
import PdfValue
 
--- Type defs:
type Pdf.Stream = { header: Map [uint 8] PdfValue.Value
                  ; body: Stream
                  }
 
type Pdf.TopDeclDef = Choose { stream: Pdf.Stream
                             ; value: PdfValue.Value
                             }
 
type Pdf.ObjDecl = { id: int
                   ; gen: int
                   ; obj: Pdf.TopDeclDef
                   }
 
type Pdf.UsedEntry = { offset: uint 64
                     ; gen: uint 64
                     }
 
type Pdf.FreeEntry = { obj: uint 64
                     ; gen: uint 64
                     }
 
type Pdf.CrossRefEntry = Choose { inUse: Pdf.UsedEntry
                                ; free: Pdf.FreeEntry
                                }
 
type Pdf.CrossRefSubSection = { firstId: int
                              ; entries: [Pdf.CrossRefEntry]
                              }
 
type Pdf.CrossRefSection = { offset: uint 64
                           ; entries: [Pdf.CrossRefSubSection]
                           }
 
type Pdf.PdfChunk = { objects: [Pdf.ObjDecl]
                    ; xref: Pdf.CrossRefSection
                    ; trailer: Map [uint 8] PdfValue.Value
                    ; declaredStartXref: int
                    }
 
type Pdf.Main = { version: {}
                ; chunks: [Pdf.PdfChunk]
                }
 
--- Rules:
 
rec value
  Pdf.CountTo ?a0 ?a1 (Literal 1 ?a0) (Arith ?a0) (P : Grammar ?a1) (count : ?a0) : Grammar ?a0 =
    Choose biased
      { do do P
              pure {}
           ($$ : ?a0) <- pure count
           pure $$
      | do @Match UInt8
           ($$ : ?a0) <- Pdf.CountTo ?a0 ?a1 P (count + 1)
           pure $$
      }
 
Pdf.Stream (val : PdfValue.Value) : Grammar Pdf.Stream =
  do (header : Map [uint 8] PdfValue.Value) <- case val is
                                                 { {| dict = _206 |} -> pure _206
                                                 }
     @MatchBytes "stream"
     PdfValue.SimpleEOL_219
     (start : Stream) <- CurrentStream
     (len : uint 64) <- Pdf.CountTo (uint 64) {} (PdfValue.KW "endstream") 0
     (body : Stream) <- StreamLen len start
     pure {header = header,
           body = body}
 
Pdf.TopDeclDef (val : PdfValue.Value) : Grammar Pdf.TopDeclDef =
  Choose biased
    { {- stream -} do (_207 : Pdf.Stream) <- Pdf.Stream val
                      pure {stream: _207}
    | {- value -} do (_208 : PdfValue.Value) <- pure val
                     pure {value: _208}
    }
 
Pdf.ObjDecl : Grammar Pdf.ObjDecl =
  do (id : int) <- PdfValue.Token int PdfValue.Natural
     (gen : int) <- PdfValue.Token int PdfValue.Natural
     PdfValue.KW_226 "obj"
     (val : PdfValue.Value) <- PdfValue.PdfValue
     (obj : Pdf.TopDeclDef) <- Pdf.TopDeclDef val
     PdfValue.KW_226 "endobj"
     pure {id = id,
           gen = gen,
           obj = obj}
 
Pdf.Trailer : Grammar (Map [uint 8] PdfValue.Value) =
  do PdfValue.KW_226 "trailer"
     ($$ : Map [uint 8] PdfValue.Value) <- PdfValue.PdfDict
     pure $$
 
Pdf.UsedEntry (num : uint 64) (gen : uint 64) : Grammar Pdf.UsedEntry =
  do @Match {'n'}
     (offset : uint 64) <- pure num
     (gen : uint 64) <- pure gen
     pure {offset = offset,
           gen = gen}
 
Pdf.FreeEntry (num : uint 64) (gen : uint 64) : Grammar Pdf.FreeEntry =
  do @Match {'f'}
     (obj : uint 64) <- pure num
     (gen : uint 64) <- pure gen
     pure {obj = obj,
           gen = gen}
 
Pdf.NatN (n : uint 64) : Grammar (uint 64) =
  do (ds : [int]) <- Many[n] PdfValue.Digit
     ($$ : uint 64) <- PdfValue.numBase [int] (uint 64) int 10 ds AS uint 64
     pure $$
 
Pdf.CrossRefEntry : Grammar Pdf.CrossRefEntry =
  do (num : uint 64) <- Pdf.NatN 10
     @Match PdfValue.$simpleWS
     (gen : uint 64) <- Pdf.NatN 5
     @Match PdfValue.$simpleWS
     ($$ : Pdf.CrossRefEntry) <- Choose biased
                                   { {- inUse -} do (_211 : Pdf.UsedEntry) <- Pdf.UsedEntry num gen
                                                    pure {inUse: _211}
                                   | {- free -} do (_212 : Pdf.FreeEntry) <- Pdf.FreeEntry num gen
                                                   pure {free: _212}
                                   }
     Choose biased
       { do @Match PdfValue.$simpleWS
            Choose biased
              { @Match PdfValue.$cr
              | @Match PdfValue.$lf
              }
       | do @Match PdfValue.$cr
            @Match PdfValue.$lf
       }
     pure $$
 
Pdf.CrossRefSubSection : Grammar Pdf.CrossRefSubSection =
  do (firstId : int) <- PdfValue.Token int PdfValue.Natural
     (num : uint 64) <- do (_215 : int) <- PdfValue.Token int PdfValue.Natural
                           _215 AS uint 64
     (entries : [Pdf.CrossRefEntry]) <- Many[num] Pdf.CrossRefEntry
     pure {firstId = firstId,
           entries = entries}
 
Pdf.CrossRefSection : Grammar Pdf.CrossRefSection =
  do (offset : uint 64) <- Offset
     PdfValue.KW_226 "xref"
     (entries : [Pdf.CrossRefSubSection]) <- Many[ 1 .. ] Pdf.CrossRefSubSection
     pure {offset = offset,
           entries = entries}
 
Pdf.PdfChunk : Grammar Pdf.PdfChunk =
  do (objects : [Pdf.ObjDecl]) <- Many[] Pdf.ObjDecl
     (xref : Pdf.CrossRefSection) <- Pdf.CrossRefSection
     (trailer : Map [uint 8] PdfValue.Value) <- Pdf.Trailer
     @MatchBytes "startxref"
     PdfValue.EOL_220
     (declaredStartXref : int) <- do ($$ : int) <- PdfValue.Natural
                                     PdfValue.EOL_220
                                     pure $$
     PdfValue.KW_226 "%%EOF"
     pure {objects = objects,
           xref = xref,
           trailer = trailer,
           declaredStartXref = declaredStartXref}
 
rec value
  Pdf.SkipTo ?a0 (P : Grammar ?a0) : Grammar {} =
    do (_217 : bool) <- Choose biased
                          { do do P
                                  pure {}
                               ($$ : bool) <- pure true
                               pure $$
                          | pure false
                          }
       case _217 is
         { true -> {- case branch  true -} pure {}
         ; false -> {- case branch  false -} do @Match UInt8
                                                ($$ : {}) <- Pdf.SkipTo ?a0 P
                                                pure $$
         }
 
Pdf.Main : Grammar Pdf.Main =
  PdfValue.Only Pdf.Main do (version : {}) <- Pdf.SkipTo PdfValue.Number do @MatchBytes "%PDF-"
                                                                            ($$ : PdfValue.Number) <- PdfValue.Number
                                                                            pure $$
                            (chunks : [Pdf.PdfChunk]) <- Many[] Pdf.PdfChunk
                            @Many[] PdfValue.AnyWS_222
                            pure {version = version,
                                  chunks = chunks}
 
Pdf.CountTo_291 ?a0 ?a1 (Literal 1 ?a0) (Arith ?a0) (P : Grammar ?a1) (count : ?a0) (P : Grammar {}) : Grammar {} =
  Choose biased
    { P
    | do @Match UInt8
         Pdf.CountTo ?a0 ?a1 P (count + 1)
         pure {}
    }
 
Pdf.Stream_296 (val : PdfValue.Value) : Grammar {} =
  do case val is
       { {| dict = _206 |} -> pure {}
       }
     @MatchBytes "stream"
     PdfValue.SimpleEOL_219
     (start : Stream) <- CurrentStream
     (len : uint 64) <- Pdf.CountTo (uint 64) {} (PdfValue.KW "endstream") 0
     @StreamLen len start
     pure {}
 
Pdf.TopDeclDef_300 (val : PdfValue.Value) : Grammar {} =
  Choose biased
    { {- stream -} Pdf.Stream_296 val
    | {- value -} pure {}
    }
 
Pdf.ObjDecl_302 : Grammar {} =
  do PdfValue.Token_223 int PdfValue.Natural_244
     PdfValue.Token_223 int PdfValue.Natural_244
     PdfValue.KW_226 "obj"
     (val : PdfValue.Value) <- PdfValue.PdfValue
     Pdf.TopDeclDef_300 val
     PdfValue.KW_226 "endobj"
 
Pdf.Trailer_304 : Grammar {} =
  do PdfValue.KW_226 "trailer"
     PdfValue.PdfDict_286
 
Pdf.UsedEntry_305 : Grammar {} =
  @Match {'n'}
 
Pdf.FreeEntry_306 : Grammar {} =
  @Match {'f'}
 
Pdf.NatN_307 (n : uint 64) : Grammar {} =
  do (ds : [int]) <- Many[n] PdfValue.Digit
     @(PdfValue.numBase [int] (uint 64) int 10 ds AS uint 64)
 
Pdf.CrossRefEntry_310 : Grammar {} =
  do Pdf.NatN_307 10
     @Match PdfValue.$simpleWS
     Pdf.NatN_307 5
     @Match PdfValue.$simpleWS
     Choose biased
       { {- inUse -} Pdf.UsedEntry_305
       | {- free -} Pdf.FreeEntry_306
       }
     Choose biased
       { do @Match PdfValue.$simpleWS
            Choose biased
              { @Match PdfValue.$cr
              | @Match PdfValue.$lf
              }
       | do @Match PdfValue.$cr
            @Match PdfValue.$lf
       }
 
Pdf.CrossRefSubSection_311 : Grammar {} =
  do PdfValue.Token_223 int PdfValue.Natural_244
     (num : uint 64) <- do (_215 : int) <- PdfValue.Token int PdfValue.Natural
                           _215 AS uint 64
     @Many[num] Pdf.CrossRefEntry_310
 
Pdf.CrossRefSection_314 : Grammar {} =
  do PdfValue.KW_226 "xref"
     @Many[ 1 .. ] Pdf.CrossRefSubSection_311
 
Pdf.PdfChunk_315 : Grammar {} =
  do @Many[] Pdf.ObjDecl_302
     Pdf.CrossRefSection_314
     Pdf.Trailer_304
     @MatchBytes "startxref"
     PdfValue.EOL_220
     do PdfValue.Natural_244
        PdfValue.EOL_220
     PdfValue.KW_226 "%%EOF"
 
Pdf.SkipTo_316 ?a0 (P : Grammar ?a0) (P : Grammar {}) : Grammar {} =
  do (_217 : bool) <- Choose biased
                        { do P
                             ($$ : bool) <- pure true
                             pure $$
                        | pure false
                        }
     case _217 is
       { true -> {- case branch  true -} pure {}
       ; false -> {- case branch  false -} do @Match UInt8
                                              Pdf.SkipTo ?a0 P
       }
 
Pdf.Main_322 : Grammar {} =
  PdfValue.Only_233 Pdf.Main do Pdf.SkipTo_316 PdfValue.Number do @MatchBytes "%PDF-"
                                                                  ($$ : PdfValue.Number) <- PdfValue.Number
                                                                  pure $$ do @MatchBytes "%PDF-"
                                                                             PdfValue.Number_245
                                @Many[] Pdf.PdfChunk_315
                                @Many[] PdfValue.AnyWS_222
