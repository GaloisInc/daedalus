module MavNumerics
 
--- Imports:
 
--- Type defs:
type MavNumerics.Float0 = Choose { neg: {}
                                 ; pos: bool
                                 }
 
type MavNumerics.Float1 = { sign: MavNumerics.Float0
                          ; mantissa: uint 23
                          ; exponent: int
                          }
 
type MavNumerics.NonNegFloat0 = { nnMantissa: uint 23
                                ; nnExponent: int
                                }
 
type MavNumerics.InclusiveFractional0 = { incMantissa: uint 23
                                        ; incExponent: int
                                        }
 
type MavNumerics.Float = Choose { denormalized: uint 23
                                ; infty: MavNumerics.Float0
                                ; nan: {}
                                ; number: MavNumerics.Float1
                                ; zero: {}
                                }
 
type MavNumerics.NonNegFloat = Choose { nonNegDenorm: uint 23
                                      ; nonNegInfty: bool
                                      ; nonNegNumber: MavNumerics.NonNegFloat0
                                      ; nonNegZero: {}
                                      }
 
type MavNumerics.InclusiveFractional = Choose { inclusiveDenorm: uint 23
                                              ; inclusiveFrac: MavNumerics.InclusiveFractional0
                                              ; inclusiveOne: {}
                                              ; inclusiveZero: {}
                                              }
 
type MavNumerics.GeoCoord = { degs: int
                            ; mins: int
                            ; secs: int
                            ; decSecs: int
                            }
 
--- Rules:
 
MavNumerics.Guard (p : bool) : Grammar {} =
  Guard p
 
MavNumerics.Bool : Grammar bool =
  Choose biased
    { do ($$ : bool) <- pure false
         pure $$
    | do ($$ : bool) <- pure true
         pure $$
    }
 
MavNumerics.UInt16 : Grammar (uint 16) =
  do (hi : uint 8) <- GetByte
     (lo : uint 8) <- GetByte
     ($$ : uint 16) <- pure (hi # lo)
     pure $$
 
MavNumerics.HighBit : Grammar (uint 8) =
  pure (1 << 7)
 
MavNumerics.Int8 : Grammar int =
  do (dig : uint 8) <- GetByte
     ($$ : int) <- do (_141 : int) <- do (_140 : uint 8) <- do (_139 : uint 8) <- do (_138 : uint 8) <- MavNumerics.HighBit
                                                                                     pure (~ _138)
                                                               pure (dig .&. _139)
                                         pure (_140 as int)
                      (_144 : int) <- do (_143 : uint 8) <- do (_142 : uint 8) <- MavNumerics.HighBit
                                                               pure (dig .&. _142)
                                         pure (_143 as int)
                      pure (_141 - _144)
     pure $$
 
MavNumerics.Int24 : Grammar int =
  do (dig0 : uint 8) <- GetByte
     (dig1 : uint 8) <- GetByte
     (dig2 : uint 8) <- GetByte
     ($$ : int) <- do (_151 : int) <- do (_150 : uint 24) <- do (_149 : uint 16) <- do (_148 : uint 8) <- do (_147 : uint 8) <- do (_146 : uint 8) <- MavNumerics.HighBit
                                                                                                                                   pure (~ _146)
                                                                                                             pure (dig0 .&. _147)
                                                                                       pure (_148 # dig1)
                                                                pure (_149 # dig2)
                                         pure (_150 as int)
                      (_156 : int) <- do (_155 : uint 24) <- do (_154 : uint 24) <- do (_153 : uint 8) <- do (_152 : uint 8) <- MavNumerics.HighBit
                                                                                                             pure (dig0 .&. _152)
                                                                                       pure (_153 as uint 24)
                                                                pure (_154 << 16)
                                         pure (_155 as int)
                      pure (_151 - _156)
     pure $$
 
MavNumerics.Int32 : Grammar int =
  do (dig0 : uint 8) <- GetByte
     (dig1 : uint 8) <- GetByte
     (dig2 : uint 8) <- GetByte
     (dig3 : uint 8) <- GetByte
     ($$ : int) <- do (_164 : int) <- do (_163 : uint 32) <- do (_162 : uint 24) <- do (_161 : uint 16) <- do (_160 : uint 8) <- do (_159 : uint 8) <- do (_158 : uint 8) <- MavNumerics.HighBit
                                                                                                                                                          pure (~ _158)
                                                                                                                                    pure (dig0 .&. _159)
                                                                                                              pure (_160 # dig1)
                                                                                       pure (_161 # dig2)
                                                                pure (_162 # dig3)
                                         pure (_163 as int)
                      (_169 : int) <- do (_168 : uint 32) <- do (_167 : uint 32) <- do (_166 : uint 8) <- do (_165 : uint 8) <- MavNumerics.HighBit
                                                                                                             pure (dig0 .&. _165)
                                                                                       pure (_166 as uint 32)
                                                                pure (_167 << 24)
                                         pure (_168 as int)
                      pure (_164 - _169)
     pure $$
 
MavNumerics.Digit : Grammar int =
  do (_171 : uint 8) <- do (_170 : uint 8) <- Match ('0' .. '9')
                           pure (_170 - '0')
     pure (_171 as int)
 
MavNumerics.numBase ?a1 ?a3 ?a4 (Literal 0 ?a4) (Traversable ?a1) (HasKey ?a1 ?a3) (HasElement ?a1 ?a4) (Numeric ?a4) (base : ?a4) (ds : ?a1) : ?a4 =
  for ((val : ?a4) = 0; (d : ?a4) in ds)
    ((val * base) + d)
 
MavNumerics.Natural (numDigs : uint 64) : Grammar int =
  do (_172 : [int]) <- Many[numDigs] MavNumerics.Digit
     pure (MavNumerics.numBase [int] (uint 64) int 10 _172)
 
MavNumerics.LowBits : Grammar (uint 8) =
  do (hb : uint 8) <- MavNumerics.HighBit
     ($$ : uint 8) <- pure (~ hb)
     pure $$
 
MavNumerics._Guard (p : bool) : Grammar {} =
  Guard p
 
MavNumerics.Float : Grammar MavNumerics.Float =
  do (dig0 : uint 8) <- GetByte
     (dig1 : uint 8) <- GetByte
     (mantissaLow : uint 16) <- MavNumerics.UInt16
     (hb : uint 8) <- MavNumerics.HighBit
     (signBit : uint 8) <- pure (dig0 .&. hb)
     (isPos : MavNumerics.Float0) <- Choose biased
                                       { {- pos -} do (_174 : bool) <- pure (signBit == 0)
                                                      pure {pos: _174}
                                       | {- neg -} do (_175 : {}) <- pure {}
                                                      pure {neg: _175}
                                       }
     (lbs : uint 8) <- MavNumerics.LowBits
     (mant : uint 23) <- pure (((dig1 .&. lbs as uint 23) << 16) .|. (mantissaLow as uint 23))
     (exp : uint 8) <- pure (((dig0 .&. lbs) << 1) .|. ((dig1 .&. hb) >> 7))
     ($$ : MavNumerics.Float) <- Choose biased
                                   { {- zero -} do (_178 : {}) <- do MavNumerics._Guard (exp == 0)
                                                                     ($$ : {}) <- MavNumerics.Guard (mant == 0)
                                                                     pure $$
                                                   pure {zero: _178}
                                   | {- denormalized -} do (_180 : uint 23) <- do MavNumerics._Guard (exp == 0)
                                                                                  ($$ : uint 23) <- pure mant
                                                                                  pure $$
                                                           pure {denormalized: _180}
                                   | {- infty -} do (_182 : MavNumerics.Float0) <- do MavNumerics._Guard (exp == 255)
                                                                                      MavNumerics._Guard (mant == 0)
                                                                                      ($$ : MavNumerics.Float0) <- pure isPos
                                                                                      pure $$
                                                    pure {infty: _182}
                                   | {- nan -} do (_184 : {}) <- do MavNumerics._Guard (exp == 255)
                                                                    ($$ : {}) <- MavNumerics.Guard (mant != 0)
                                                                    pure $$
                                                  pure {nan: _184}
                                   | {- number -} do (_185 : MavNumerics.Float1) <- do (sign : MavNumerics.Float0) <- pure isPos
                                                                                       (mantissa : uint 23) <- pure mant
                                                                                       (exponent : int) <- pure ((exp as int) - 127)
                                                                                       pure {sign = sign,
                                                                                             mantissa = mantissa,
                                                                                             exponent = exponent}
                                                     pure {number: _185}
                                   }
     pure $$
 
MavNumerics.NonNegFloat (f : MavNumerics.Float) : Grammar MavNumerics.NonNegFloat =
  Choose biased
    { {- nonNegZero -} do (_187 : {}) <- case f is
                                           { {| zero = _186 |} -> pure _186
                                           }
                          pure {nonNegZero: _187}
    | {- nonNegDenorm -} do (_189 : uint 23) <- case f is
                                                  { {| denormalized = _188 |} -> pure _188
                                                  }
                            pure {nonNegDenorm: _189}
    | {- nonNegInfty -} do (_193 : bool) <- do (s : MavNumerics.Float0) <- case f is
                                                                             { {| infty = _190 |} -> pure _190
                                                                             }
                                               ($$ : bool) <- case s is
                                                                { {| pos = _192 |} -> pure _192
                                                                }
                                               pure $$
                           pure {nonNegInfty: _193}
    | {- nonNegNumber -} do (_196 : MavNumerics.NonNegFloat0) <- do (n : MavNumerics.Float1) <- case f is
                                                                                                  { {| number = _194 |} -> pure _194
                                                                                                  }
                                                                    case n.sign is
                                                                      { {| pos = _195 |} -> pure {}
                                                                      }
                                                                    (nnMantissa : uint 23) <- pure (n.mantissa)
                                                                    (nnExponent : int) <- pure (n.exponent)
                                                                    pure {nnMantissa = nnMantissa,
                                                                          nnExponent = nnExponent}
                            pure {nonNegNumber: _196}
    }
 
MavNumerics.InclusiveFractional (f : MavNumerics.Float) : Grammar MavNumerics.InclusiveFractional =
  do (nnf : MavNumerics.NonNegFloat) <- MavNumerics.NonNegFloat f
     ($$ : MavNumerics.InclusiveFractional) <- Choose biased
                                                 { {- inclusiveZero -} do (_199 : {}) <- case nnf is
                                                                                           { {| nonNegZero = _198 |} -> pure _198
                                                                                           }
                                                                          pure {inclusiveZero: _199}
                                                 | {- inclusiveDenorm -} do (_201 : uint 23) <- case nnf is
                                                                                                  { {| nonNegDenorm = _200 |} -> pure _200
                                                                                                  }
                                                                            pure {inclusiveDenorm: _201}
                                                 | {- inclusiveFrac -} do (_203 : MavNumerics.InclusiveFractional0) <- do (nnNum : MavNumerics.NonNegFloat0) <- case nnf is
                                                                                                                                                                  { {| nonNegNumber = _202 |} -> pure _202
                                                                                                                                                                  }
                                                                                                                          MavNumerics._Guard ((nnNum.nnExponent) < 0)
                                                                                                                          (incMantissa : uint 23) <- pure (nnNum.nnMantissa)
                                                                                                                          (incExponent : int) <- pure (nnNum.nnExponent)
                                                                                                                          pure {incMantissa = incMantissa,
                                                                                                                                incExponent = incExponent}
                                                                          pure {inclusiveFrac: _203}
                                                 | {- inclusiveOne -} do (_206 : {}) <- do (n : MavNumerics.NonNegFloat0) <- case nnf is
                                                                                                                               { {| nonNegNumber = _204 |} -> pure _204
                                                                                                                               }
                                                                                           MavNumerics._Guard ((n.nnMantissa) == 0)
                                                                                           ($$ : {}) <- MavNumerics.Guard ((n.nnExponent) == 0)
                                                                                           pure $$
                                                                         pure {inclusiveOne: _206}
                                                 }
     pure $$
 
MavNumerics.Sub60 : Grammar int =
  do ($$ : int) <- MavNumerics.Natural 2
     MavNumerics._Guard (0 <= $$)
     MavNumerics._Guard ($$ <= 59)
     pure $$
 
MavNumerics.GeoCoord : Grammar MavNumerics.GeoCoord =
  do (degs : int) <- MavNumerics.Natural 3
     @Match {'.'}
     (mins : int) <- MavNumerics.Sub60
     (secs : int) <- MavNumerics.Sub60
     (decSecs : int) <- MavNumerics.Natural 2
     pure {degs = degs,
           mins = mins,
           secs = secs,
           decSecs = decSecs}
 
MavNumerics.Lat : Grammar MavNumerics.GeoCoord =
  MavNumerics.GeoCoord
 
MavNumerics.Long : Grammar MavNumerics.GeoCoord =
  MavNumerics.GeoCoord
 
MavNumerics._Bool : Grammar {} =
  Choose biased
    { pure {}
    | pure {}
    }
 
MavNumerics._UInt16 : Grammar {} =
  do @GetByte
     @GetByte
 
MavNumerics._HighBit : Grammar {} =
  pure {}
 
MavNumerics._Int8 : Grammar {} =
  do @GetByte
     MavNumerics._HighBit
     MavNumerics._HighBit
 
MavNumerics._Int24 : Grammar {} =
  do @GetByte
     @GetByte
     @GetByte
     MavNumerics._HighBit
     MavNumerics._HighBit
 
MavNumerics._Int32 : Grammar {} =
  do @GetByte
     @GetByte
     @GetByte
     @GetByte
     MavNumerics._HighBit
     MavNumerics._HighBit
 
MavNumerics._Digit : Grammar {} =
  @Match ('0' .. '9')
 
MavNumerics._Natural (numDigs : uint 64) : Grammar {} =
  @Many[numDigs] MavNumerics._Digit
 
MavNumerics._LowBits : Grammar {} =
  MavNumerics._HighBit
 
MavNumerics._Float : Grammar {} =
  do (dig0 : uint 8) <- GetByte
     (dig1 : uint 8) <- GetByte
     (mantissaLow : uint 16) <- MavNumerics.UInt16
     (hb : uint 8) <- MavNumerics.HighBit
     Choose biased
       { {- pos -} pure {}
       | {- neg -} pure {}
       }
     (lbs : uint 8) <- MavNumerics.LowBits
     (mant : uint 23) <- pure (((dig1 .&. lbs as uint 23) << 16) .|. (mantissaLow as uint 23))
     (exp : uint 8) <- pure (((dig0 .&. lbs) << 1) .|. ((dig1 .&. hb) >> 7))
     Choose biased
       { {- zero -} do MavNumerics._Guard (exp == 0)
                       MavNumerics._Guard (mant == 0)
       | {- denormalized -} MavNumerics._Guard (exp == 0)
       | {- infty -} do MavNumerics._Guard (exp == 255)
                        MavNumerics._Guard (mant == 0)
       | {- nan -} do MavNumerics._Guard (exp == 255)
                      MavNumerics._Guard (mant != 0)
       | {- number -} pure {}
       }
 
MavNumerics._NonNegFloat (f : MavNumerics.Float) : Grammar {} =
  Choose biased
    { {- nonNegZero -} case f is
                         { {| zero = _186 |} -> pure {}
                         }
    | {- nonNegDenorm -} case f is
                           { {| denormalized = _188 |} -> pure {}
                           }
    | {- nonNegInfty -} do (s : MavNumerics.Float0) <- case f is
                                                         { {| infty = _190 |} -> pure _190
                                                         }
                           case s is
                             { {| pos = _192 |} -> pure {}
                             }
    | {- nonNegNumber -} do (n : MavNumerics.Float1) <- case f is
                                                          { {| number = _194 |} -> pure _194
                                                          }
                            case n.sign is
                              { {| pos = _195 |} -> pure {}
                              }
    }
 
MavNumerics._InclusiveFractional (f : MavNumerics.Float) : Grammar {} =
  do (nnf : MavNumerics.NonNegFloat) <- MavNumerics.NonNegFloat f
     Choose biased
       { {- inclusiveZero -} case nnf is
                               { {| nonNegZero = _198 |} -> pure {}
                               }
       | {- inclusiveDenorm -} case nnf is
                                 { {| nonNegDenorm = _200 |} -> pure {}
                                 }
       | {- inclusiveFrac -} do (nnNum : MavNumerics.NonNegFloat0) <- case nnf is
                                                                        { {| nonNegNumber = _202 |} -> pure _202
                                                                        }
                                MavNumerics._Guard ((nnNum.nnExponent) < 0)
       | {- inclusiveOne -} do (n : MavNumerics.NonNegFloat0) <- case nnf is
                                                                   { {| nonNegNumber = _204 |} -> pure _204
                                                                   }
                               MavNumerics._Guard ((n.nnMantissa) == 0)
                               MavNumerics._Guard ((n.nnExponent) == 0)
       }
 
MavNumerics._Sub60 : Grammar {} =
  do ($$ : int) <- MavNumerics.Natural 2
     MavNumerics._Guard (0 <= $$)
     MavNumerics._Guard ($$ <= 59)
 
MavNumerics._GeoCoord : Grammar {} =
  do MavNumerics._Natural 3
     @Match {'.'}
     MavNumerics._Sub60
     MavNumerics._Sub60
     MavNumerics._Natural 2
 
MavNumerics._Lat : Grammar {} =
  MavNumerics._GeoCoord
 
MavNumerics._Long : Grammar {} =
  MavNumerics._GeoCoord
module MavEnums
 
--- Imports:
import MavNumerics
 
--- Type defs:
type MavEnums.Position ?a1 ?a3 ?a5 = { latitude: ?a1
                                     ; longitude: ?a3
                                     ; altitude: ?a5
                                     }
 
type MavEnums.MavCmd0 ?a8 ?a10 ?a13 ?a14 ?a15 = { hold: MavNumerics.NonNegFloat
                                                ; acceptRadius: MavNumerics.NonNegFloat
                                                ; passRadius: ?a8
                                                ; yaw: ?a10
                                                ; position: MavEnums.Position ?a13 ?a14 ?a15
                                                }
 
type MavEnums.MavCmd1 ?a8 ?a10 ?a13 ?a14 ?a15 = { radius: ?a8
                                                ; yaw: ?a10
                                                ; position: MavEnums.Position ?a13 ?a14 ?a15
                                                }
 
type MavEnums.MavCmd2 ?a8 ?a10 ?a13 ?a14 ?a15 = { turns: MavNumerics.NonNegFloat
                                                ; headingRequired: MavNumerics.InclusiveFractional
                                                ; radius: ?a8
                                                ; xtrackLoc: ?a10
                                                ; position: MavEnums.Position ?a13 ?a14 ?a15
                                                }
 
type MavEnums.MavCmd3 ?a8 ?a10 ?a13 ?a14 ?a15 = { time: MavNumerics.NonNegFloat
                                                ; headingRequired: MavNumerics.InclusiveFractional
                                                ; radius: ?a8
                                                ; xtrackLocation: ?a10
                                                ; position: MavEnums.Position ?a13 ?a14 ?a15
                                                }
 
type MavEnums.PrecisionLandMode = Choose { precisionLandModeDisabled: {}
                                         ; precisionLandModeOpportunistic: {}
                                         ; precisionLandModeRequired: {}
                                         }
 
type MavEnums.MavCmd4 ?a10 ?a13 ?a14 ?a15 = { abortAlt: MavNumerics.Float
                                            ; landMode: MavEnums.PrecisionLandMode
                                            ; yawAngle: ?a10
                                            ; position: MavEnums.Position ?a13 ?a14 ?a15
                                            }
 
type MavEnums.MavCmd5 ?a10 ?a13 ?a14 ?a15 = { pitch: MavNumerics.Float
                                            ; yaw: ?a10
                                            ; position: MavEnums.Position ?a13 ?a14 ?a15
                                            }
 
type MavEnums.MavFrame = Choose { mavFrameBodyFrd: {}
                                ; mavFrameBodyNed: {}
                                ; mavFrameBodyOffsetNed: {}
                                ; mavFrameGlobal: {}
                                ; mavFrameGlobalInt: {}
                                ; mavFrameGlobalRelativeAlt: {}
                                ; mavFrameGlobalRelativeAltInt: {}
                                ; mavFrameGlobalTerrainAlt: {}
                                ; mavFrameGlobalTerrainAltInt: {}
                                ; mavFrameLocalEnu: {}
                                ; mavFrameLocalFlu: {}
                                ; mavFrameLocalFrd: {}
                                ; mavFrameLocalNed: {}
                                ; mavFrameLocalOffsetNed: {}
                                ; mavFrameMission: {}
                                ; mavFrameReserved13: {}
                                ; mavFrameReserved14: {}
                                }
 
type MavEnums.CmdParams = { param1: MavNumerics.Float
                          ; param2: MavNumerics.Float
                          ; param3: MavNumerics.Float
                          ; param4: MavNumerics.Float
                          ; x: int
                          ; y: int
                          ; z: MavNumerics.Float
                          }
 
type MavEnums.MavCmd ?a0 ?a8 ?a10 ?a13 ?a14 ?a15 = Choose { mavCmdNavLand: MavEnums.MavCmd4 ?a10 ?a13 ?a14 ?a15
                                                          ; mavCmdNavLoiterTime: MavEnums.MavCmd3 ?a8 ?a10 ?a13 ?a14 ?a15
                                                          ; mavCmdNavLoiterTurns: MavEnums.MavCmd2 ?a8 ?a10 ?a13 ?a14 ?a15
                                                          ; mavCmdNavLoiterUnlim: MavEnums.MavCmd1 ?a8 ?a10 ?a13 ?a14 ?a15
                                                          ; mavCmdNavReturnToLaunch: {}
                                                          ; mavCmdNavTakeoff: MavEnums.MavCmd5 ?a10 ?a13 ?a14 ?a15
                                                          ; mavCmdNavWaypoint: MavEnums.MavCmd0 ?a8 ?a10 ?a13 ?a14 ?a15
                                                          ; mavCmdSome: ?a0
                                                          }
 
type MavEnums.MavMissionType = Choose { mavMissionTypeAll: {}
                                      ; mavMissionTypeFence: {}
                                      ; mavMissionTypeMission: {}
                                      ; mavMissionTypeRally: {}
                                      }
 
type MavEnums.MavMissionResult = Choose { mavMissionAccepted: {}
                                        ; mavMissionDenied: {}
                                        ; mavMissionError: {}
                                        ; mavMissionInvalid: {}
                                        ; mavMissionInvalidParam1: {}
                                        ; mavMissionInvalidParam2: {}
                                        ; mavMissionInvalidParam3: {}
                                        ; mavMissionInvalidParam4: {}
                                        ; mavMissionInvalidParam5X: {}
                                        ; mavMissionInvalidParam6Y: {}
                                        ; mavMissionInvalidParam7: {}
                                        ; mavMissionInvalidSequence: {}
                                        ; mavMissionNoSpace: {}
                                        ; mavMissionOperationCancelled: {}
                                        ; mavMissionUnsupported: {}
                                        ; mavMissionUnsupportedFrame: {}
                                        }
 
--- Rules:
 
MavEnums.MavFrame : Grammar MavEnums.MavFrame =
  Choose biased
    { {- mavFrameGlobal -} do (_207 : {}) <- @Match {'\NUL'}
                              pure {mavFrameGlobal: _207}
    | {- mavFrameLocalNed -} do (_208 : {}) <- @Match {'\SOH'}
                                pure {mavFrameLocalNed: _208}
    | {- mavFrameMission -} do (_209 : {}) <- @Match {'\STX'}
                               pure {mavFrameMission: _209}
    | {- mavFrameGlobalRelativeAlt -} do (_210 : {}) <- @Match {'\ETX'}
                                         pure {mavFrameGlobalRelativeAlt: _210}
    | {- mavFrameLocalEnu -} do (_211 : {}) <- @Match {'\EOT'}
                                pure {mavFrameLocalEnu: _211}
    | {- mavFrameGlobalInt -} do (_212 : {}) <- @Match {'\ENQ'}
                                 pure {mavFrameGlobalInt: _212}
    | {- mavFrameGlobalRelativeAltInt -} do (_213 : {}) <- @Match {'\ACK'}
                                            pure {mavFrameGlobalRelativeAltInt: _213}
    | {- mavFrameLocalOffsetNed -} do (_214 : {}) <- @Match {'\a'}
                                      pure {mavFrameLocalOffsetNed: _214}
    | {- mavFrameBodyNed -} do (_215 : {}) <- @Match {'\b'}
                               pure {mavFrameBodyNed: _215}
    | {- mavFrameBodyOffsetNed -} do (_216 : {}) <- @Match {'\t'}
                                     pure {mavFrameBodyOffsetNed: _216}
    | {- mavFrameGlobalTerrainAlt -} do (_217 : {}) <- @Match {'\n'}
                                        pure {mavFrameGlobalTerrainAlt: _217}
    | {- mavFrameGlobalTerrainAltInt -} do (_218 : {}) <- @Match {'\v'}
                                           pure {mavFrameGlobalTerrainAltInt: _218}
    | {- mavFrameBodyFrd -} do (_219 : {}) <- @Match {'\f'}
                               pure {mavFrameBodyFrd: _219}
    | {- mavFrameReserved13 -} do (_220 : {}) <- @Match {'\r'}
                                  pure {mavFrameReserved13: _220}
    | {- mavFrameReserved14 -} do (_221 : {}) <- @Match {'\SO'}
                                  pure {mavFrameReserved14: _221}
    | {- mavFrameReserved14 -} do (_222 : {}) <- @Match {'\SI'}
                                  pure {mavFrameReserved14: _222}
    | {- mavFrameReserved14 -} do (_223 : {}) <- @Match {'\DLE'}
                                  pure {mavFrameReserved14: _223}
    | {- mavFrameReserved14 -} do (_224 : {}) <- @Match {'\DC1'}
                                  pure {mavFrameReserved14: _224}
    | {- mavFrameReserved14 -} do (_225 : {}) <- @Match {'\DC2'}
                                  pure {mavFrameReserved14: _225}
    | {- mavFrameReserved14 -} do (_226 : {}) <- @Match {'\DC3'}
                                  pure {mavFrameReserved14: _226}
    | {- mavFrameLocalFrd -} do (_227 : {}) <- @Match {'\DC4'}
                                pure {mavFrameLocalFrd: _227}
    | {- mavFrameLocalFlu -} do (_228 : {}) <- @Match {'\NAK'}
                                pure {mavFrameLocalFlu: _228}
    }
 
MavEnums.CmdParams : Grammar MavEnums.CmdParams =
  do (param1 : MavNumerics.Float) <- MavNumerics.Float
     (param2 : MavNumerics.Float) <- MavNumerics.Float
     (param3 : MavNumerics.Float) <- MavNumerics.Float
     (param4 : MavNumerics.Float) <- MavNumerics.Float
     (x : int) <- MavNumerics.Int32
     (y : int) <- MavNumerics.Int32
     (z : MavNumerics.Float) <- MavNumerics.Float
     pure {param1 = param1,
           param2 = param2,
           param3 = param3,
           param4 = param4,
           x = x,
           y = y,
           z = z}
 
MavEnums.Position ?a0 ?a1 ?a3 ?a5 (HasStruct ?a0 x ?a1) (HasStruct ?a0 y ?a3) (HasStruct ?a0 z ?a5) (params : ?a0) : Grammar (MavEnums.Position ?a1 ?a3 ?a5) =
  do (latitude : ?a1) <- pure (params.x)
     (longitude : ?a3) <- pure (params.y)
     (altitude : ?a5) <- pure (params.z)
     pure {latitude = latitude,
           longitude = longitude,
           altitude = altitude}
 
MavEnums.PrecisionLandMode (f : MavNumerics.Float) : Grammar MavEnums.PrecisionLandMode =
  Choose biased
    { {- precisionLandModeDisabled -} do (_230 : {}) <- case f is
                                                          { {| zero = _229 |} -> pure _229
                                                          }
                                         pure {precisionLandModeDisabled: _230}
    | {- precisionLandModeOpportunistic -} do (_234 : {}) <- do (n : MavNumerics.Float1) <- case f is
                                                                                              { {| number = _231 |} -> pure _231
                                                                                              }
                                                                case n.sign is
                                                                  { {| pos = _232 |} -> pure {}
                                                                  }
                                                                MavNumerics._Guard ((n.exponent) == 0)
                                                                ($$ : {}) <- MavNumerics.Guard ((n.mantissa) == 1)
                                                                pure $$
                                              pure {precisionLandModeOpportunistic: _234}
    | {- precisionLandModeRequired -} do (_238 : {}) <- do (n : MavNumerics.Float1) <- case f is
                                                                                         { {| number = _235 |} -> pure _235
                                                                                         }
                                                           case n.sign is
                                                             { {| pos = _236 |} -> pure {}
                                                             }
                                                           MavNumerics._Guard ((n.exponent) == 0)
                                                           ($$ : {}) <- MavNumerics.Guard ((n.mantissa) == 2)
                                                           pure $$
                                         pure {precisionLandModeRequired: _238}
    }
 
MavEnums.MavCmd ?a0 ?a8 ?a10 ?a13 ?a14 ?a15 (HasStruct ?a0 param1 MavNumerics.Float) (HasStruct ?a0 param2 MavNumerics.Float) (HasStruct ?a0 param3 ?a8) (HasStruct ?a0 param4 ?a10) (HasStruct ?a0 x ?a13) (HasStruct ?a0 y ?a14) (HasStruct ?a0 z ?a15) (params : ?a0) : Grammar (MavEnums.MavCmd ?a0 ?a8 ?a10 ?a13 ?a14 ?a15) =
  do (cmd : uint 16) <- MavNumerics.UInt16
     ($$ : MavEnums.MavCmd ?a0 ?a8 ?a10 ?a13 ?a14 ?a15) <- Choose biased
                                                             { {- mavCmdNavWaypoint -} do (_240 : MavEnums.MavCmd0 ?a8 ?a10 ?a13 ?a14 ?a15) <- do MavNumerics._Guard (cmd == 16)
                                                                                                                                                  (hold : MavNumerics.NonNegFloat) <- MavNumerics.NonNegFloat (params.param1)
                                                                                                                                                  (acceptRadius : MavNumerics.NonNegFloat) <- MavNumerics.NonNegFloat (params.param2)
                                                                                                                                                  (passRadius : ?a8) <- pure (params.param3)
                                                                                                                                                  (yaw : ?a10) <- pure (params.param4)
                                                                                                                                                  (position : MavEnums.Position ?a13 ?a14 ?a15) <- MavEnums.Position ?a0 ?a13 ?a14 ?a15 params
                                                                                                                                                  pure {hold = hold,
                                                                                                                                                        acceptRadius = acceptRadius,
                                                                                                                                                        passRadius = passRadius,
                                                                                                                                                        yaw = yaw,
                                                                                                                                                        position = position}
                                                                                          pure {mavCmdNavWaypoint: _240}
                                                             | {- mavCmdNavLoiterUnlim -} do (_241 : MavEnums.MavCmd1 ?a8 ?a10 ?a13 ?a14 ?a15) <- do MavNumerics._Guard (cmd == 17)
                                                                                                                                                     (radius : ?a8) <- pure (params.param3)
                                                                                                                                                     (yaw : ?a10) <- pure (params.param4)
                                                                                                                                                     (position : MavEnums.Position ?a13 ?a14 ?a15) <- MavEnums.Position ?a0 ?a13 ?a14 ?a15 params
                                                                                                                                                     pure {radius = radius,
                                                                                                                                                           yaw = yaw,
                                                                                                                                                           position = position}
                                                                                             pure {mavCmdNavLoiterUnlim: _241}
                                                             | {- mavCmdNavLoiterTurns -} do (_242 : MavEnums.MavCmd2 ?a8 ?a10 ?a13 ?a14 ?a15) <- do MavNumerics._Guard (cmd == 18)
                                                                                                                                                     (turns : MavNumerics.NonNegFloat) <- MavNumerics.NonNegFloat (params.param1)
                                                                                                                                                     (headingRequired : MavNumerics.InclusiveFractional) <- MavNumerics.InclusiveFractional (params.param2)
                                                                                                                                                     (radius : ?a8) <- pure (params.param3)
                                                                                                                                                     (xtrackLoc : ?a10) <- pure (params.param4)
                                                                                                                                                     (position : MavEnums.Position ?a13 ?a14 ?a15) <- MavEnums.Position ?a0 ?a13 ?a14 ?a15 params
                                                                                                                                                     pure {turns = turns,
                                                                                                                                                           headingRequired = headingRequired,
                                                                                                                                                           radius = radius,
                                                                                                                                                           xtrackLoc = xtrackLoc,
                                                                                                                                                           position = position}
                                                                                             pure {mavCmdNavLoiterTurns: _242}
                                                             | {- mavCmdNavLoiterTime -} do (_243 : MavEnums.MavCmd3 ?a8 ?a10 ?a13 ?a14 ?a15) <- do MavNumerics._Guard (cmd == 19)
                                                                                                                                                    (time : MavNumerics.NonNegFloat) <- MavNumerics.NonNegFloat (params.param1)
                                                                                                                                                    (headingRequired : MavNumerics.InclusiveFractional) <- MavNumerics.InclusiveFractional (params.param2)
                                                                                                                                                    (radius : ?a8) <- pure (params.param3)
                                                                                                                                                    (xtrackLocation : ?a10) <- pure (params.param4)
                                                                                                                                                    (position : MavEnums.Position ?a13 ?a14 ?a15) <- MavEnums.Position ?a0 ?a13 ?a14 ?a15 params
                                                                                                                                                    pure {time = time,
                                                                                                                                                          headingRequired = headingRequired,
                                                                                                                                                          radius = radius,
                                                                                                                                                          xtrackLocation = xtrackLocation,
                                                                                                                                                          position = position}
                                                                                            pure {mavCmdNavLoiterTime: _243}
                                                             | {- mavCmdNavReturnToLaunch -} do (_244 : {}) <- MavNumerics.Guard (cmd == 20)
                                                                                                pure {mavCmdNavReturnToLaunch: _244}
                                                             | {- mavCmdNavLand -} do (_245 : MavEnums.MavCmd4 ?a10 ?a13 ?a14 ?a15) <- do MavNumerics._Guard (cmd == 21)
                                                                                                                                          (abortAlt : MavNumerics.Float) <- pure (params.param1)
                                                                                                                                          (landMode : MavEnums.PrecisionLandMode) <- MavEnums.PrecisionLandMode (params.param2)
                                                                                                                                          (yawAngle : ?a10) <- pure (params.param4)
                                                                                                                                          (position : MavEnums.Position ?a13 ?a14 ?a15) <- MavEnums.Position ?a0 ?a13 ?a14 ?a15 params
                                                                                                                                          pure {abortAlt = abortAlt,
                                                                                                                                                landMode = landMode,
                                                                                                                                                yawAngle = yawAngle,
                                                                                                                                                position = position}
                                                                                      pure {mavCmdNavLand: _245}
                                                             | {- mavCmdNavTakeoff -} do (_246 : MavEnums.MavCmd5 ?a10 ?a13 ?a14 ?a15) <- do MavNumerics._Guard (cmd == 22)
                                                                                                                                             (pitch : MavNumerics.Float) <- pure (params.param1)
                                                                                                                                             (yaw : ?a10) <- pure (params.param4)
                                                                                                                                             (position : MavEnums.Position ?a13 ?a14 ?a15) <- MavEnums.Position ?a0 ?a13 ?a14 ?a15 params
                                                                                                                                             pure {pitch = pitch,
                                                                                                                                                   yaw = yaw,
                                                                                                                                                   position = position}
                                                                                         pure {mavCmdNavTakeoff: _246}
                                                             | {- mavCmdSome -} do (_247 : ?a0) <- pure params
                                                                                   pure {mavCmdSome: _247}
                                                             }
     pure $$
 
MavEnums.MavMissionType : Grammar MavEnums.MavMissionType =
  Choose biased
    { {- mavMissionTypeMission -} do (_248 : {}) <- @Match {'\NUL'}
                                     pure {mavMissionTypeMission: _248}
    | {- mavMissionTypeFence -} do (_249 : {}) <- @Match {'\SOH'}
                                   pure {mavMissionTypeFence: _249}
    | {- mavMissionTypeRally -} do (_250 : {}) <- @Match {'\STX'}
                                   pure {mavMissionTypeRally: _250}
    | {- mavMissionTypeAll -} do (_251 : {}) <- @Match {'\255'}
                                 pure {mavMissionTypeAll: _251}
    }
 
MavEnums.MavMissionResult : Grammar MavEnums.MavMissionResult =
  Choose biased
    { {- mavMissionAccepted -} do (_252 : {}) <- @Match {'\NUL'}
                                  pure {mavMissionAccepted: _252}
    | {- mavMissionError -} do (_253 : {}) <- @Match {'\SOH'}
                               pure {mavMissionError: _253}
    | {- mavMissionUnsupportedFrame -} do (_254 : {}) <- @Match {'\STX'}
                                          pure {mavMissionUnsupportedFrame: _254}
    | {- mavMissionUnsupported -} do (_255 : {}) <- @Match {'\ETX'}
                                     pure {mavMissionUnsupported: _255}
    | {- mavMissionNoSpace -} do (_256 : {}) <- @Match {'\EOT'}
                                 pure {mavMissionNoSpace: _256}
    | {- mavMissionInvalid -} do (_257 : {}) <- @Match {'\ENQ'}
                                 pure {mavMissionInvalid: _257}
    | {- mavMissionInvalidParam1 -} do (_258 : {}) <- @Match {'\ACK'}
                                       pure {mavMissionInvalidParam1: _258}
    | {- mavMissionInvalidParam2 -} do (_259 : {}) <- @Match {'\a'}
                                       pure {mavMissionInvalidParam2: _259}
    | {- mavMissionInvalidParam3 -} do (_260 : {}) <- @Match {'\b'}
                                       pure {mavMissionInvalidParam3: _260}
    | {- mavMissionInvalidParam4 -} do (_261 : {}) <- @Match {'\t'}
                                       pure {mavMissionInvalidParam4: _261}
    | {- mavMissionInvalidParam5X -} do (_262 : {}) <- @Match {'\n'}
                                        pure {mavMissionInvalidParam5X: _262}
    | {- mavMissionInvalidParam6Y -} do (_263 : {}) <- @Match {'\v'}
                                        pure {mavMissionInvalidParam6Y: _263}
    | {- mavMissionInvalidParam7 -} do (_264 : {}) <- @Match {'\f'}
                                       pure {mavMissionInvalidParam7: _264}
    | {- mavMissionInvalidSequence -} do (_265 : {}) <- @Match {'\r'}
                                         pure {mavMissionInvalidSequence: _265}
    | {- mavMissionDenied -} do (_266 : {}) <- @Match {'\SO'}
                                pure {mavMissionDenied: _266}
    | {- mavMissionOperationCancelled -} do (_267 : {}) <- @Match {'\SI'}
                                            pure {mavMissionOperationCancelled: _267}
    }
 
MavEnums._MavFrame : Grammar {} =
  Choose biased
    { {- mavFrameGlobal -} @Match {'\NUL'}
    | {- mavFrameLocalNed -} @Match {'\SOH'}
    | {- mavFrameMission -} @Match {'\STX'}
    | {- mavFrameGlobalRelativeAlt -} @Match {'\ETX'}
    | {- mavFrameLocalEnu -} @Match {'\EOT'}
    | {- mavFrameGlobalInt -} @Match {'\ENQ'}
    | {- mavFrameGlobalRelativeAltInt -} @Match {'\ACK'}
    | {- mavFrameLocalOffsetNed -} @Match {'\a'}
    | {- mavFrameBodyNed -} @Match {'\b'}
    | {- mavFrameBodyOffsetNed -} @Match {'\t'}
    | {- mavFrameGlobalTerrainAlt -} @Match {'\n'}
    | {- mavFrameGlobalTerrainAltInt -} @Match {'\v'}
    | {- mavFrameBodyFrd -} @Match {'\f'}
    | {- mavFrameReserved13 -} @Match {'\r'}
    | {- mavFrameReserved14 -} @Match {'\SO'}
    | {- mavFrameReserved14 -} @Match {'\SI'}
    | {- mavFrameReserved14 -} @Match {'\DLE'}
    | {- mavFrameReserved14 -} @Match {'\DC1'}
    | {- mavFrameReserved14 -} @Match {'\DC2'}
    | {- mavFrameReserved14 -} @Match {'\DC3'}
    | {- mavFrameLocalFrd -} @Match {'\DC4'}
    | {- mavFrameLocalFlu -} @Match {'\NAK'}
    }
 
MavEnums._CmdParams : Grammar {} =
  do MavNumerics._Float
     MavNumerics._Float
     MavNumerics._Float
     MavNumerics._Float
     MavNumerics._Int32
     MavNumerics._Int32
     MavNumerics._Float
 
MavEnums._Position ?a0 ?a1 ?a3 ?a5 (HasStruct ?a0 x ?a1) (HasStruct ?a0 y ?a3) (HasStruct ?a0 z ?a5) : Grammar {} =
  pure {}
 
MavEnums._PrecisionLandMode (f : MavNumerics.Float) : Grammar {} =
  Choose biased
    { {- precisionLandModeDisabled -} case f is
                                        { {| zero = _229 |} -> pure {}
                                        }
    | {- precisionLandModeOpportunistic -} do (n : MavNumerics.Float1) <- case f is
                                                                            { {| number = _231 |} -> pure _231
                                                                            }
                                              case n.sign is
                                                { {| pos = _232 |} -> pure {}
                                                }
                                              MavNumerics._Guard ((n.exponent) == 0)
                                              MavNumerics._Guard ((n.mantissa) == 1)
    | {- precisionLandModeRequired -} do (n : MavNumerics.Float1) <- case f is
                                                                       { {| number = _235 |} -> pure _235
                                                                       }
                                         case n.sign is
                                           { {| pos = _236 |} -> pure {}
                                           }
                                         MavNumerics._Guard ((n.exponent) == 0)
                                         MavNumerics._Guard ((n.mantissa) == 2)
    }
 
MavEnums._MavCmd ?a0 ?a8 ?a10 ?a13 ?a14 ?a15 (HasStruct ?a0 param1 MavNumerics.Float) (HasStruct ?a0 param2 MavNumerics.Float) (HasStruct ?a0 param3 ?a8) (HasStruct ?a0 param4 ?a10) (HasStruct ?a0 x ?a13) (HasStruct ?a0 y ?a14) (HasStruct ?a0 z ?a15) (params : ?a0) : Grammar {} =
  do (cmd : uint 16) <- MavNumerics.UInt16
     Choose biased
       { {- mavCmdNavWaypoint -} do MavNumerics._Guard (cmd == 16)
                                    MavNumerics._NonNegFloat (params.param1)
                                    MavNumerics._NonNegFloat (params.param2)
                                    MavEnums._Position ?a0 ?a13 ?a14 ?a15
       | {- mavCmdNavLoiterUnlim -} do MavNumerics._Guard (cmd == 17)
                                       MavEnums._Position ?a0 ?a13 ?a14 ?a15
       | {- mavCmdNavLoiterTurns -} do MavNumerics._Guard (cmd == 18)
                                       MavNumerics._NonNegFloat (params.param1)
                                       MavNumerics._InclusiveFractional (params.param2)
                                       MavEnums._Position ?a0 ?a13 ?a14 ?a15
       | {- mavCmdNavLoiterTime -} do MavNumerics._Guard (cmd == 19)
                                      MavNumerics._NonNegFloat (params.param1)
                                      MavNumerics._InclusiveFractional (params.param2)
                                      MavEnums._Position ?a0 ?a13 ?a14 ?a15
       | {- mavCmdNavReturnToLaunch -} MavNumerics._Guard (cmd == 20)
       | {- mavCmdNavLand -} do MavNumerics._Guard (cmd == 21)
                                MavEnums._PrecisionLandMode (params.param2)
                                MavEnums._Position ?a0 ?a13 ?a14 ?a15
       | {- mavCmdNavTakeoff -} do MavNumerics._Guard (cmd == 22)
                                   MavEnums._Position ?a0 ?a13 ?a14 ?a15
       | {- mavCmdSome -} pure {}
       }
 
MavEnums._MavMissionType : Grammar {} =
  Choose biased
    { {- mavMissionTypeMission -} @Match {'\NUL'}
    | {- mavMissionTypeFence -} @Match {'\SOH'}
    | {- mavMissionTypeRally -} @Match {'\STX'}
    | {- mavMissionTypeAll -} @Match {'\255'}
    }
 
MavEnums._MavMissionResult : Grammar {} =
  Choose biased
    { {- mavMissionAccepted -} @Match {'\NUL'}
    | {- mavMissionError -} @Match {'\SOH'}
    | {- mavMissionUnsupportedFrame -} @Match {'\STX'}
    | {- mavMissionUnsupported -} @Match {'\ETX'}
    | {- mavMissionNoSpace -} @Match {'\EOT'}
    | {- mavMissionInvalid -} @Match {'\ENQ'}
    | {- mavMissionInvalidParam1 -} @Match {'\ACK'}
    | {- mavMissionInvalidParam2 -} @Match {'\a'}
    | {- mavMissionInvalidParam3 -} @Match {'\b'}
    | {- mavMissionInvalidParam4 -} @Match {'\t'}
    | {- mavMissionInvalidParam5X -} @Match {'\n'}
    | {- mavMissionInvalidParam6Y -} @Match {'\v'}
    | {- mavMissionInvalidParam7 -} @Match {'\f'}
    | {- mavMissionInvalidSequence -} @Match {'\r'}
    | {- mavMissionDenied -} @Match {'\SO'}
    | {- mavMissionOperationCancelled -} @Match {'\SI'}
    }
module MissionItemInt
 
--- Imports:
import MavEnums
import MavNumerics
 
--- Type defs:
type MissionItemInt.MissionItemInt = { seq: uint 16
                                     ; command: MavEnums.MavCmd MavEnums.CmdParams MavNumerics.Float MavNumerics.Float int int MavNumerics.Float
                                     ; autocontinue: uint 16
                                     ; target_system: uint 8
                                     ; target_component: uint 8
                                     ; frame: MavEnums.MavFrame
                                     ; current: bool
                                     ; mission_type: MavEnums.MavMissionType
                                     }
 
--- Rules:
 
MissionItemInt.MissionItemInt : Grammar MissionItemInt.MissionItemInt =
  do (params : MavEnums.CmdParams) <- MavEnums.CmdParams
     (seq : uint 16) <- MavNumerics.UInt16
     (command : MavEnums.MavCmd MavEnums.CmdParams MavNumerics.Float MavNumerics.Float int int MavNumerics.Float) <- MavEnums.MavCmd MavEnums.CmdParams MavNumerics.Float MavNumerics.Float int int MavNumerics.Float params
     (autocontinue : uint 16) <- MavNumerics.UInt16
     (target_system : uint 8) <- GetByte
     (target_component : uint 8) <- GetByte
     (frame : MavEnums.MavFrame) <- MavEnums.MavFrame
     (current : bool) <- MavNumerics.Bool
     (mission_type : MavEnums.MavMissionType) <- MavEnums.MavMissionType
     pure {seq = seq,
           command = command,
           autocontinue = autocontinue,
           target_system = target_system,
           target_component = target_component,
           frame = frame,
           current = current,
           mission_type = mission_type}
 
MissionItemInt._MissionItemInt : Grammar {} =
  do (params : MavEnums.CmdParams) <- MavEnums.CmdParams
     MavNumerics._UInt16
     MavEnums._MavCmd MavEnums.CmdParams MavNumerics.Float MavNumerics.Float int int MavNumerics.Float params
     MavNumerics._UInt16
     @GetByte
     @GetByte
     MavEnums._MavFrame
     MavNumerics._Bool
     MavEnums._MavMissionType
module MissionCount
 
--- Imports:
import MavEnums
import MavNumerics
 
--- Type defs:
type MissionCount.MissionCount = { target_system: uint 8
                                 ; target_component: uint 8
                                 ; count: uint 16
                                 ; mission_type: MavEnums.MavMissionType
                                 }
 
--- Rules:
 
MissionCount.MissionCount : Grammar MissionCount.MissionCount =
  do (target_system : uint 8) <- GetByte
     (target_component : uint 8) <- GetByte
     (count : uint 16) <- MavNumerics.UInt16
     (mission_type : MavEnums.MavMissionType) <- MavEnums.MavMissionType
     pure {target_system = target_system,
           target_component = target_component,
           count = count,
           mission_type = mission_type}
 
MissionCount._MissionCount : Grammar {} =
  do @GetByte
     @GetByte
     MavNumerics._UInt16
     MavEnums._MavMissionType
module MissionAck
 
--- Imports:
import MavEnums
import MavNumerics
 
--- Type defs:
type MissionAck.MissionAck = { target_system: uint 8
                             ; target_component: uint 8
                             ; type: MavEnums.MavMissionResult
                             ; mission_type: MavEnums.MavMissionType
                             }
 
--- Rules:
 
MissionAck.MissionAck : Grammar MissionAck.MissionAck =
  do (target_system : uint 8) <- GetByte
     (target_component : uint 8) <- GetByte
     (type : MavEnums.MavMissionResult) <- MavEnums.MavMissionResult
     (mission_type : MavEnums.MavMissionType) <- MavEnums.MavMissionType
     pure {target_system = target_system,
           target_component = target_component,
           type = type,
           mission_type = mission_type}
 
MissionAck._MissionAck : Grammar {} =
  do @GetByte
     @GetByte
     MavEnums._MavMissionResult
     MavEnums._MavMissionType
module Main
 
--- Imports:
import MissionItemInt
import MissionCount
import MissionAck
 
--- Type defs:
type Main.Main0 = Choose { ack: MissionAck.MissionAck
                         ; count: MissionCount.MissionCount
                         ; itemInt: MissionItemInt.MissionItemInt
                         }
 
--- Rules:
 
Main.Main : Grammar [Main.Main0] =
  do ($$ : [Main.Main0]) <- Many[] do ($$ : Main.Main0) <- Choose biased
                                                             { {- ack -} do (_268 : MissionAck.MissionAck) <- MissionAck.MissionAck
                                                                            pure {ack: _268}
                                                             | {- count -} do (_269 : MissionCount.MissionCount) <- MissionCount.MissionCount
                                                                              pure {count: _269}
                                                             | {- itemInt -} do (_270 : MissionItemInt.MissionItemInt) <- MissionItemInt.MissionItemInt
                                                                                pure {itemInt: _270}
                                                             }
                                      pure $$
     pure $$
 
Main._Main : Grammar {} =
  @Many[] Choose biased
            { {- ack -} MissionAck._MissionAck
            | {- count -} MissionCount._MissionCount
            | {- itemInt -} MissionItemInt._MissionItemInt
            }
