module T069
 
--- Imports:
 
--- Type defs:
type T069.Example = { x: uint 16
                    ; y: uint 16
                    }
 
type T069.Main = { one: T069.Example
                 ; two: T069.Example
                 }
 
--- Rules:
 
T069.Word16 (?be : bool) : Grammar (uint 16) =
  do (b1 : uint 8) <- Match UInt8
     (b2 : uint 8) <- Match UInt8
     ($$ : uint 16) <- if ?be then pure (b1 # b2) else pure (b2 # b1)
     pure $$
 
T069.Example : Grammar T069.Example =
  do (?be : bool) <- do (_12 : uint 8) <- Match UInt8
                        pure (_12 == 0)
     (x : uint 16) <- T069.Word16 ?be
     (y : uint 16) <- T069.Word16 ?be
     pure {x = x,
           y = y}
 
T069.Main : Grammar T069.Main =
  do SetStream (arrayStream "array" [1,
                                     1,
                                     0,
                                     1,
                                     0])
     (one : T069.Example) <- T069.Example
     SetStream (arrayStream "array" [0,
                                     1,
                                     0,
                                     1,
                                     0])
     (two : T069.Example) <- T069.Example
     pure {one = one,
           two = two}
 
T069.Word16_ (?be : bool) : Grammar {} =
  do @Match UInt8
     @Match UInt8
     if ?be then pure {} else pure {}
 
T069.Example_ : Grammar {} =
  do (?be : bool) <- do (_12 : uint 8) <- Match UInt8
                        pure (_12 == 0)
     T069.Word16_ ?be
     T069.Word16_ ?be
 
T069.Main_ : Grammar {} =
  do SetStream (arrayStream "array" [1,
                                     1,
                                     0,
                                     1,
                                     0])
     T069.Example_
     SetStream (arrayStream "array" [0,
                                     1,
                                     0,
                                     1,
                                     0])
     T069.Example_
