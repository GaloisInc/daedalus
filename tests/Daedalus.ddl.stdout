module Daedalus
 
--- Imports:
 
--- Type defs:
 
--- Rules:
 
Daedalus.joinWords ?a0 ?a1 ?a2 (?a0 + ?a1 = ?a2) (?a1 + ?a0 = ?a2) (?bigEndian : bool) (a : uint ?a0) (b : uint ?a1) : uint ?a2 =
  if ?bigEndian then a # b else b # a
 
Daedalus.UInt16 (?bigEndian : bool) : Grammar (uint 16) =
  do (_84 : uint 8) <- Match UInt8
     (_85 : uint 8) <- Match UInt8
     pure (Daedalus.joinWords 8 8 16 ?bigEndian _84 _85)
 
Daedalus.UInt32 (?bigEndian : bool) : Grammar (uint 32) =
  do (_87 : uint 16) <- Daedalus.UInt16 ?bigEndian
     (_88 : uint 16) <- Daedalus.UInt16 ?bigEndian
     pure (Daedalus.joinWords 16 16 32 ?bigEndian _87 _88)
 
Daedalus.UInt64 (?bigEndian : bool) : Grammar (uint 64) =
  do (_90 : uint 32) <- Daedalus.UInt32 ?bigEndian
     (_91 : uint 32) <- Daedalus.UInt32 ?bigEndian
     pure (Daedalus.joinWords 32 32 64 ?bigEndian _90 _91)
 
Daedalus.SInt16 (?bigEndian : bool) : Grammar (sint 16) =
  do (_93 : uint 16) <- Daedalus.UInt16 ?bigEndian
     pure (_93 as sint 16)
 
Daedalus.SInt32 (?bigEndian : bool) : Grammar (sint 32) =
  do (_95 : uint 32) <- Daedalus.UInt32 ?bigEndian
     pure (_95 as sint 32)
 
Daedalus.SInt64 (?bigEndian : bool) : Grammar (sint 64) =
  do (_97 : uint 64) <- Daedalus.UInt64 ?bigEndian
     pure (_97 as sint 64)
 
Daedalus.wordToHalfFloat (w : uint 16) : float =
  let sign = w >> 15 as uint 1 in
  let expo = w >> 10 as uint 5 in
  let mant = w as uint 10 in
  if (expo == 0) then let magic = 126 << 23 in
                      let num = (wordToFloat (magic + (0 # mant))) - (wordToFloat magic) in
                      if (sign == 1) then - num else num else let newExp = if (expo == 0x1F) then 0xFF else (127 - 15) + (0 # expo) in
                                                              wordToFloat (((sign # newExp) # mant) # 0)
 
Daedalus.HalfFloat (?bigEndian : bool) : Grammar float =
  do (_99 : uint 16) <- Daedalus.UInt16 ?bigEndian
     pure (Daedalus.wordToHalfFloat _99)
 
Daedalus.Float (?bigEndian : bool) : Grammar float =
  do (_101 : uint 32) <- Daedalus.UInt32 ?bigEndian
     pure (wordToFloat _101)
 
Daedalus.Double (?bigEndian : bool) : Grammar double =
  do (_103 : uint 64) <- Daedalus.UInt64 ?bigEndian
     pure (wordToDouble _103)
 
Daedalus.BEUInt16 : Grammar (uint 16) =
  do (?bigEndian : bool) <- pure true
     ($$ : uint 16) <- Daedalus.UInt16 ?bigEndian
     pure $$
 
Daedalus.BEUInt32 : Grammar (uint 32) =
  do (?bigEndian : bool) <- pure true
     ($$ : uint 32) <- Daedalus.UInt32 ?bigEndian
     pure $$
 
Daedalus.BEUInt64 : Grammar (uint 64) =
  do (?bigEndian : bool) <- pure true
     ($$ : uint 64) <- Daedalus.UInt64 ?bigEndian
     pure $$
 
Daedalus.BESInt16 : Grammar (sint 16) =
  do (?bigEndian : bool) <- pure true
     ($$ : sint 16) <- Daedalus.SInt16 ?bigEndian
     pure $$
 
Daedalus.BESInt32 : Grammar (sint 32) =
  do (?bigEndian : bool) <- pure true
     ($$ : sint 32) <- Daedalus.SInt32 ?bigEndian
     pure $$
 
Daedalus.BESInt64 : Grammar (sint 64) =
  do (?bigEndian : bool) <- pure true
     ($$ : sint 64) <- Daedalus.SInt64 ?bigEndian
     pure $$
 
Daedalus.BEHalfFloat : Grammar float =
  do (?bigEndian : bool) <- pure true
     ($$ : float) <- Daedalus.HalfFloat ?bigEndian
     pure $$
 
Daedalus.BEFloat : Grammar float =
  do (?bigEndian : bool) <- pure true
     ($$ : float) <- Daedalus.Float ?bigEndian
     pure $$
 
Daedalus.BEDouble : Grammar double =
  do (?bigEndian : bool) <- pure true
     ($$ : double) <- Daedalus.Double ?bigEndian
     pure $$
 
Daedalus.LEUInt16 : Grammar (uint 16) =
  do (?bigEndian : bool) <- pure false
     ($$ : uint 16) <- Daedalus.UInt16 ?bigEndian
     pure $$
 
Daedalus.LEUInt32 : Grammar (uint 32) =
  do (?bigEndian : bool) <- pure false
     ($$ : uint 32) <- Daedalus.UInt32 ?bigEndian
     pure $$
 
Daedalus.LEUInt64 : Grammar (uint 64) =
  do (?bigEndian : bool) <- pure false
     ($$ : uint 64) <- Daedalus.UInt64 ?bigEndian
     pure $$
 
Daedalus.LESInt16 : Grammar (sint 16) =
  do (?bigEndian : bool) <- pure false
     ($$ : sint 16) <- Daedalus.SInt16 ?bigEndian
     pure $$
 
Daedalus.LESInt32 : Grammar (sint 32) =
  do (?bigEndian : bool) <- pure false
     ($$ : sint 32) <- Daedalus.SInt32 ?bigEndian
     pure $$
 
Daedalus.LESInt64 : Grammar (sint 64) =
  do (?bigEndian : bool) <- pure false
     ($$ : sint 64) <- Daedalus.SInt64 ?bigEndian
     pure $$
 
Daedalus.LEHalfFloat : Grammar float =
  do (?bigEndian : bool) <- pure false
     ($$ : float) <- Daedalus.HalfFloat ?bigEndian
     pure $$
 
Daedalus.LEFloat : Grammar float =
  do (?bigEndian : bool) <- pure false
     ($$ : float) <- Daedalus.Float ?bigEndian
     pure $$
 
Daedalus.LEDouble : Grammar double =
  do (?bigEndian : bool) <- pure false
     ($$ : double) <- Daedalus.Double ?bigEndian
     pure $$
 
Daedalus.Guard (b : bool) : Grammar {} =
  case b is
    { true -> pure {}
    }
 
Daedalus.GuardMsg (p : bool) (s : [uint 8]) : Grammar {} =
  if p then pure {} else Fail (concat ["Guard failed: ",
                                       s])
 
Daedalus.When ?a0 ?a1 (P : Grammar ?a1) (x : ?a0) : Grammar ?a0 =
  do do P
        pure {}
     ($$ : ?a0) <- pure x
     pure $$
 
Daedalus.Default ?a0 (x : ?a0) (P : Grammar ?a0) : Grammar ?a0 =
  Choose biased
    { P
    | pure x
    }
 
Daedalus.Only ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do ($$ : ?a0) <- P
     END
     pure $$
 
Daedalus.numBase ?a0 ?a1 ?a2 (Literal 0 ?a2) (HasKey ?a0 ?a1) (HasElement ?a0 ?a2) (Traversable ?a0) (Arith ?a2) (base : ?a2) (ds : ?a0) : ?a2 =
  for ((val : ?a2) = 0; (d : ?a2) in ds)
    ((val * base) + d)
 
Daedalus.min ?a0 (x : ?a0) (y : ?a0) : ?a0 =
  if (x < y) then x else y
 
Daedalus.max ?a0 (x : ?a0) (y : ?a0) : ?a0 =
  if (x < y) then y else x
 
Daedalus.SetStreamAt (n : uint 64) (s : Stream) : Grammar {} =
  do (_141 : Stream) <- StreamOff n s
     SetStream _141
 
Daedalus.Skip (n : uint 64) : Grammar {} =
  do (_142 : Stream) <- CurrentStream
     Daedalus.SetStreamAt n _142
 
Daedalus._SetStreamAt (n : uint 64) (s : Stream) : Grammar {} =
  do (_141 : Stream) <- StreamOff n s
     SetStream _141
 
Daedalus.Chunk ?a0 (n : uint 64) (P : Grammar ?a0) : Grammar ?a0 =
  do (s : Stream) <- CurrentStream
     do (_143 : Stream) <- StreamLen n s
        SetStream _143
     ($$ : ?a0) <- P
     Daedalus._SetStreamAt n s
     pure $$
 
Daedalus.Bytes (n : uint 64) : Grammar Stream =
  Daedalus.Chunk Stream n CurrentStream
 
Daedalus.LookAhead ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do (s : Stream) <- CurrentStream
     ($$ : ?a0) <- P
     SetStream s
     pure $$
 
Daedalus.WithStream ?a0 (s : Stream) (P : Grammar ?a0) : Grammar ?a0 =
  Daedalus.LookAhead ?a0 do SetStream s
                            ($$ : ?a0) <- P
                            pure $$
 
Daedalus._UInt16 : Grammar {} =
  do @Match UInt8
     @Match UInt8
 
Daedalus._UInt32 : Grammar {} =
  do Daedalus._UInt16
     Daedalus._UInt16
 
Daedalus._UInt64 : Grammar {} =
  do Daedalus._UInt32
     Daedalus._UInt32
 
Daedalus._SInt16 : Grammar {} =
  Daedalus._UInt16
 
Daedalus._SInt32 : Grammar {} =
  Daedalus._UInt32
 
Daedalus._SInt64 : Grammar {} =
  Daedalus._UInt64
 
Daedalus._HalfFloat : Grammar {} =
  Daedalus._UInt16
 
Daedalus._Float : Grammar {} =
  Daedalus._UInt32
 
Daedalus._Double : Grammar {} =
  Daedalus._UInt64
 
Daedalus._BEUInt16 : Grammar {} =
  Daedalus._UInt16
 
Daedalus._BEUInt32 : Grammar {} =
  Daedalus._UInt32
 
Daedalus._BEUInt64 : Grammar {} =
  Daedalus._UInt64
 
Daedalus._BESInt16 : Grammar {} =
  Daedalus._SInt16
 
Daedalus._BESInt32 : Grammar {} =
  Daedalus._SInt32
 
Daedalus._BESInt64 : Grammar {} =
  Daedalus._SInt64
 
Daedalus._BEHalfFloat : Grammar {} =
  Daedalus._HalfFloat
 
Daedalus._BEFloat : Grammar {} =
  Daedalus._Float
 
Daedalus._BEDouble : Grammar {} =
  Daedalus._Double
 
Daedalus._LEUInt16 : Grammar {} =
  Daedalus._UInt16
 
Daedalus._LEUInt32 : Grammar {} =
  Daedalus._UInt32
 
Daedalus._LEUInt64 : Grammar {} =
  Daedalus._UInt64
 
Daedalus._LESInt16 : Grammar {} =
  Daedalus._SInt16
 
Daedalus._LESInt32 : Grammar {} =
  Daedalus._SInt32
 
Daedalus._LESInt64 : Grammar {} =
  Daedalus._SInt64
 
Daedalus._LEHalfFloat : Grammar {} =
  Daedalus._HalfFloat
 
Daedalus._LEFloat : Grammar {} =
  Daedalus._Float
 
Daedalus._LEDouble : Grammar {} =
  Daedalus._Double
 
Daedalus._Guard (b : bool) : Grammar {} =
  case b is
    { true -> pure {}
    }
 
Daedalus._GuardMsg (p : bool) (s : [uint 8]) : Grammar {} =
  if p then pure {} else Fail (concat ["Guard failed: ",
                                       s])
 
Daedalus._When ?a0 ?a1 (_P : Grammar {}) : Grammar {} =
  _P
 
Daedalus._Default ?a0 (_P : Grammar {}) : Grammar {} =
  Choose biased
    { _P
    | pure {}
    }
 
Daedalus._Only ?a0 (_P : Grammar {}) : Grammar {} =
  do _P
     END
 
Daedalus._Skip (n : uint 64) : Grammar {} =
  do (_142 : Stream) <- CurrentStream
     Daedalus._SetStreamAt n _142
 
Daedalus._Chunk ?a0 (n : uint 64) (_P : Grammar {}) : Grammar {} =
  do (s : Stream) <- CurrentStream
     do (_143 : Stream) <- StreamLen n s
        SetStream _143
     _P
     Daedalus._SetStreamAt n s
 
Daedalus._Bytes (n : uint 64) : Grammar {} =
  Daedalus._Chunk Stream n (pure {})
 
Daedalus._LookAhead ?a0 (_P : Grammar {}) : Grammar {} =
  do (s : Stream) <- CurrentStream
     _P
     SetStream s
 
Daedalus._WithStream ?a0 (s : Stream) (_P : Grammar {}) : Grammar {} =
  Daedalus._LookAhead ?a0 do SetStream s
                             _P
