module Daedalus
 
--- Imports:
 
--- Type defs:
 
--- Rules:
 
Daedalus.joinWords ?a0 ?a1 ?a2 (?a0 + ?a1 = ?a2) (?a1 + ?a0 = ?a2) (_65 : bool) (a : uint ?a0) (b : uint ?a1) : uint ?a2 =
  if _65 then a # b else b # a
 
Daedalus.UInt16 (_66 : bool) : Grammar (uint 16) =
  do (_67 : uint 8) <- GetByte
     (_68 : uint 8) <- GetByte
     pure (Daedalus.joinWords 8 8 16 _66 _67 _68)
 
Daedalus.UInt32 (_69 : bool) : Grammar (uint 32) =
  do (_70 : uint 16) <- Daedalus.UInt16 _69
     (_71 : uint 16) <- Daedalus.UInt16 _69
     pure (Daedalus.joinWords 16 16 32 _69 _70 _71)
 
Daedalus.UInt64 (_72 : bool) : Grammar (uint 64) =
  do (_73 : uint 32) <- Daedalus.UInt32 _72
     (_74 : uint 32) <- Daedalus.UInt32 _72
     pure (Daedalus.joinWords 32 32 64 _72 _73 _74)
 
Daedalus.SInt16 (_75 : bool) : Grammar (sint 16) =
  do (_76 : uint 16) <- Daedalus.UInt16 _75
     pure (_76 as sint 16)
 
Daedalus.SInt32 (_77 : bool) : Grammar (sint 32) =
  do (_78 : uint 32) <- Daedalus.UInt32 _77
     pure (_78 as sint 32)
 
Daedalus.SInt64 (_79 : bool) : Grammar (sint 64) =
  do (_80 : uint 64) <- Daedalus.UInt64 _79
     pure (_80 as sint 64)
 
Daedalus.wordToHalfFloat (w : uint 16) : float =
  let sign = w >> 15 as uint 1 in
  let expo = w >> 10 as uint 5 in
  let mant = w as uint 10 in
  if (expo == 0) then let magic = 126 << 23 in
                      let num = (wordToFloat (magic + (0 # mant))) - (wordToFloat magic) in
                      if (sign == 1) then - num else num else let newExp = if (expo == 0x1F) then 0xFF else (127 - 15) + (0 # expo) in
                                                              wordToFloat (((sign # newExp) # mant) # 0)
 
Daedalus.HalfFloat (_81 : bool) : Grammar float =
  do (_82 : uint 16) <- Daedalus.UInt16 _81
     pure (Daedalus.wordToHalfFloat _82)
 
Daedalus.Float (_83 : bool) : Grammar float =
  do (_84 : uint 32) <- Daedalus.UInt32 _83
     pure (wordToFloat _84)
 
Daedalus.Double (_85 : bool) : Grammar double =
  do (_86 : uint 64) <- Daedalus.UInt64 _85
     pure (wordToDouble _86)
 
Daedalus.BEUInt16 : Grammar (uint 16) =
  do (_87 : bool) <- pure true
     ($$ : uint 16) <- Daedalus.UInt16 _87
     pure $$
 
Daedalus.BEUInt32 : Grammar (uint 32) =
  do (_89 : bool) <- pure true
     ($$ : uint 32) <- Daedalus.UInt32 _89
     pure $$
 
Daedalus.BEUInt64 : Grammar (uint 64) =
  do (_91 : bool) <- pure true
     ($$ : uint 64) <- Daedalus.UInt64 _91
     pure $$
 
Daedalus.BESInt16 : Grammar (sint 16) =
  do (_93 : bool) <- pure true
     ($$ : sint 16) <- Daedalus.SInt16 _93
     pure $$
 
Daedalus.BESInt32 : Grammar (sint 32) =
  do (_95 : bool) <- pure true
     ($$ : sint 32) <- Daedalus.SInt32 _95
     pure $$
 
Daedalus.BESInt64 : Grammar (sint 64) =
  do (_97 : bool) <- pure true
     ($$ : sint 64) <- Daedalus.SInt64 _97
     pure $$
 
Daedalus.BEHalfFloat : Grammar float =
  do (_99 : bool) <- pure true
     ($$ : float) <- Daedalus.HalfFloat _99
     pure $$
 
Daedalus.BEFloat : Grammar float =
  do (_101 : bool) <- pure true
     ($$ : float) <- Daedalus.Float _101
     pure $$
 
Daedalus.BEDouble : Grammar double =
  do (_103 : bool) <- pure true
     ($$ : double) <- Daedalus.Double _103
     pure $$
 
Daedalus.LEUInt16 : Grammar (uint 16) =
  do (_105 : bool) <- pure false
     ($$ : uint 16) <- Daedalus.UInt16 _105
     pure $$
 
Daedalus.LEUInt32 : Grammar (uint 32) =
  do (_107 : bool) <- pure false
     ($$ : uint 32) <- Daedalus.UInt32 _107
     pure $$
 
Daedalus.LEUInt64 : Grammar (uint 64) =
  do (_109 : bool) <- pure false
     ($$ : uint 64) <- Daedalus.UInt64 _109
     pure $$
 
Daedalus.LESInt16 : Grammar (sint 16) =
  do (_111 : bool) <- pure false
     ($$ : sint 16) <- Daedalus.SInt16 _111
     pure $$
 
Daedalus.LESInt32 : Grammar (sint 32) =
  do (_113 : bool) <- pure false
     ($$ : sint 32) <- Daedalus.SInt32 _113
     pure $$
 
Daedalus.LESInt64 : Grammar (sint 64) =
  do (_115 : bool) <- pure false
     ($$ : sint 64) <- Daedalus.SInt64 _115
     pure $$
 
Daedalus.LEHalfFloat : Grammar float =
  do (_117 : bool) <- pure false
     ($$ : float) <- Daedalus.HalfFloat _117
     pure $$
 
Daedalus.LEFloat : Grammar float =
  do (_119 : bool) <- pure false
     ($$ : float) <- Daedalus.Float _119
     pure $$
 
Daedalus.LEDouble : Grammar double =
  do (_121 : bool) <- pure false
     ($$ : double) <- Daedalus.Double _121
     pure $$
 
Daedalus.Guard (b : bool) : Grammar {} =
  case b is
    { true -> pure {}
    }
 
Daedalus.Only ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do ($$ : ?a0) <- P
     END
     pure $$
 
Daedalus.min ?a0 (x : ?a0) (y : ?a0) : ?a0 =
  if (x < y) then x else y
 
Daedalus.max ?a0 (x : ?a0) (y : ?a0) : ?a0 =
  if (x < y) then y else x
 
Daedalus.SetStreamAt (n : uint 64) (s : Stream) : Grammar {} =
  do (_123 : Stream) <- StreamOff n s
     SetStream _123
 
Daedalus.Skip (n : uint 64) : Grammar {} =
  do (_124 : Stream) <- CurrentStream
     Daedalus.SetStreamAt n _124
 
Daedalus._SetStreamAt (n : uint 64) (s : Stream) : Grammar {} =
  do (_123 : Stream) <- StreamOff n s
     SetStream _123
 
Daedalus.Chunk ?a0 (n : uint 64) (P : Grammar ?a0) : Grammar ?a0 =
  do (s : Stream) <- CurrentStream
     do (_125 : Stream) <- StreamLen n s
        SetStream _125
     ($$ : ?a0) <- P
     Daedalus._SetStreamAt n s
     pure $$
 
Daedalus.Bytes (n : uint 64) : Grammar Stream =
  Daedalus.Chunk Stream n CurrentStream
 
Daedalus.LookAhead ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do (s : Stream) <- CurrentStream
     ($$ : ?a0) <- P
     SetStream s
     pure $$
 
Daedalus._UInt16 : Grammar {} =
  do @GetByte
     @GetByte
 
Daedalus._UInt32 : Grammar {} =
  do Daedalus._UInt16
     Daedalus._UInt16
 
Daedalus._UInt64 : Grammar {} =
  do Daedalus._UInt32
     Daedalus._UInt32
 
Daedalus._SInt16 : Grammar {} =
  Daedalus._UInt16
 
Daedalus._SInt32 : Grammar {} =
  Daedalus._UInt32
 
Daedalus._SInt64 : Grammar {} =
  Daedalus._UInt64
 
Daedalus._HalfFloat : Grammar {} =
  Daedalus._UInt16
 
Daedalus._Float : Grammar {} =
  Daedalus._UInt32
 
Daedalus._Double : Grammar {} =
  Daedalus._UInt64
 
Daedalus._BEUInt16 : Grammar {} =
  Daedalus._UInt16
 
Daedalus._BEUInt32 : Grammar {} =
  Daedalus._UInt32
 
Daedalus._BEUInt64 : Grammar {} =
  Daedalus._UInt64
 
Daedalus._BESInt16 : Grammar {} =
  Daedalus._SInt16
 
Daedalus._BESInt32 : Grammar {} =
  Daedalus._SInt32
 
Daedalus._BESInt64 : Grammar {} =
  Daedalus._SInt64
 
Daedalus._BEHalfFloat : Grammar {} =
  Daedalus._HalfFloat
 
Daedalus._BEFloat : Grammar {} =
  Daedalus._Float
 
Daedalus._BEDouble : Grammar {} =
  Daedalus._Double
 
Daedalus._LEUInt16 : Grammar {} =
  Daedalus._UInt16
 
Daedalus._LEUInt32 : Grammar {} =
  Daedalus._UInt32
 
Daedalus._LEUInt64 : Grammar {} =
  Daedalus._UInt64
 
Daedalus._LESInt16 : Grammar {} =
  Daedalus._SInt16
 
Daedalus._LESInt32 : Grammar {} =
  Daedalus._SInt32
 
Daedalus._LESInt64 : Grammar {} =
  Daedalus._SInt64
 
Daedalus._LEHalfFloat : Grammar {} =
  Daedalus._HalfFloat
 
Daedalus._LEFloat : Grammar {} =
  Daedalus._Float
 
Daedalus._LEDouble : Grammar {} =
  Daedalus._Double
 
Daedalus._Guard (b : bool) : Grammar {} =
  case b is
    { true -> pure {}
    }
 
Daedalus._Only ?a0 (_P : Grammar {}) : Grammar {} =
  do _P
     END
 
Daedalus._Skip (n : uint 64) : Grammar {} =
  do (_124 : Stream) <- CurrentStream
     Daedalus._SetStreamAt n _124
 
Daedalus._Chunk ?a0 (n : uint 64) (_P : Grammar {}) : Grammar {} =
  do (s : Stream) <- CurrentStream
     do (_125 : Stream) <- StreamLen n s
        SetStream _125
     _P
     Daedalus._SetStreamAt n s
 
Daedalus._Bytes (n : uint 64) : Grammar {} =
  Daedalus._Chunk Stream n (pure {})
 
Daedalus._LookAhead ?a0 (_P : Grammar {}) : Grammar {} =
  do (s : Stream) <- CurrentStream
     _P
     SetStream s
