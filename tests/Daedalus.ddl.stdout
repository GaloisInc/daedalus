module Daedalus
 
--- Imports:
 
--- Type defs:
 
--- Rules:
 
Daedalus.joinWords ?a0 ?a1 ?a2 (?a0 + ?a1 = ?a2) (?a1 + ?a0 = ?a2) (?bigEndian : bool) (a : uint ?a0) (b : uint ?a1) : uint ?a2 =
  if ?bigEndian then a # b else b # a
 
Daedalus.UInt16 (?bigEndian : bool) : Grammar (uint 16) =
  do (_105 : uint 8) <- Match UInt8
     (_106 : uint 8) <- Match UInt8
     pure (Daedalus.joinWords 8 8 16 ?bigEndian _105 _106)
 
Daedalus.UInt32 (?bigEndian : bool) : Grammar (uint 32) =
  do (_108 : uint 16) <- Daedalus.UInt16 ?bigEndian
     (_109 : uint 16) <- Daedalus.UInt16 ?bigEndian
     pure (Daedalus.joinWords 16 16 32 ?bigEndian _108 _109)
 
Daedalus.UInt64 (?bigEndian : bool) : Grammar (uint 64) =
  do (_111 : uint 32) <- Daedalus.UInt32 ?bigEndian
     (_112 : uint 32) <- Daedalus.UInt32 ?bigEndian
     pure (Daedalus.joinWords 32 32 64 ?bigEndian _111 _112)
 
Daedalus.SInt16 (?bigEndian : bool) : Grammar (sint 16) =
  do (_114 : uint 16) <- Daedalus.UInt16 ?bigEndian
     pure (_114 as sint 16)
 
Daedalus.SInt32 (?bigEndian : bool) : Grammar (sint 32) =
  do (_116 : uint 32) <- Daedalus.UInt32 ?bigEndian
     pure (_116 as sint 32)
 
Daedalus.SInt64 (?bigEndian : bool) : Grammar (sint 64) =
  do (_118 : uint 64) <- Daedalus.UInt64 ?bigEndian
     pure (_118 as sint 64)
 
Daedalus.wordToHalfFloat (w : uint 16) : float =
  let sign = w >> 15 as uint 1 in
  let expo = w >> 10 as uint 5 in
  let mant = w as uint 10 in
  if (expo == 0) then let magic = 126 << 23 in
                      let num = (wordToFloat (magic + (0 # mant))) - (wordToFloat magic) in
                      if (sign == 1) then - num else num else let newExp = if (expo == 0x1F) then 0xFF else (127 - 15) + (0 # expo) in
                                                              wordToFloat (((sign # newExp) # mant) # 0)
 
Daedalus.HalfFloat (?bigEndian : bool) : Grammar float =
  do (_120 : uint 16) <- Daedalus.UInt16 ?bigEndian
     pure (Daedalus.wordToHalfFloat _120)
 
Daedalus.Float (?bigEndian : bool) : Grammar float =
  do (_122 : uint 32) <- Daedalus.UInt32 ?bigEndian
     pure (wordToFloat _122)
 
Daedalus.Double (?bigEndian : bool) : Grammar double =
  do (_124 : uint 64) <- Daedalus.UInt64 ?bigEndian
     pure (wordToDouble _124)
 
Daedalus.BEUInt16 : Grammar (uint 16) =
  do (?bigEndian : bool) <- pure true
     ($$ : uint 16) <- Daedalus.UInt16 ?bigEndian
     pure $$
 
Daedalus.BEUInt32 : Grammar (uint 32) =
  do (?bigEndian : bool) <- pure true
     ($$ : uint 32) <- Daedalus.UInt32 ?bigEndian
     pure $$
 
Daedalus.BEUInt64 : Grammar (uint 64) =
  do (?bigEndian : bool) <- pure true
     ($$ : uint 64) <- Daedalus.UInt64 ?bigEndian
     pure $$
 
Daedalus.BESInt16 : Grammar (sint 16) =
  do (?bigEndian : bool) <- pure true
     ($$ : sint 16) <- Daedalus.SInt16 ?bigEndian
     pure $$
 
Daedalus.BESInt32 : Grammar (sint 32) =
  do (?bigEndian : bool) <- pure true
     ($$ : sint 32) <- Daedalus.SInt32 ?bigEndian
     pure $$
 
Daedalus.BESInt64 : Grammar (sint 64) =
  do (?bigEndian : bool) <- pure true
     ($$ : sint 64) <- Daedalus.SInt64 ?bigEndian
     pure $$
 
Daedalus.BEHalfFloat : Grammar float =
  do (?bigEndian : bool) <- pure true
     ($$ : float) <- Daedalus.HalfFloat ?bigEndian
     pure $$
 
Daedalus.BEFloat : Grammar float =
  do (?bigEndian : bool) <- pure true
     ($$ : float) <- Daedalus.Float ?bigEndian
     pure $$
 
Daedalus.BEDouble : Grammar double =
  do (?bigEndian : bool) <- pure true
     ($$ : double) <- Daedalus.Double ?bigEndian
     pure $$
 
Daedalus.LEUInt16 : Grammar (uint 16) =
  do (?bigEndian : bool) <- pure false
     ($$ : uint 16) <- Daedalus.UInt16 ?bigEndian
     pure $$
 
Daedalus.LEUInt32 : Grammar (uint 32) =
  do (?bigEndian : bool) <- pure false
     ($$ : uint 32) <- Daedalus.UInt32 ?bigEndian
     pure $$
 
Daedalus.LEUInt64 : Grammar (uint 64) =
  do (?bigEndian : bool) <- pure false
     ($$ : uint 64) <- Daedalus.UInt64 ?bigEndian
     pure $$
 
Daedalus.LESInt16 : Grammar (sint 16) =
  do (?bigEndian : bool) <- pure false
     ($$ : sint 16) <- Daedalus.SInt16 ?bigEndian
     pure $$
 
Daedalus.LESInt32 : Grammar (sint 32) =
  do (?bigEndian : bool) <- pure false
     ($$ : sint 32) <- Daedalus.SInt32 ?bigEndian
     pure $$
 
Daedalus.LESInt64 : Grammar (sint 64) =
  do (?bigEndian : bool) <- pure false
     ($$ : sint 64) <- Daedalus.SInt64 ?bigEndian
     pure $$
 
Daedalus.LEHalfFloat : Grammar float =
  do (?bigEndian : bool) <- pure false
     ($$ : float) <- Daedalus.HalfFloat ?bigEndian
     pure $$
 
Daedalus.LEFloat : Grammar float =
  do (?bigEndian : bool) <- pure false
     ($$ : float) <- Daedalus.Float ?bigEndian
     pure $$
 
Daedalus.LEDouble : Grammar double =
  do (?bigEndian : bool) <- pure false
     ($$ : double) <- Daedalus.Double ?bigEndian
     pure $$
 
Daedalus.Guard (b : bool) : Grammar {} =
  case b is
    { true -> pure {}
    }
 
Daedalus.GuardMsg (p : bool) (s : [uint 8]) : Grammar {} =
  if p then pure {} else Fail (concat ["Guard failed: ",
                                       s])
 
Daedalus.When ?a0 ?a1 (P : Grammar ?a1) (x : ?a0) : Grammar ?a0 =
  do do P
        pure {}
     ($$ : ?a0) <- pure x
     pure $$
 
Daedalus.Default ?a0 (x : ?a0) (P : Grammar ?a0) : Grammar ?a0 =
  Choose biased
    { P
    | pure x
    }
 
Daedalus.Only ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do ($$ : ?a0) <- P
     END
     pure $$
 
Daedalus.numBase ?a0 ?a1 ?a2 (Literal 0 ?a2) (HasKey ?a0 ?a1) (HasElement ?a0 ?a2) (Traversable ?a0) (Arith ?a2) (base : ?a2) (ds : ?a0) : ?a2 =
  for ((val : ?a2) = 0; (d : ?a2) in ds)
    ((val * base) + d)
 
Daedalus.min ?a0 (x : ?a0) (y : ?a0) : ?a0 =
  if (x < y) then x else y
 
Daedalus.max ?a0 (x : ?a0) (y : ?a0) : ?a0 =
  if (x < y) then y else x
 
Daedalus.SetStreamAt (n : uint 64) (s : Stream) : Grammar {} =
  do (_162 : Stream) <- StreamOff n s
     SetStream _162
 
Daedalus.Skip (n : uint 64) : Grammar {} =
  do (_163 : Stream) <- CurrentStream
     Daedalus.SetStreamAt n _163
 
Daedalus.SetStreamAt_ (n : uint 64) (s : Stream) : Grammar {} =
  do (_162 : Stream) <- StreamOff n s
     SetStream _162
 
Daedalus.Chunk ?a0 (n : uint 64) (P : Grammar ?a0) : Grammar ?a0 =
  do (s : Stream) <- CurrentStream
     do (_164 : Stream) <- StreamLen n s
        SetStream _164
     ($$ : ?a0) <- P
     Daedalus.SetStreamAt_ n s
     pure $$
 
Daedalus.Bytes (n : uint 64) : Grammar Stream =
  Daedalus.Chunk Stream n CurrentStream
 
Daedalus.LookAhead ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do (s : Stream) <- CurrentStream
     ($$ : ?a0) <- P
     SetStream s
     pure $$
 
Daedalus.WithStream ?a0 (s : Stream) (P : Grammar ?a0) : Grammar ?a0 =
  Daedalus.LookAhead ?a0 do SetStream s
                            ($$ : ?a0) <- P
                            pure $$
 
Daedalus.LookAhead_ ?a0 (P_ : Grammar {}) : Grammar {} =
  do (s : Stream) <- CurrentStream
     P_
     SetStream s
 
Daedalus.WithStream_ ?a0 (s : Stream) (P_ : Grammar {}) : Grammar {} =
  Daedalus.LookAhead_ ?a0 do SetStream s
                             P_
 
Daedalus.TestAcceptsPrefix ?a0 (Parser : Grammar ?a0) (input : [uint 8]) : Grammar {} =
  Daedalus.WithStream_ ?a0 (arrayStream "array" input) do Parser
                                                          pure {}
 
Daedalus.TestAccepts ?a0 (Parser : Grammar ?a0) (input : [uint 8]) : Grammar {} =
  Daedalus.TestAcceptsPrefix ?a0 (Daedalus.Only ?a0 Parser) input
 
Daedalus.TestParsesPrefix ?a0 (Parser : Grammar ?a0) (input : [uint 8]) (expected : ?a0) : Grammar {} =
  Daedalus.WithStream {} (arrayStream "array" input) do (result : ?a0) <- Parser
                                                        ($$ : {}) <- case result == expected is
                                                                       { true -> pure {}
                                                                       }
                                                        pure $$
 
Daedalus.TestParses ?a0 (Parser : Grammar ?a0) (input : [uint 8]) (expected : ?a0) : Grammar {} =
  Daedalus.TestParsesPrefix ?a0 (Daedalus.Only ?a0 Parser) input expected
 
Daedalus.TestFailsPrefix ?a0 (Parser : Grammar ?a0) (input : [uint 8]) : Grammar {} =
  do (_167 : Maybe {}) <- Optional (Daedalus.TestAcceptsPrefix ?a0 Parser input)
     case _167 is
       { just _ -> {- case branch  just _ -} Fail "unexpected success"
       ; nothing -> {- case branch  nothing -} pure {}
       }
 
Daedalus.TestFails ?a0 (Parser : Grammar ?a0) (input : [uint 8]) : Grammar {} =
  Daedalus.TestFailsPrefix ?a0 (Daedalus.Only ?a0 Parser) input
 
Daedalus.UInt16_ : Grammar {} =
  do @Match UInt8
     @Match UInt8
 
Daedalus.UInt32_ : Grammar {} =
  do Daedalus.UInt16_
     Daedalus.UInt16_
 
Daedalus.UInt64_ : Grammar {} =
  do Daedalus.UInt32_
     Daedalus.UInt32_
 
Daedalus.SInt16_ : Grammar {} =
  Daedalus.UInt16_
 
Daedalus.SInt32_ : Grammar {} =
  Daedalus.UInt32_
 
Daedalus.SInt64_ : Grammar {} =
  Daedalus.UInt64_
 
Daedalus.HalfFloat_ : Grammar {} =
  Daedalus.UInt16_
 
Daedalus.Float_ : Grammar {} =
  Daedalus.UInt32_
 
Daedalus.Double_ : Grammar {} =
  Daedalus.UInt64_
 
Daedalus.BEUInt16_ : Grammar {} =
  Daedalus.UInt16_
 
Daedalus.BEUInt32_ : Grammar {} =
  Daedalus.UInt32_
 
Daedalus.BEUInt64_ : Grammar {} =
  Daedalus.UInt64_
 
Daedalus.BESInt16_ : Grammar {} =
  Daedalus.SInt16_
 
Daedalus.BESInt32_ : Grammar {} =
  Daedalus.SInt32_
 
Daedalus.BESInt64_ : Grammar {} =
  Daedalus.SInt64_
 
Daedalus.BEHalfFloat_ : Grammar {} =
  Daedalus.HalfFloat_
 
Daedalus.BEFloat_ : Grammar {} =
  Daedalus.Float_
 
Daedalus.BEDouble_ : Grammar {} =
  Daedalus.Double_
 
Daedalus.LEUInt16_ : Grammar {} =
  Daedalus.UInt16_
 
Daedalus.LEUInt32_ : Grammar {} =
  Daedalus.UInt32_
 
Daedalus.LEUInt64_ : Grammar {} =
  Daedalus.UInt64_
 
Daedalus.LESInt16_ : Grammar {} =
  Daedalus.SInt16_
 
Daedalus.LESInt32_ : Grammar {} =
  Daedalus.SInt32_
 
Daedalus.LESInt64_ : Grammar {} =
  Daedalus.SInt64_
 
Daedalus.LEHalfFloat_ : Grammar {} =
  Daedalus.HalfFloat_
 
Daedalus.LEFloat_ : Grammar {} =
  Daedalus.Float_
 
Daedalus.LEDouble_ : Grammar {} =
  Daedalus.Double_
 
Daedalus.Guard_ (b : bool) : Grammar {} =
  case b is
    { true -> pure {}
    }
 
Daedalus.GuardMsg_ (p : bool) (s : [uint 8]) : Grammar {} =
  if p then pure {} else Fail (concat ["Guard failed: ",
                                       s])
 
Daedalus.When_ ?a0 ?a1 (P_ : Grammar {}) : Grammar {} =
  P_
 
Daedalus.Default_ ?a0 (P_ : Grammar {}) : Grammar {} =
  Choose biased
    { P_
    | pure {}
    }
 
Daedalus.Only_ ?a0 (P_ : Grammar {}) : Grammar {} =
  do P_
     END
 
Daedalus.Skip_ (n : uint 64) : Grammar {} =
  do (_163 : Stream) <- CurrentStream
     Daedalus.SetStreamAt_ n _163
 
Daedalus.Chunk_ ?a0 (n : uint 64) (P_ : Grammar {}) : Grammar {} =
  do (s : Stream) <- CurrentStream
     do (_164 : Stream) <- StreamLen n s
        SetStream _164
     P_
     Daedalus.SetStreamAt_ n s
 
Daedalus.Bytes_ (n : uint 64) : Grammar {} =
  Daedalus.Chunk_ Stream n (pure {})
 
Daedalus.TestAcceptsPrefix_ ?a0 (input : [uint 8]) (Parser_ : Grammar {}) : Grammar {} =
  Daedalus.WithStream_ ?a0 (arrayStream "array" input) Parser_
 
Daedalus.TestAccepts_ ?a0 (input : [uint 8]) (Parser_ : Grammar {}) : Grammar {} =
  Daedalus.TestAcceptsPrefix_ ?a0 input (Daedalus.Only_ ?a0 Parser_)
 
Daedalus.TestParsesPrefix_ ?a0 (Parser : Grammar ?a0) (input : [uint 8]) (expected : ?a0) : Grammar {} =
  Daedalus.WithStream_ {} (arrayStream "array" input) do (result : ?a0) <- Parser
                                                         case result == expected is
                                                           { true -> pure {}
                                                           }
 
Daedalus.TestParses_ ?a0 (Parser : Grammar ?a0) (input : [uint 8]) (expected : ?a0) : Grammar {} =
  Daedalus.TestParsesPrefix_ ?a0 (Daedalus.Only ?a0 Parser) input expected
 
Daedalus.TestFailsPrefix_ ?a0 (Parser : Grammar ?a0) (input : [uint 8]) : Grammar {} =
  do (_167 : Maybe {}) <- Optional (Daedalus.TestAcceptsPrefix ?a0 Parser input)
     case _167 is
       { just _ -> {- case branch  just _ -} Fail "unexpected success"
       ; nothing -> {- case branch  nothing -} pure {}
       }
 
Daedalus.TestFails_ ?a0 (Parser : Grammar ?a0) (input : [uint 8]) : Grammar {} =
  Daedalus.TestFailsPrefix_ ?a0 (Daedalus.Only ?a0 Parser) input
