module T050
 
--- Imports:
 
--- Type defs:
type T050.V = Choose { number: int
                     ; other: [uint 8]
                     }
 
type T050.Main = { x1: int
                 ; x2: int
                 }
 
--- Rules:
 
T050.V ?a0 (Coerce dynamic ?a0 int) (Literal 1 ?a0) : Grammar T050.V =
  Choose biased
    { {- number -} do (_12 : int) <- 1 AS int
                      pure {number: _12}
    | {- other -} do (_13 : [uint 8]) <- MatchBytes "X"
                     pure {other: _13}
    }
 
T050.Default ?a0 (x : ?a0) (P : Grammar ?a0) : Grammar ?a0 =
  Choose biased
    { P
    | pure x
    }
 
T050.LookupInt (arr : [T050.V]) (i : uint 64) : Grammar int =
  T050.Default int 0 do (n : T050.V) <- Index arr i
                        Commit
                          do ($$ : int) <- case n is
                                             { {| number = _15 |} -> pure _15
                                             }
                             pure $$
 
T050.arr : [T050.V] =
  [{number: 1},
   {other: "Y"}]
 
T050.Main : Grammar T050.Main =
  do (x1 : int) <- T050.LookupInt T050.arr 0
     (x2 : int) <- T050.LookupInt T050.arr 2
     pure {x1 = x1,
           x2 = x2}
 
T050.V_ ?a0 (Coerce dynamic ?a0 int) (Literal 1 ?a0) : Grammar {} =
  Choose biased
    { {- number -} @(1 AS int)
    | {- other -} @MatchBytes "X"
    }
 
T050.Default_ ?a0 (P_ : Grammar {}) : Grammar {} =
  Choose biased
    { P_
    | pure {}
    }
 
T050.LookupInt_ (arr : [T050.V]) (i : uint 64) : Grammar {} =
  T050.Default_ int do (n : T050.V) <- Index arr i
                       Commit
                         (case n is
                            { {| number = _15 |} -> pure {}
                            })
 
T050.Main_ : Grammar {} =
  do T050.LookupInt_ T050.arr 0
     T050.LookupInt_ T050.arr 2
