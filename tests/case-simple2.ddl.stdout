module case-simple2
 
--- Imports:
 
--- Type defs:
type case-simple2.P = Choose { c1: [uint 8]
                             ; c2: [uint 8]
                             }
 
type case-simple2.Main = { p: case-simple2.P
                         ; tag: [uint 8]
                         }
 
--- Rules:
 
case-simple2.P : Grammar case-simple2.P =
  Choose biased
    { {- c1 -} do (_4 : [uint 8]) <- MatchBytes "a"
                  pure {c1: _4}
    | {- c2 -} do (_5 : [uint 8]) <- MatchBytes "b"
                  pure {c2: _5}
    }
 
case-simple2.Main : Grammar case-simple2.Main =
  do (p : case-simple2.P) <- case-simple2.P
     (tag : [uint 8]) <- case p is
                           { {| c1 = _ |} -> {- case branch  {| c1 = _ |} -} pure "c1"
                           ; {| c2 = _ |} -> {- case branch  {| c2 = _ |} -} pure "c2"
                           }
     pure {p = p,
           tag = tag}
 
case-simple2.P_ : Grammar {} =
  Choose biased
    { {- c1 -} @MatchBytes "a"
    | {- c2 -} @MatchBytes "b"
    }
 
case-simple2.Main_ : Grammar {} =
  do (p : case-simple2.P) <- case-simple2.P
     case p is
       { {| c1 = _ |} -> {- case branch  {| c1 = _ |} -} pure {}
       ; {| c2 = _ |} -> {- case branch  {| c2 = _ |} -} pure {}
       }
