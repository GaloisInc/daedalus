module Daedalus
 
--- Imports:
 
--- Type defs:
 
--- Rules:
 
Daedalus.joinWords ?a0 ?a1 ?a2 (?a0 + ?a1 = ?a2) (?a1 + ?a0 = ?a2) (_69 : bool) (a : uint ?a0) (b : uint ?a1) : uint ?a2 =
  if _69 then a # b else b # a
 
Daedalus.UInt16 (_70 : bool) : Grammar (uint 16) =
  do (_71 : uint 8) <- GetByte
     (_72 : uint 8) <- GetByte
     pure (Daedalus.joinWords 8 8 16 _70 _71 _72)
 
Daedalus.UInt32 (_73 : bool) : Grammar (uint 32) =
  do (_74 : uint 16) <- Daedalus.UInt16 _73
     (_75 : uint 16) <- Daedalus.UInt16 _73
     pure (Daedalus.joinWords 16 16 32 _73 _74 _75)
 
Daedalus.UInt64 (_76 : bool) : Grammar (uint 64) =
  do (_77 : uint 32) <- Daedalus.UInt32 _76
     (_78 : uint 32) <- Daedalus.UInt32 _76
     pure (Daedalus.joinWords 32 32 64 _76 _77 _78)
 
Daedalus.SInt16 (_79 : bool) : Grammar (sint 16) =
  do (_80 : uint 16) <- Daedalus.UInt16 _79
     pure (_80 as sint 16)
 
Daedalus.SInt32 (_81 : bool) : Grammar (sint 32) =
  do (_82 : uint 32) <- Daedalus.UInt32 _81
     pure (_82 as sint 32)
 
Daedalus.SInt64 (_83 : bool) : Grammar (sint 64) =
  do (_84 : uint 64) <- Daedalus.UInt64 _83
     pure (_84 as sint 64)
 
Daedalus.wordToHalfFloat (w : uint 16) : float =
  let sign = w >> 15 as uint 1 in
  let expo = w >> 10 as uint 5 in
  let mant = w as uint 10 in
  if (expo == 0) then let magic = 126 << 23 in
                      let num = (wordToFloat (magic + (0 # mant))) - (wordToFloat magic) in
                      if (sign == 1) then - num else num else let newExp = if (expo == 0x1F) then 0xFF else (127 - 15) + (0 # expo) in
                                                              wordToFloat (((sign # newExp) # mant) # 0)
 
Daedalus.HalfFloat (_85 : bool) : Grammar float =
  do (_86 : uint 16) <- Daedalus.UInt16 _85
     pure (Daedalus.wordToHalfFloat _86)
 
Daedalus.Float (_87 : bool) : Grammar float =
  do (_88 : uint 32) <- Daedalus.UInt32 _87
     pure (wordToFloat _88)
 
Daedalus.Double (_89 : bool) : Grammar double =
  do (_90 : uint 64) <- Daedalus.UInt64 _89
     pure (wordToDouble _90)
 
Daedalus.BEUInt16 : Grammar (uint 16) =
  do (_91 : bool) <- pure true
     ($$ : uint 16) <- Daedalus.UInt16 _91
     pure $$
 
Daedalus.BEUInt32 : Grammar (uint 32) =
  do (_93 : bool) <- pure true
     ($$ : uint 32) <- Daedalus.UInt32 _93
     pure $$
 
Daedalus.BEUInt64 : Grammar (uint 64) =
  do (_95 : bool) <- pure true
     ($$ : uint 64) <- Daedalus.UInt64 _95
     pure $$
 
Daedalus.BESInt16 : Grammar (sint 16) =
  do (_97 : bool) <- pure true
     ($$ : sint 16) <- Daedalus.SInt16 _97
     pure $$
 
Daedalus.BESInt32 : Grammar (sint 32) =
  do (_99 : bool) <- pure true
     ($$ : sint 32) <- Daedalus.SInt32 _99
     pure $$
 
Daedalus.BESInt64 : Grammar (sint 64) =
  do (_101 : bool) <- pure true
     ($$ : sint 64) <- Daedalus.SInt64 _101
     pure $$
 
Daedalus.BEHalfFloat : Grammar float =
  do (_103 : bool) <- pure true
     ($$ : float) <- Daedalus.HalfFloat _103
     pure $$
 
Daedalus.BEFloat : Grammar float =
  do (_105 : bool) <- pure true
     ($$ : float) <- Daedalus.Float _105
     pure $$
 
Daedalus.BEDouble : Grammar double =
  do (_107 : bool) <- pure true
     ($$ : double) <- Daedalus.Double _107
     pure $$
 
Daedalus.LEUInt16 : Grammar (uint 16) =
  do (_109 : bool) <- pure false
     ($$ : uint 16) <- Daedalus.UInt16 _109
     pure $$
 
Daedalus.LEUInt32 : Grammar (uint 32) =
  do (_111 : bool) <- pure false
     ($$ : uint 32) <- Daedalus.UInt32 _111
     pure $$
 
Daedalus.LEUInt64 : Grammar (uint 64) =
  do (_113 : bool) <- pure false
     ($$ : uint 64) <- Daedalus.UInt64 _113
     pure $$
 
Daedalus.LESInt16 : Grammar (sint 16) =
  do (_115 : bool) <- pure false
     ($$ : sint 16) <- Daedalus.SInt16 _115
     pure $$
 
Daedalus.LESInt32 : Grammar (sint 32) =
  do (_117 : bool) <- pure false
     ($$ : sint 32) <- Daedalus.SInt32 _117
     pure $$
 
Daedalus.LESInt64 : Grammar (sint 64) =
  do (_119 : bool) <- pure false
     ($$ : sint 64) <- Daedalus.SInt64 _119
     pure $$
 
Daedalus.LEHalfFloat : Grammar float =
  do (_121 : bool) <- pure false
     ($$ : float) <- Daedalus.HalfFloat _121
     pure $$
 
Daedalus.LEFloat : Grammar float =
  do (_123 : bool) <- pure false
     ($$ : float) <- Daedalus.Float _123
     pure $$
 
Daedalus.LEDouble : Grammar double =
  do (_125 : bool) <- pure false
     ($$ : double) <- Daedalus.Double _125
     pure $$
 
Daedalus.Guard (b : bool) : Grammar {} =
  case b is
    { true -> pure {}
    }
 
Daedalus.Only ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do ($$ : ?a0) <- P
     END
     pure $$
 
Daedalus.SetStreamAt (n : uint 64) (s : Stream) : Grammar {} =
  do (_127 : Stream) <- StreamOff n s
     SetStream _127
 
Daedalus.Skip (n : uint 64) : Grammar {} =
  do (_128 : Stream) <- CurrentStream
     Daedalus.SetStreamAt n _128
 
Daedalus._SetStreamAt (n : uint 64) (s : Stream) : Grammar {} =
  do (_127 : Stream) <- StreamOff n s
     SetStream _127
 
Daedalus.Chunk ?a0 (n : uint 64) (P : Grammar ?a0) : Grammar ?a0 =
  do (s : Stream) <- CurrentStream
     do (_129 : Stream) <- StreamLen n s
        SetStream _129
     ($$ : ?a0) <- P
     Daedalus._SetStreamAt n s
     pure $$
 
Daedalus.Bytes (n : uint 64) : Grammar Stream =
  Daedalus.Chunk Stream n CurrentStream
 
Daedalus.LookAhead ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do (s : Stream) <- CurrentStream
     ($$ : ?a0) <- P
     SetStream s
     pure $$
 
Daedalus._UInt16 : Grammar {} =
  do @GetByte
     @GetByte
 
Daedalus._UInt32 : Grammar {} =
  do Daedalus._UInt16
     Daedalus._UInt16
 
Daedalus._UInt64 : Grammar {} =
  do Daedalus._UInt32
     Daedalus._UInt32
 
Daedalus._SInt16 : Grammar {} =
  Daedalus._UInt16
 
Daedalus._SInt32 : Grammar {} =
  Daedalus._UInt32
 
Daedalus._SInt64 : Grammar {} =
  Daedalus._UInt64
 
Daedalus._HalfFloat : Grammar {} =
  Daedalus._UInt16
 
Daedalus._Float : Grammar {} =
  Daedalus._UInt32
 
Daedalus._Double : Grammar {} =
  Daedalus._UInt64
 
Daedalus._BEUInt16 : Grammar {} =
  Daedalus._UInt16
 
Daedalus._BEUInt32 : Grammar {} =
  Daedalus._UInt32
 
Daedalus._BEUInt64 : Grammar {} =
  Daedalus._UInt64
 
Daedalus._BESInt16 : Grammar {} =
  Daedalus._SInt16
 
Daedalus._BESInt32 : Grammar {} =
  Daedalus._SInt32
 
Daedalus._BESInt64 : Grammar {} =
  Daedalus._SInt64
 
Daedalus._BEHalfFloat : Grammar {} =
  Daedalus._HalfFloat
 
Daedalus._BEFloat : Grammar {} =
  Daedalus._Float
 
Daedalus._BEDouble : Grammar {} =
  Daedalus._Double
 
Daedalus._LEUInt16 : Grammar {} =
  Daedalus._UInt16
 
Daedalus._LEUInt32 : Grammar {} =
  Daedalus._UInt32
 
Daedalus._LEUInt64 : Grammar {} =
  Daedalus._UInt64
 
Daedalus._LESInt16 : Grammar {} =
  Daedalus._SInt16
 
Daedalus._LESInt32 : Grammar {} =
  Daedalus._SInt32
 
Daedalus._LESInt64 : Grammar {} =
  Daedalus._SInt64
 
Daedalus._LEHalfFloat : Grammar {} =
  Daedalus._HalfFloat
 
Daedalus._LEFloat : Grammar {} =
  Daedalus._Float
 
Daedalus._LEDouble : Grammar {} =
  Daedalus._Double
 
Daedalus._Guard (b : bool) : Grammar {} =
  case b is
    { true -> pure {}
    }
 
Daedalus._Only ?a0 (_P : Grammar {}) : Grammar {} =
  do _P
     END
 
Daedalus._Skip (n : uint 64) : Grammar {} =
  do (_128 : Stream) <- CurrentStream
     Daedalus._SetStreamAt n _128
 
Daedalus._Chunk ?a0 (n : uint 64) (_P : Grammar {}) : Grammar {} =
  do (s : Stream) <- CurrentStream
     do (_129 : Stream) <- StreamLen n s
        SetStream _129
     _P
     Daedalus._SetStreamAt n s
 
Daedalus._Bytes (n : uint 64) : Grammar {} =
  Daedalus._Chunk Stream n (pure {})
 
Daedalus._LookAhead ?a0 (_P : Grammar {}) : Grammar {} =
  do (s : Stream) <- CurrentStream
     _P
     SetStream s
module T074
 
--- Imports:
import Daedalus
 
--- Type defs:
type T074.Check = { value: float
                  ; isNan: bool
                  ; isNZ: bool
                  ; isInf: bool
                  ; isDen: bool
                  }
 
type T074.Main = { ex1: T074.Check
                 ; ex2: T074.Check
                 }
 
--- Rules:
 
T074.Check (xs : uint 32) : Grammar T074.Check =
  do (value : float) <- pure (wordToFloat xs)
     (isNan : bool) <- pure (isNaN value)
     (isNZ : bool) <- pure (isNegativeZero value)
     (isInf : bool) <- pure (isInfinit value)
     (isDen : bool) <- pure (isDenormalized value)
     pure {value = value,
           isNan = isNan,
           isNZ = isNZ,
           isInf = isInf,
           isDen = isDen}
 
T074.Main : Grammar T074.Main =
  do (ex1 : T074.Check) <- T074.Check 0
     (ex2 : T074.Check) <- T074.Check (1 # 0)
     pure {ex1 = ex1,
           ex2 = ex2}
 
T074._Check : Grammar {} =
  pure {}
 
T074._Main : Grammar {} =
  do T074._Check
     T074._Check
