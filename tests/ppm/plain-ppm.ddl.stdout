module plain-ppm
 
--- Imports:
 
--- Type defs:
type plain-ppm.RGB = { red: int
                     ; green: int
                     ; blue: int
                     }
 
type plain-ppm.PPM = { width: int
                     ; height: int
                     ; maxVal: int
                     ; data: [[plain-ppm.RGB]]
                     }
 
--- Rules:
 
plain-ppm.Digit : Grammar (uint 8) =
  do (d : uint 8) <- Match ('0' .. '9')
     ($$ : uint 8) <- pure (d - '0')
     pure $$
 
plain-ppm.addDigit ?a1 (Coerce safe ?a1 int) (val : int) (d : ?a1) : int =
  (10 * val) + (d as int)
 
plain-ppm.Natural : Grammar int =
  do (ds : [uint 8]) <- Many[ 1 .. ] plain-ppm.Digit
     ($$ : int) <- pure (for ((val : int) = 0; (d : uint 8) in ds)
                           (plain-ppm.addDigit (uint 8) val d))
     pure $$
 
plain-ppm._WS : Grammar {} =
  Choose fair
    { Choose fair
        { Choose fair
            { Choose fair
                { Choose fair
                    { @Match {'\NUL'}
                    | @Match {'\t'}
                    }
                | @Match {'\f'}
                }
            | @Match {' '}
            }
        | @Match {'\n'}
        }
    | @Match {'\r'}
    }
 
plain-ppm.Token ?a1 (P : Grammar ?a1) : Grammar ?a1 =
  do ($$ : ?a1) <- P
     @Many[ 1 .. ] plain-ppm._WS
     pure $$
 
plain-ppm.RGB : Grammar plain-ppm.RGB =
  do (red : int) <- plain-ppm.Token int plain-ppm.Natural
     (green : int) <- plain-ppm.Token int plain-ppm.Natural
     (blue : int) <- plain-ppm.Token int plain-ppm.Natural
     pure {red = red,
           green = green,
           blue = blue}
 
plain-ppm.PPM : Grammar plain-ppm.PPM =
  do @MatchBytes "P"
     (version : int) <- plain-ppm.Token int plain-ppm.Natural
     Guard (version == 3)
     (width : int) <- plain-ppm.Token int plain-ppm.Natural
     (height : int) <- plain-ppm.Token int plain-ppm.Natural
     (maxVal : int) <- plain-ppm.Token int plain-ppm.Natural
     (data : [[plain-ppm.RGB]]) <- Many[height] Many[width] plain-ppm.RGB
     pure {width = width,
           height = height,
           maxVal = maxVal,
           data = data}
 
plain-ppm.Main : Grammar plain-ppm.PPM =
  do ($$ : plain-ppm.PPM) <- plain-ppm.PPM
     END
     pure $$
 
plain-ppm.WS : Grammar (uint 8) =
  Choose fair
    { Choose fair
        { Choose fair
            { Choose fair
                { Choose fair
                    { Match {'\NUL'}
                    | Match {'\t'}
                    }
                | Match {'\f'}
                }
            | Match {' '}
            }
        | Match {'\n'}
        }
    | Match {'\r'}
    }
 
plain-ppm._Digit : Grammar {} =
  @Match ('0' .. '9')
 
plain-ppm._Natural : Grammar {} =
  @Many[ 1 .. ] plain-ppm._Digit
 
plain-ppm._Token ?a1 (_P : Grammar {}) : Grammar {} =
  do _P
     @Many[ 1 .. ] plain-ppm._WS
 
plain-ppm._RGB : Grammar {} =
  do plain-ppm._Token int plain-ppm._Natural
     plain-ppm._Token int plain-ppm._Natural
     plain-ppm._Token int plain-ppm._Natural
 
plain-ppm._PPM : Grammar {} =
  do @MatchBytes "P"
     (version : int) <- plain-ppm.Token int plain-ppm.Natural
     Guard (version == 3)
     (width : int) <- plain-ppm.Token int plain-ppm.Natural
     (height : int) <- plain-ppm.Token int plain-ppm.Natural
     plain-ppm._Token int plain-ppm._Natural
     @Many[height] @Many[width] plain-ppm._RGB
 
plain-ppm._Main : Grammar {} =
  do plain-ppm._PPM
     END
