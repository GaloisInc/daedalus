module plain-ppm
 
--- Imports:
 
--- Type defs:
type plain-ppm.RGB = { red: uint 64
                     ; green: uint 64
                     ; blue: uint 64
                     }
 
type plain-ppm.PPM = { width: uint 64
                     ; height: uint 64
                     ; maxVal: uint 64
                     ; data: [[plain-ppm.RGB]]
                     }
 
--- Rules:
 
plain-ppm._WS : Grammar {} =
  @Match ((((({0} | {9}) | {12}) | {32}) | {'\n'}) | {'\r'})
 
plain-ppm.Token ?a0 (P : Grammar ?a0) : Grammar ?a0 =
  do ($$ : ?a0) <- P
     @Many[ 1 .. ] plain-ppm._WS
     pure $$
 
plain-ppm.Digit : Grammar (uint 8) =
  do (d : uint 8) <- Match ('0' .. '9')
     ($$ : uint 8) <- pure (d - '0')
     pure $$
 
plain-ppm.addDigit ?a0 (Coerce safe ?a0 (uint 64)) (val : uint 64) (d : ?a0) : uint 64 =
  (10 * val) + (d as uint 64)
 
plain-ppm.Natural : Grammar (uint 64) =
  do (ds : [uint 8]) <- Many[ 1 .. ] plain-ppm.Digit
     ($$ : uint 64) <- pure (for ((val : uint 64) = 0; (d : uint 8) in ds)
                               (plain-ppm.addDigit (uint 8) val d))
     pure $$
 
plain-ppm.RGB : Grammar plain-ppm.RGB =
  do (red : uint 64) <- plain-ppm.Token (uint 64) plain-ppm.Natural
     (green : uint 64) <- plain-ppm.Token (uint 64) plain-ppm.Natural
     (blue : uint 64) <- plain-ppm.Token (uint 64) plain-ppm.Natural
     pure {red = red,
           green = green,
           blue = blue}
 
plain-ppm.PPM : Grammar plain-ppm.PPM =
  do @MatchBytes "P"
     (version : uint 64) <- plain-ppm.Token (uint 64) plain-ppm.Natural
     case version == 3 is
       { true -> pure {}
       }
     (width : uint 64) <- plain-ppm.Token (uint 64) plain-ppm.Natural
     (height : uint 64) <- plain-ppm.Token (uint 64) plain-ppm.Natural
     (maxVal : uint 64) <- plain-ppm.Token (uint 64) plain-ppm.Natural
     (data : [[plain-ppm.RGB]]) <- Many[height] Many[width] plain-ppm.RGB
     pure {width = width,
           height = height,
           maxVal = maxVal,
           data = data}
 
plain-ppm.Main : Grammar plain-ppm.PPM =
  do ($$ : plain-ppm.PPM) <- plain-ppm.PPM
     pure $$
 
plain-ppm.WS : Grammar (uint 8) =
  Match ((((({0} | {9}) | {12}) | {32}) | {'\n'}) | {'\r'})
 
plain-ppm._Token ?a0 (_P : Grammar {}) : Grammar {} =
  do _P
     @Many[ 1 .. ] plain-ppm._WS
 
plain-ppm._Digit : Grammar {} =
  @Match ('0' .. '9')
 
plain-ppm._Natural : Grammar {} =
  @Many[ 1 .. ] plain-ppm._Digit
 
plain-ppm._RGB : Grammar {} =
  do plain-ppm._Token (uint 64) plain-ppm._Natural
     plain-ppm._Token (uint 64) plain-ppm._Natural
     plain-ppm._Token (uint 64) plain-ppm._Natural
 
plain-ppm._PPM : Grammar {} =
  do @MatchBytes "P"
     (version : uint 64) <- plain-ppm.Token (uint 64) plain-ppm.Natural
     case version == 3 is
       { true -> pure {}
       }
     (width : uint 64) <- plain-ppm.Token (uint 64) plain-ppm.Natural
     (height : uint 64) <- plain-ppm.Token (uint 64) plain-ppm.Natural
     plain-ppm._Token (uint 64) plain-ppm._Natural
     @Many[height] @Many[width] plain-ppm._RGB
 
plain-ppm._Main : Grammar {} =
  plain-ppm._PPM
