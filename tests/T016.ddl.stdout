module Number
 
--- Imports:
 
--- Type defs:
type Number.Frac ?a0 = { num: int
                       ; exp: ?a0
                       }
 
--- Rules:
 
Number.addDigit ?a0 (Literal 10 ?a0) (Arith ?a0) (val : ?a0) (d : ?a0) : ?a0 =
  (10 * val) + d
 
Number.Digit : Grammar int =
  do (d : uint 8) <- Match ('0' .. '9')
     ($$ : int) <- pure (d - '0' as int)
     pure $$
 
Number.Natural : Grammar int =
  do (_19 : [int]) <- Many[ 1 .. ] Number.Digit
     for ((val : int) = 0; (d : int) in _19)
       (pure (Number.addDigit int val d))
 
Number.Frac ?a0 (Arith ?a0) (Literal 1 ?a0) (n : uint 64) (w : Number.Frac ?a0) : Grammar (Number.Frac ?a0) =
  do (ds : [int]) <- do @Match {'.'}
                        ($$ : [int]) <- Many[ n .. ] Number.Digit
                        pure $$
     ($$ : Number.Frac ?a0) <- pure (for ((val : Number.Frac ?a0) = w; (d : int) in ds)
                                       let num = Number.addDigit int (val.num) d in
                                       let exp = (val.exp) - 1 in
                                       {num = num,
                                        exp = exp})
     pure $$
 
Number.HexDigit : Grammar int =
  Choose biased
    { Number.Digit
    | Choose biased
        { do (_24 : uint 8) <- do (_23 : uint 8) <- do (_22 : uint 8) <- Match ('a' .. 'f')
                                                       pure (_22 - 'a')
                                  pure (10 + _23)
             pure (_24 as int)
        | do (_27 : uint 8) <- do (_26 : uint 8) <- do (_25 : uint 8) <- Match ('A' .. 'F')
                                                       pure (_25 - 'A')
                                  pure (10 + _26)
             pure (_27 as int)
        }
    }
 
Number.Digit_28 : Grammar {} =
  @Match ('0' .. '9')
 
Number.Natural_29 : Grammar {} =
  @Many[ 1 .. ] Number.Digit_28
 
Number.Frac_30 ?a0 (Arith ?a0) (Literal 1 ?a0) (n : uint 64) : Grammar {} =
  do @Match {'.'}
     @Many[ n .. ] Number.Digit_28
 
Number.HexDigit_32 : Grammar {} =
  Choose biased
    { Number.Digit_28
    | Choose biased
        { @Match ('a' .. 'f')
        | @Match ('A' .. 'F')
        }
    }
module T016
 
--- Imports:
import Number
 
--- Type defs:
 
--- Rules:
 
T016.Main : Grammar int =
  Number.Natural
 
T016.Main_33 : Grammar {} =
  Number.Natural_29
